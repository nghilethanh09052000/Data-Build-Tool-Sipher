{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json",
        "dbt_version": "1.3.7",
        "generated_at": "2024-01-19T04:01:22.781783Z",
        "invocation_id": "42b779a7-453f-4b03-b84e-bbdc927b7ca0",
        "env": {},
        "project_id": "fb98579424cccb9fa041b62e40f5f107",
        "user_id": "42c9eaac-db44-47f6-b6d3-d8ed06e5f6d9",
        "send_anonymous_usage_stats": true,
        "adapter_type": "bigquery"
    },
    "nodes": {
        "model.dbt_sipher.rpt_social_profile_stats": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.fct_discord_profile_stats_snapshot_daily",
                    "model.dbt_sipher.dim_discord_profile",
                    "model.dbt_sipher.fct_tiktok_profile_stats_snapshot_daily",
                    "model.dbt_sipher.fct_twitter_profile_stats_snapshot_daily",
                    "model.dbt_sipher.dim_twitter_profile"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "reporting_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "reporting_social",
            "fqn": [
                "dbt_sipher",
                "reporting",
                "social",
                "rpt_social_profile_stats"
            ],
            "unique_id": "model.dbt_sipher.rpt_social_profile_stats",
            "raw_code": "{{- config(\n  partition_by={\n    'field': 'snapshot_date_tzict',\n    'data_type': 'date',\n  },\n  materialized='table'\n) -}}\n\n\nWITH\ndiscord_profile AS\n  (SELECT\n    fct.snapshot_date_tzict,\n    'Discord' AS channel,\n    COALESCE(fct.id, dim.id) AS id,\n    name,\n\n    member_count AS discord_member_cnt,\n\n    CAST(NULL AS INT64) AS tiktok_followers_cnt,\n    CAST(NULL AS INT64) AS tiktok_hearts_cnt,\n    CAST(NULL AS INT64) AS tiktok_diggs_cnt,\n    CAST(NULL AS INT64) AS tiktok_videos_cnt,\n\n    CAST(NULL AS INT64) AS twitter_followers_cnt,\n    CAST(NULL AS INT64) AS twitter_following_cnt,\n    CAST(NULL AS INT64) AS twitter_listed_cnt,\n    CAST(NULL AS INT64) AS twitter_tweet_cnt\n  FROM {{ ref('fct_discord_profile_stats_snapshot_daily') }} AS fct\n  LEFT JOIN {{ ref('dim_discord_profile') }} AS dim\n    ON fct.id = dim.id)\n\n,tiktok_profile AS\n  (SELECT\n    snapshot_date_tzict,\n    'Tiktok' AS channel,\n    CAST(NULL AS INT64) AS id,\n    CAST(NULL AS STRING) AS name,\n\n    CAST(NULL AS INT64) AS discord_member_cnt,\n\n    followers_cnt AS tiktok_followers_cnt,\n    hearts_cnt AS tiktok_hearts_cnt,\n    diggs_cnt AS tiktok_diggs_cnt,\n    videos_cnt AS tiktok_videos_cnt,\n\n    CAST(NULL AS INT64) AS twitter_followers_cnt,\n    CAST(NULL AS INT64) AS twitter_following_cnt,\n    CAST(NULL AS INT64) AS twitter_listed_cnt,\n    CAST(NULL AS INT64) AS twitter_tweet_cnt\n  FROM {{ ref('fct_tiktok_profile_stats_snapshot_daily') }} AS fct)\n\n,twitter_profile AS\n  (SELECT\n    fct.snapshot_date_tzict,\n    'Twitter' AS channel,\n    COALESCE(fct.id, dim.id) AS id,\n    name,\n\n    CAST(NULL AS INT64) AS discord_member_cnt,\n\n    CAST(NULL AS INT64) AS tiktok_followers_cnt,\n    CAST(NULL AS INT64) AS tiktok_hearts_cnt,\n    CAST(NULL AS INT64) AS tiktok_diggs_cnt,\n    CAST(NULL AS INT64) AS tiktok_videos_cnt,\n\n    followers_cnt AS twitter_followers_cnt,\n    following_cnt AS twitter_following_cnt,\n    listed_cnt AS twitter_listed_cnt,\n    tweet_cnt AS twitter_tweet_cnt\n  FROM {{ ref('fct_twitter_profile_stats_snapshot_daily') }} AS fct\n  LEFT JOIN {{ ref('dim_twitter_profile') }} AS dim\n    ON fct.id = dim.id)\n\n,final AS\n  (SELECT * FROM discord_profile\n  UNION ALL\n  SELECT * FROM tiktok_profile)\n\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "reporting/social/rpt_social_profile_stats.sql",
            "original_file_path": "models/reporting/social/rpt_social_profile_stats.sql",
            "name": "rpt_social_profile_stats",
            "alias": "rpt_social_profile_stats",
            "checksum": {
                "name": "sha256",
                "checksum": "9afde4a8014949171600c5532c2539f0c3f0cda12807d0e88aa5f6f31121a44e"
            },
            "tags": [],
            "refs": [
                [
                    "fct_discord_profile_stats_snapshot_daily"
                ],
                [
                    "dim_discord_profile"
                ],
                [
                    "fct_tiktok_profile_stats_snapshot_daily"
                ],
                [
                    "fct_twitter_profile_stats_snapshot_daily"
                ],
                [
                    "dim_twitter_profile"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/reporting/social/rpt_social_profile_stats.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "reporting_social",
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "materialized": "table"
            },
            "created_at": 1705293861.4144077,
            "compiled_code": "WITH\ndiscord_profile AS\n  (SELECT\n    fct.snapshot_date_tzict,\n    'Discord' AS channel,\n    COALESCE(fct.id, dim.id) AS id,\n    name,\n\n    member_count AS discord_member_cnt,\n\n    CAST(NULL AS INT64) AS tiktok_followers_cnt,\n    CAST(NULL AS INT64) AS tiktok_hearts_cnt,\n    CAST(NULL AS INT64) AS tiktok_diggs_cnt,\n    CAST(NULL AS INT64) AS tiktok_videos_cnt,\n\n    CAST(NULL AS INT64) AS twitter_followers_cnt,\n    CAST(NULL AS INT64) AS twitter_following_cnt,\n    CAST(NULL AS INT64) AS twitter_listed_cnt,\n    CAST(NULL AS INT64) AS twitter_tweet_cnt\n  FROM `sipher-data-testing`.`mart_social`.`fct_discord_profile_stats_snapshot_daily` AS fct\n  LEFT JOIN `sipher-data-testing`.`mart_social`.`dim_discord_profile` AS dim\n    ON fct.id = dim.id)\n\n,tiktok_profile AS\n  (SELECT\n    snapshot_date_tzict,\n    'Tiktok' AS channel,\n    CAST(NULL AS INT64) AS id,\n    CAST(NULL AS STRING) AS name,\n\n    CAST(NULL AS INT64) AS discord_member_cnt,\n\n    followers_cnt AS tiktok_followers_cnt,\n    hearts_cnt AS tiktok_hearts_cnt,\n    diggs_cnt AS tiktok_diggs_cnt,\n    videos_cnt AS tiktok_videos_cnt,\n\n    CAST(NULL AS INT64) AS twitter_followers_cnt,\n    CAST(NULL AS INT64) AS twitter_following_cnt,\n    CAST(NULL AS INT64) AS twitter_listed_cnt,\n    CAST(NULL AS INT64) AS twitter_tweet_cnt\n  FROM `sipher-data-testing`.`mart_social`.`fct_tiktok_profile_stats_snapshot_daily` AS fct)\n\n,twitter_profile AS\n  (SELECT\n    fct.snapshot_date_tzict,\n    'Twitter' AS channel,\n    COALESCE(fct.id, dim.id) AS id,\n    name,\n\n    CAST(NULL AS INT64) AS discord_member_cnt,\n\n    CAST(NULL AS INT64) AS tiktok_followers_cnt,\n    CAST(NULL AS INT64) AS tiktok_hearts_cnt,\n    CAST(NULL AS INT64) AS tiktok_diggs_cnt,\n    CAST(NULL AS INT64) AS tiktok_videos_cnt,\n\n    followers_cnt AS twitter_followers_cnt,\n    following_cnt AS twitter_following_cnt,\n    listed_cnt AS twitter_listed_cnt,\n    tweet_cnt AS twitter_tweet_cnt\n  FROM `sipher-data-testing`.`mart_social`.`fct_twitter_profile_stats_snapshot_daily` AS fct\n  LEFT JOIN `sipher-data-testing`.`mart_social`.`dim_twitter_profile` AS dim\n    ON fct.id = dim.id)\n\n,final AS\n  (SELECT * FROM discord_profile\n  UNION ALL\n  SELECT * FROM tiktok_profile)\n\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`reporting_social`.`rpt_social_profile_stats`"
        },
        "model.dbt_sipher.rpt_twitter_post_stats": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_twitter_timeline",
                    "model.dbt_sipher.dim_twitter_profile"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "twitter_post_stats",
                "schema": "reporting_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "date",
                    "data_type": "date",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "reporting_social",
            "fqn": [
                "dbt_sipher",
                "reporting",
                "social",
                "rpt_twitter_post_stats"
            ],
            "unique_id": "model.dbt_sipher.rpt_twitter_post_stats",
            "raw_code": "{{- config(\n    alias='twitter_post_stats',\n    materialized='table',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n)-}}\n\nWITH\n  twitter_timeline AS (\n    SELECT\n      *,\n      (SELECT rt_list.item.type FROM UNNEST(referenced_tweets.list) AS rt_list) AS post_type\n    FROM {{ ref(\"stg_twitter_timeline\") }}\n  )\n\n  ,twitter_profile AS (\n    SELECT * FROM {{ ref(\"dim_twitter_profile\") }}\n  )\n\nSELECT\n  created_at AS post_created_at,\n  DATE(created_at) AS date,\n  COALESCE(profile.username, \"AtherLabs\") AS author_user_name,\n  text,\n  impression_count AS impressions,\n  like_count AS likes,\n  reply_count AS replies,\n  retweet_count AS retweet,\n  quote_count AS quotes\nFROM twitter_timeline AS timeline\nLEFT JOIN twitter_profile AS profile\n  ON timeline.author_id = profile.id\nWHERE post_type IS NULL",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "reporting/social/rpt_twitter_post_stats.sql",
            "original_file_path": "models/reporting/social/rpt_twitter_post_stats.sql",
            "name": "rpt_twitter_post_stats",
            "alias": "twitter_post_stats",
            "checksum": {
                "name": "sha256",
                "checksum": "cdd6c4afb02ab2320d65c64789001cbdc7a2e28cf1ce829319e38c8d1bc7d48f"
            },
            "tags": [],
            "refs": [
                [
                    "stg_twitter_timeline"
                ],
                [
                    "dim_twitter_profile"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/reporting/social/rpt_twitter_post_stats.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "reporting_social",
                "alias": "twitter_post_stats",
                "materialized": "table",
                "partition_by": {
                    "field": "date",
                    "data_type": "date",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.4201684,
            "compiled_code": "WITH\n  twitter_timeline AS (\n    SELECT\n      *,\n      (SELECT rt_list.item.type FROM UNNEST(referenced_tweets.list) AS rt_list) AS post_type\n    FROM `sipher-data-testing`.`staging_social`.`twitter_timeline`\n  )\n\n  ,twitter_profile AS (\n    SELECT * FROM `sipher-data-testing`.`mart_social`.`dim_twitter_profile`\n  )\n\nSELECT\n  created_at AS post_created_at,\n  DATE(created_at) AS date,\n  COALESCE(profile.username, \"AtherLabs\") AS author_user_name,\n  text,\n  impression_count AS impressions,\n  like_count AS likes,\n  reply_count AS replies,\n  retweet_count AS retweet,\n  quote_count AS quotes\nFROM twitter_timeline AS timeline\nLEFT JOIN twitter_profile AS profile\n  ON timeline.author_id = profile.id\nWHERE post_type IS NULL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`reporting_social`.`twitter_post_stats`"
        },
        "model.dbt_sipher.rpt_finance_wallet_account_balance": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_etherscan_polygon__important_wallet_accounts_balance",
                    "model.dbt_sipher.stg_coinmarketcap__main_token_quotes",
                    "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_presentation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "quote_date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_presentation",
            "fqn": [
                "dbt_sipher",
                "reporting",
                "etherscan",
                "rpt_finance_wallet_account_balance"
            ],
            "unique_id": "model.dbt_sipher.rpt_finance_wallet_account_balance",
            "raw_code": "{{- config(\n    materialized='table',\n    schema='sipher_presentation',\n    partition='quote_date'\n)-}}\n\nWITH wallet_balance AS(\n    SELECT\n        *\n    FROM\n        {{ ref('stg_etherscan_polygon__important_wallet_accounts_balance') }} balance\n),\n\ndaily_quote AS(\n    SELECT\n        LOWER(symbol) AS token_symbol,\n        close_price,\n        quote_date\n    FROM\n        {{ ref('stg_coinmarketcap__main_token_quotes') }}\n),\n\nintraday_quote AS(\n    SELECT\n        CASE WHEN token_symbol = 'Compound' THEN 'comp' ELSE LOWER(token_symbol) END AS token_symbol,\n        price_usd,\n        DATE(LEFT(CAST(timestamp AS STRING), 10)) AS quote_date\n    FROM\n        {{ ref('stg_coinmarketcap__main_token_quotes_intraday') }} QUALIFY ROW_NUMBER() OVER (\n            PARTITION BY token_symbol\n            ORDER BY\n                timestamp DESC\n        ) = 1\n    ORDER BY\n        token_symbol,\n        quote_date\n)\n\nSELECT\n    DISTINCT wallet_address,\n    wallet_name,\n    token_address,\n    wallet_balance.token_symbol AS token_symbol,\n    value * POWER(10, - decimal) AS value,\n    COALESCE(close_price, price_usd) AS close_price,\n    network,\n    wallet_balance.quote_date AS quote_date\nFROM\n    wallet_balance\n    LEFT JOIN daily_quote ON daily_quote.quote_date = wallet_balance.quote_date\n    AND daily_quote.token_symbol = LOWER(wallet_balance.token_symbol)\n    LEFT JOIN intraday_quote ON intraday_quote.quote_date = wallet_balance.quote_date\n    AND intraday_quote.token_symbol = LOWER(wallet_balance.token_symbol)",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "reporting/etherscan/rpt_finance_wallet_account_balance.sql",
            "original_file_path": "models/reporting/etherscan/rpt_finance_wallet_account_balance.sql",
            "name": "rpt_finance_wallet_account_balance",
            "alias": "rpt_finance_wallet_account_balance",
            "checksum": {
                "name": "sha256",
                "checksum": "33dee49922a4b5b38ccb964433bffbfaabbf222ac3619e247008279d9799888e"
            },
            "tags": [],
            "refs": [
                [
                    "stg_etherscan_polygon__important_wallet_accounts_balance"
                ],
                [
                    "stg_coinmarketcap__main_token_quotes"
                ],
                [
                    "stg_coinmarketcap__main_token_quotes_intraday"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/reporting/etherscan/rpt_finance_wallet_account_balance.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "sipher_presentation",
                "partition": "quote_date"
            },
            "created_at": 1705293861.4239192,
            "compiled_code": "WITH wallet_balance AS(\n    SELECT\n        *\n    FROM\n        `sipher-data-testing`.`raw_etherscan`.`stg_etherscan_polygon__important_wallet_accounts_balance` balance\n),\n\ndaily_quote AS(\n    SELECT\n        LOWER(symbol) AS token_symbol,\n        close_price,\n        quote_date\n    FROM\n        `sipher-data-testing`.`raw_etherscan`.`stg_coinmarketcap__main_token_quotes`\n),\n\nintraday_quote AS(\n    SELECT\n        CASE WHEN token_symbol = 'Compound' THEN 'comp' ELSE LOWER(token_symbol) END AS token_symbol,\n        price_usd,\n        DATE(LEFT(CAST(timestamp AS STRING), 10)) AS quote_date\n    FROM\n        `sipher-data-testing`.`raw_etherscan`.`stg_coinmarketcap__main_token_quotes_intraday` QUALIFY ROW_NUMBER() OVER (\n            PARTITION BY token_symbol\n            ORDER BY\n                timestamp DESC\n        ) = 1\n    ORDER BY\n        token_symbol,\n        quote_date\n)\n\nSELECT\n    DISTINCT wallet_address,\n    wallet_name,\n    token_address,\n    wallet_balance.token_symbol AS token_symbol,\n    value * POWER(10, - decimal) AS value,\n    COALESCE(close_price, price_usd) AS close_price,\n    network,\n    wallet_balance.quote_date AS quote_date\nFROM\n    wallet_balance\n    LEFT JOIN daily_quote ON daily_quote.quote_date = wallet_balance.quote_date\n    AND daily_quote.token_symbol = LOWER(wallet_balance.token_symbol)\n    LEFT JOIN intraday_quote ON intraday_quote.quote_date = wallet_balance.quote_date\n    AND intraday_quote.token_symbol = LOWER(wallet_balance.token_symbol)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_presentation`.`rpt_finance_wallet_account_balance`"
        },
        "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.crypto_ethereum.token_transfers"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_ethereum",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "act_date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_ethereum",
            "fqn": [
                "dbt_sipher",
                "staging",
                "bigquery_public__crypto_ethereum",
                "stg_bq_public_ethereum__token_transfer_last_15d"
            ],
            "unique_id": "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d",
            "raw_code": "{{- config(\n    materialized='view',\n    partition='act_date'\n)-}}\n\nSELECT  \n    DATE(block_timestamp) AS date_tzutc,\n    CASE \n            WHEN LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}' THEN 'SIPHER Token'\n            WHEN LOWER(token_address) = '{{ var(\"sipher_inu_wallet_address\") }}' THEN 'SIPHER INU'\n            WHEN LOWER(token_address) = '{{ var(\"sipher_neko_wallet_address\") }}' THEN 'SIPHER NEKO'\n            ELSE 'N/A'\n        END AS token_name,\n    CASE \n            WHEN LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}' THEN CAST(value AS NUMERIC)\n            WHEN LOWER(token_address) = '{{ var(\"sipher_inu_wallet_address\") }}' THEN 1\n            WHEN LOWER(token_address) = '{{ var(\"sipher_neko_wallet_address\") }}' THEN 1\n            ELSE 0\n        END AS sipher_value,\n    *\nFROM {{ source('crypto_ethereum', 'token_transfers') }}\nWHERE DATE(block_timestamp) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 15 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\nAND LOWER(token_address) IN ('{{ var(\"sipher_token_wallet_address\") }}', '{{ var(\"sipher_inu_wallet_address\") }}', '{{ var(\"sipher_neko_wallet_address\") }}')",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/bigquery_public__crypto_ethereum/stg_bq_public_ethereum__token_transfer_last_15d.sql",
            "original_file_path": "models/staging/bigquery_public__crypto_ethereum/stg_bq_public_ethereum__token_transfer_last_15d.sql",
            "name": "stg_bq_public_ethereum__token_transfer_last_15d",
            "alias": "stg_bq_public_ethereum__token_transfer_last_15d",
            "checksum": {
                "name": "sha256",
                "checksum": "3f5647ea6072334a500eeefa0ed7bae8d7152cfd9467ff2b4f1a7a9137108584"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "crypto_ethereum",
                    "token_transfers"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/bigquery_public__crypto_ethereum/stg_bq_public_ethereum__token_transfer_last_15d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_ethereum",
                "materialized": "view",
                "partition": "act_date"
            },
            "created_at": 1705293861.4273624,
            "compiled_code": "SELECT  \n    DATE(block_timestamp) AS date_tzutc,\n    CASE \n            WHEN LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN 'SIPHER Token'\n            WHEN LOWER(token_address) = '0x9c57d0278199c931cf149cc769f37bb7847091e7' THEN 'SIPHER INU'\n            WHEN LOWER(token_address) = '0x09e0df4ae51111ca27d6b85708cfb3f1f7cae982' THEN 'SIPHER NEKO'\n            ELSE 'N/A'\n        END AS token_name,\n    CASE \n            WHEN LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN CAST(value AS NUMERIC)\n            WHEN LOWER(token_address) = '0x9c57d0278199c931cf149cc769f37bb7847091e7' THEN 1\n            WHEN LOWER(token_address) = '0x09e0df4ae51111ca27d6b85708cfb3f1f7cae982' THEN 1\n            ELSE 0\n        END AS sipher_value,\n    *\nFROM `bigquery-public-data`.`crypto_ethereum`.`token_transfers`\nWHERE DATE(block_timestamp) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 15 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\nAND LOWER(token_address) IN ('0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511', '0x9c57d0278199c931cf149cc769f37bb7847091e7', '0x09e0df4ae51111ca27d6b85708cfb3f1f7cae982')",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_ethereum`.`stg_bq_public_ethereum__token_transfer_last_15d`"
        },
        "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.crypto_ethereum.token_transfers"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_ethereum",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "act_date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_ethereum",
            "fqn": [
                "dbt_sipher",
                "staging",
                "bigquery_public__crypto_ethereum",
                "stg_bq_public_ethereum__token_transfer_today"
            ],
            "unique_id": "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today",
            "raw_code": "{{- config(\n    materialized='view',\n    partition='act_date'\n)-}}\n\nSELECT  \n    DATE(block_timestamp) AS date_tzutc,\n    CASE \n            WHEN LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}' THEN 'SIPHER Token'\n            WHEN LOWER(token_address) = '{{ var(\"sipher_inu_wallet_address\") }}' THEN 'SIPHER INU'\n            WHEN LOWER(token_address) = '{{ var(\"sipher_neko_wallet_address\") }}' THEN 'SIPHER NEKO'\n            ELSE 'N/A'\n        END AS token_name,\n    CASE \n            WHEN LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}' THEN CAST(value AS NUMERIC)\n            WHEN LOWER(token_address) = '{{ var(\"sipher_inu_wallet_address\") }}' THEN 1\n            WHEN LOWER(token_address) = '{{ var(\"sipher_neko_wallet_address\") }}' THEN 1\n            ELSE 0\n        END AS sipher_value,\n    *\nFROM {{ source('crypto_ethereum', 'token_transfers') }}\nWHERE DATE(block_timestamp) = CURRENT_DATE()\nAND LOWER(token_address) IN ('{{ var(\"sipher_token_wallet_address\") }}', '{{ var(\"sipher_inu_wallet_address\") }}', '{{ var(\"sipher_neko_wallet_address\") }}')",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/bigquery_public__crypto_ethereum/stg_bq_public_ethereum__token_transfer_today.sql",
            "original_file_path": "models/staging/bigquery_public__crypto_ethereum/stg_bq_public_ethereum__token_transfer_today.sql",
            "name": "stg_bq_public_ethereum__token_transfer_today",
            "alias": "stg_bq_public_ethereum__token_transfer_today",
            "checksum": {
                "name": "sha256",
                "checksum": "b73da75efaa3623d7152945f295bd5a6a9d23b0d792987d35354f6ad18b43979"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "crypto_ethereum",
                    "token_transfers"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/bigquery_public__crypto_ethereum/stg_bq_public_ethereum__token_transfer_today.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_ethereum",
                "materialized": "view",
                "partition": "act_date"
            },
            "created_at": 1705293861.4314318,
            "compiled_code": "SELECT  \n    DATE(block_timestamp) AS date_tzutc,\n    CASE \n            WHEN LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN 'SIPHER Token'\n            WHEN LOWER(token_address) = '0x9c57d0278199c931cf149cc769f37bb7847091e7' THEN 'SIPHER INU'\n            WHEN LOWER(token_address) = '0x09e0df4ae51111ca27d6b85708cfb3f1f7cae982' THEN 'SIPHER NEKO'\n            ELSE 'N/A'\n        END AS token_name,\n    CASE \n            WHEN LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN CAST(value AS NUMERIC)\n            WHEN LOWER(token_address) = '0x9c57d0278199c931cf149cc769f37bb7847091e7' THEN 1\n            WHEN LOWER(token_address) = '0x09e0df4ae51111ca27d6b85708cfb3f1f7cae982' THEN 1\n            ELSE 0\n        END AS sipher_value,\n    *\nFROM `bigquery-public-data`.`crypto_ethereum`.`token_transfers`\nWHERE DATE(block_timestamp) = CURRENT_DATE()\nAND LOWER(token_address) IN ('0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511', '0x9c57d0278199c931cf149cc769f37bb7847091e7', '0x09e0df4ae51111ca27d6b85708cfb3f1f7cae982')",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_ethereum`.`stg_bq_public_ethereum__token_transfer_today`"
        },
        "model.dbt_sipher.stg_max__user_ad_revenue": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_max_mediation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_max_mediation",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "stg_max__user_ad_revenue"
            ],
            "unique_id": "model.dbt_sipher.stg_max__user_ad_revenue",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n  PARSE_TIMESTAMP(\"%F %T\", SUBSTR(Date, 0, 19)) AS timestamp_tzutc,\n  Ad_Unit_ID AS ad_unit_id,\n  Ad_Unit_Name AS ad_unit_name,\n  Waterfall AS waterfall,\n  Ad_Format AS ad_format,\n  Placement AS placement,\n  UPPER(Country) AS country_code,\n  Device_Type AS device_type,\n  IDFA AS idfa,\n  IDFV AS idfv,\n  User_ID AS user_id,\n  Network AS network,\n  CAST(Revenue AS FLOAT64) AS revenue,\n  Ad_placement AS ad_placement,\n  Custom_Data AS custom_data,\n  app_id,\n  platform\nFROM {{ source('raw_max_mediation', 'raw_user_ad_revenue') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/max_mediation/stg_max__user_ad_revenue.sql",
            "original_file_path": "models/staging/max_mediation/stg_max__user_ad_revenue.sql",
            "name": "stg_max__user_ad_revenue",
            "alias": "stg_max__user_ad_revenue",
            "checksum": {
                "name": "sha256",
                "checksum": "511d3ace84a4a860a7afefb87c2264b0493b02a51b4d844622c8d348c44dc8f3"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_user_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/stg_max__user_ad_revenue.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_max_mediation",
                "materialized": "view"
            },
            "created_at": 1705293861.4355223,
            "compiled_code": "SELECT\n  PARSE_TIMESTAMP(\"%F %T\", SUBSTR(Date, 0, 19)) AS timestamp_tzutc,\n  Ad_Unit_ID AS ad_unit_id,\n  Ad_Unit_Name AS ad_unit_name,\n  Waterfall AS waterfall,\n  Ad_Format AS ad_format,\n  Placement AS placement,\n  UPPER(Country) AS country_code,\n  Device_Type AS device_type,\n  IDFA AS idfa,\n  IDFV AS idfv,\n  User_ID AS user_id,\n  Network AS network,\n  CAST(Revenue AS FLOAT64) AS revenue,\n  Ad_placement AS ad_placement,\n  Custom_Data AS custom_data,\n  app_id,\n  platform\nFROM `sipher-data-platform`.`raw_max_mediation`.`raw_user_ad_revenue`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_max_mediation`.`stg_max__user_ad_revenue`"
        },
        "model.dbt_sipher.stg_max__ad_revenue": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_max_mediation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_max_mediation",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "stg_max__ad_revenue"
            ],
            "unique_id": "model.dbt_sipher.stg_max__ad_revenue",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n  PARSE_DATE('%Y-%m-%d', day) AS date_tzutc,\n  UPPER(country) AS country_code,\n  application AS app_name,\n  package_name AS bundle_id,\n  network,\n  network_placement,\n  max_ad_unit,\n  max_ad_unit_id,\n  ad_unit_waterfall_name,\n  device_type,\n  ad_format,\n  CAST(attempts AS INT64) AS attempts,\n  CAST(responses AS INT64) AS responses,\n  CAST(impressions AS INT64) AS impressions,\n  CAST(ecpm AS FLOAT64) AS ecpm,\n  CAST(estimated_revenue AS FLOAT64) AS estimated_revenue,\n  store_id,\n  CASE\n    WHEN SAFE_CAST(store_id AS INT64) IS NOT NULL THEN 'ios'\n    ELSE 'android'\n  END AS platform\nFROM {{ source('raw_max_mediation', 'raw_ad_revenue') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/max_mediation/stg_max__ad_revenue.sql",
            "original_file_path": "models/staging/max_mediation/stg_max__ad_revenue.sql",
            "name": "stg_max__ad_revenue",
            "alias": "stg_max__ad_revenue",
            "checksum": {
                "name": "sha256",
                "checksum": "54004b55bb27a5cbf7ebdce907e92838ff2279c3e80644bbf6245591d17051d5"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/stg_max__ad_revenue.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_max_mediation",
                "materialized": "view"
            },
            "created_at": 1705293861.4393473,
            "compiled_code": "SELECT\n  PARSE_DATE('%Y-%m-%d', day) AS date_tzutc,\n  UPPER(country) AS country_code,\n  application AS app_name,\n  package_name AS bundle_id,\n  network,\n  network_placement,\n  max_ad_unit,\n  max_ad_unit_id,\n  ad_unit_waterfall_name,\n  device_type,\n  ad_format,\n  CAST(attempts AS INT64) AS attempts,\n  CAST(responses AS INT64) AS responses,\n  CAST(impressions AS INT64) AS impressions,\n  CAST(ecpm AS FLOAT64) AS ecpm,\n  CAST(estimated_revenue AS FLOAT64) AS estimated_revenue,\n  store_id,\n  CASE\n    WHEN SAFE_CAST(store_id AS INT64) IS NOT NULL THEN 'ios'\n    ELSE 'android'\n  END AS platform\nFROM `sipher-data-platform`.`raw_max_mediation`.`raw_ad_revenue`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_max_mediation`.`stg_max__ad_revenue`"
        },
        "model.dbt_sipher.stg_aws__ather_id__raw_cognito": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_atherlabs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_atherlabs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "stg_aws__ather_id__raw_cognito"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__ather_id__raw_cognito",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    user_id,\n    Username AS username,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', UserCreateDate) AS user_create_date,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', UserLastModifiedDate) AS user_last_modified_date,\n    Attributes AS attributes,\n    connected_wallets,\n    email,\n    email_verified,\n    identities,\n    CAST(\n        (\n            CASE WHEN Enabled = 'nan' THEN NULL ELSE Enabled END\n        ) AS BOOLEAN\n    ) AS is_enabled,\n    name,\n    sub,\n    UserStatus AS user_status,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_atherid_gcs', 'aws__raw_ather_id_cognito') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__ather_id/stg_aws__ather_id__raw_cognito.sql",
            "original_file_path": "models/staging/aws__ather_id/stg_aws__ather_id__raw_cognito.sql",
            "name": "stg_aws__ather_id__raw_cognito",
            "alias": "stg_aws__ather_id__raw_cognito",
            "checksum": {
                "name": "sha256",
                "checksum": "7c68bf248890e3a0984b1a19d7274366a028e97e2aee348b70bdf72749bb2768"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/stg_aws__ather_id__raw_cognito.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_atherlabs",
                "materialized": "view"
            },
            "created_at": 1705293861.4424436,
            "compiled_code": "SELECT\n    user_id,\n    Username AS username,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', UserCreateDate) AS user_create_date,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E3SZ', UserLastModifiedDate) AS user_last_modified_date,\n    Attributes AS attributes,\n    connected_wallets,\n    email,\n    email_verified,\n    identities,\n    CAST(\n        (\n            CASE WHEN Enabled = 'nan' THEN NULL ELSE Enabled END\n        ) AS BOOLEAN\n    ) AS is_enabled,\n    name,\n    sub,\n    UserStatus AS user_status,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user_cognito`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_cognito`"
        },
        "model.dbt_sipher.stg_aws__ather_id__raw_wallet": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_atherlabs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_atherlabs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "stg_aws__ather_id__raw_wallet"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__ather_id__raw_wallet",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    userId AS user_id,\n    address AS wallet_address,\n    cognitoSub AS cognito_sub,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN createdAt = 'nan' THEN NULL ELSE createdAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS created_at,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN updatedAt = 'nan' THEN NULL ELSE updatedAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_atherid_gcs', 'aws__raw_ather_id_wallet') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__ather_id/stg_aws__ather_id__raw_wallet.sql",
            "original_file_path": "models/staging/aws__ather_id/stg_aws__ather_id__raw_wallet.sql",
            "name": "stg_aws__ather_id__raw_wallet",
            "alias": "stg_aws__ather_id__raw_wallet",
            "checksum": {
                "name": "sha256",
                "checksum": "1118121a1c193b51072b1e865cdeea7aab088a61d03f959417c06b4d03cc9be2"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_wallet"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/stg_aws__ather_id__raw_wallet.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_atherlabs",
                "materialized": "view"
            },
            "created_at": 1705293861.445511,
            "compiled_code": "SELECT\n    userId AS user_id,\n    address AS wallet_address,\n    cognitoSub AS cognito_sub,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN createdAt = 'nan' THEN NULL ELSE createdAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS created_at,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN updatedAt = 'nan' THEN NULL ELSE updatedAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_wallet`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_wallet`"
        },
        "model.dbt_sipher.stg_aws__ather_id__raw_user": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_atherlabs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_atherlabs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "stg_aws__ather_id__raw_user"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__ather_id__raw_user",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id AS user_id,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN createdAt = 'nan' THEN NULL ELSE createdAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS created_at,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN updatedAt = 'nan' THEN NULL ELSE updatedAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS updated_at,\n    avatarImage AS avatar_image,\n    bannerImage AS banner_image,\n    bio,\n    cognitoSub AS cognito_sub,\n    email,\n    CAST(\n        (\n            CASE WHEN isBanned = 'nan' THEN NULL ELSE isBanned END\n        ) AS BOOLEAN\n    ) AS is_banned,\n    CAST(\n        (\n            CASE WHEN isVerified = 'nan' THEN NULL ELSE isVerified END\n        ) AS BOOLEAN\n    ) AS is_verified,\n    name,\n    subscribeEmail AS subscribe_email,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_atherid_gcs', 'aws__raw_ather_id_user') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__ather_id/stg_aws__ather_id__raw_user.sql",
            "original_file_path": "models/staging/aws__ather_id/stg_aws__ather_id__raw_user.sql",
            "name": "stg_aws__ather_id__raw_user",
            "alias": "stg_aws__ather_id__raw_user",
            "checksum": {
                "name": "sha256",
                "checksum": "d1b6ee9201ae726025e72f4fc142253d5479f75ac0ddebaca6f4a2fbb4d4f781"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_user"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/stg_aws__ather_id__raw_user.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_atherlabs",
                "materialized": "view"
            },
            "created_at": 1705293861.4485414,
            "compiled_code": "SELECT\n    id AS user_id,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN createdAt = 'nan' THEN NULL ELSE createdAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS created_at,\n    CAST(\n        TIMESTAMP_MILLIS(\n            CAST(\n                (\n                    CASE WHEN updatedAt = 'nan' THEN NULL ELSE updatedAt END\n                ) AS INT64\n            )\n        ) AS TIMESTAMP\n    ) AS updated_at,\n    avatarImage AS avatar_image,\n    bannerImage AS banner_image,\n    bio,\n    cognitoSub AS cognito_sub,\n    email,\n    CAST(\n        (\n            CASE WHEN isBanned = 'nan' THEN NULL ELSE isBanned END\n        ) AS BOOLEAN\n    ) AS is_banned,\n    CAST(\n        (\n            CASE WHEN isVerified = 'nan' THEN NULL ELSE isVerified END\n        ) AS BOOLEAN\n    ) AS is_verified,\n    name,\n    subscribeEmail AS subscribe_email,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_user`"
        },
        "model.dbt_sipher.stg_aws__loyalty__raw_log_spaceship": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_loyalty",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_loyalty",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "stg_aws__loyalty__raw_log_spaceship"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__loyalty__raw_log_spaceship",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id AS user_id,\n    tokenId AS token_id,\n    LOWER(publicAddress) AS wallet_address,\n    atherId AS ather_id,\n    name,\n    partTokenIds AS part_token_ids,\n    action,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_spaceship') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__loyalty/stg_aws__loyalty__raw_log_spaceship.sql",
            "original_file_path": "models/staging/aws__loyalty/stg_aws__loyalty__raw_log_spaceship.sql",
            "name": "stg_aws__loyalty__raw_log_spaceship",
            "alias": "stg_aws__loyalty__raw_log_spaceship",
            "checksum": {
                "name": "sha256",
                "checksum": "13e320c12511ddf159bf36e7de35576a3a107d7dff3d9ce2acfb61b1d53e8134"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/stg_aws__loyalty__raw_log_spaceship.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_loyalty",
                "materialized": "view"
            },
            "created_at": 1705293861.4517057,
            "compiled_code": "SELECT\n    id AS user_id,\n    tokenId AS token_id,\n    LOWER(publicAddress) AS wallet_address,\n    atherId AS ather_id,\n    name,\n    partTokenIds AS part_token_ids,\n    action,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_spaceship`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_spaceship`"
        },
        "model.dbt_sipher.stg_aws__loyalty__raw_pending_mint": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_loyalty",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_loyalty",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "stg_aws__loyalty__raw_pending_mint"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__loyalty__raw_pending_mint",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id AS user_id,\n    LOWER(a.to) AS wallet_address,\n    batchID AS batch_id,\t\t\t\n    SAFE_CAST(amount AS INT64) AS amount,\t\t\t\n    salt,\t\t\t\n    deadline,\t\t\t\n    status,\t\t\t\n    type,\t\t\t\n    signature,\t\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_loyalty_dashboard_gcs', 'loyalty__raw_pending_mint') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__loyalty/stg_aws__loyalty__raw_pending_mint.sql",
            "original_file_path": "models/staging/aws__loyalty/stg_aws__loyalty__raw_pending_mint.sql",
            "name": "stg_aws__loyalty__raw_pending_mint",
            "alias": "stg_aws__loyalty__raw_pending_mint",
            "checksum": {
                "name": "sha256",
                "checksum": "e206090c00c4bafc01b667751a277820c260a281f510df28d9d9969cc5be1b39"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_pending_mint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/stg_aws__loyalty__raw_pending_mint.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_loyalty",
                "materialized": "view"
            },
            "created_at": 1705293861.4554176,
            "compiled_code": "SELECT\n    id AS user_id,\n    LOWER(a.to) AS wallet_address,\n    batchID AS batch_id,\t\t\t\n    SAFE_CAST(amount AS INT64) AS amount,\t\t\t\n    salt,\t\t\t\n    deadline,\t\t\t\n    status,\t\t\t\n    type,\t\t\t\n    signature,\t\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_pending_mint` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_pending_mint`"
        },
        "model.dbt_sipher.stg_aws__loyalty__raw_log_open_lootbox": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_loyalty",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_loyalty",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "stg_aws__loyalty__raw_log_open_lootbox"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__loyalty__raw_log_open_lootbox",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id AS user_id,\n    LOWER(publicAddress) AS wallet_address,\n    atherId AS ather_id,\n    lootboxId AS lootbox_id,\n    spaceshipPartIds AS spaceship_parts_id,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_open_lootbox') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__loyalty/stg_aws__loyalty__raw_log_open_lootbox.sql",
            "original_file_path": "models/staging/aws__loyalty/stg_aws__loyalty__raw_log_open_lootbox.sql",
            "name": "stg_aws__loyalty__raw_log_open_lootbox",
            "alias": "stg_aws__loyalty__raw_log_open_lootbox",
            "checksum": {
                "name": "sha256",
                "checksum": "ff5344a438d4803ba31c5422bfa7e2ad30ef5d22ad05959cc3a15e815d4efd88"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_open_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/stg_aws__loyalty__raw_log_open_lootbox.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_loyalty",
                "materialized": "view"
            },
            "created_at": 1705293861.4588907,
            "compiled_code": "SELECT\n    id AS user_id,\n    LOWER(publicAddress) AS wallet_address,\n    atherId AS ather_id,\n    lootboxId AS lootbox_id,\n    spaceshipPartIds AS spaceship_parts_id,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_open_lootbox`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_open_lootbox`"
        },
        "model.dbt_sipher.stg_aws__loyalty__raw_log_scrap_spaceship_parts": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_loyalty",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_loyalty",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "stg_aws__loyalty__raw_log_scrap_spaceship_parts"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__loyalty__raw_log_scrap_spaceship_parts",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id AS user_id,\n    LOWER(publicAddress) AS wallet_address,\n    atherId AS ather_id,\n    spaceshipPartTokenIds AS spaceship_part_token_id,\n    caseTypeNumbers AS case_type_numbers,\n    newSpaceshipPartTokenId AS new_spaceship_part_token_id,\n    newSpaceshipPartCaseTypeNumber AS new_spaceship_part_case_type_number,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_scrap_spaceship_parts') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__loyalty/stg_aws__loyalty__raw_log_scrap_spaceship_parts.sql",
            "original_file_path": "models/staging/aws__loyalty/stg_aws__loyalty__raw_log_scrap_spaceship_parts.sql",
            "name": "stg_aws__loyalty__raw_log_scrap_spaceship_parts",
            "alias": "stg_aws__loyalty__raw_log_scrap_spaceship_parts",
            "checksum": {
                "name": "sha256",
                "checksum": "3c657c7cd6ded631e3513a9cccd0c16c27f26a3157a6c4ec0bfc0560be85235d"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_scrap_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/stg_aws__loyalty__raw_log_scrap_spaceship_parts.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_loyalty",
                "materialized": "view"
            },
            "created_at": 1705293861.4620955,
            "compiled_code": "SELECT\n    id AS user_id,\n    LOWER(publicAddress) AS wallet_address,\n    atherId AS ather_id,\n    spaceshipPartTokenIds AS spaceship_part_token_id,\n    caseTypeNumbers AS case_type_numbers,\n    newSpaceshipPartTokenId AS new_spaceship_part_token_id,\n    newSpaceshipPartCaseTypeNumber AS new_spaceship_part_case_type_number,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_scrap_spaceship_parts`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_scrap_spaceship_parts`"
        },
        "model.dbt_sipher.stg_aws__loyalty__raw_log_claim_lootbox": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_loyalty",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_loyalty",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "stg_aws__loyalty__raw_log_claim_lootbox"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__loyalty__raw_log_claim_lootbox",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id AS user_id,\n    publicAddress AS wallet_address,\n    SAFE_CAST(quantity AS INT64) AS quantity,\n    tokenId AS token_id,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    CAST(\n        (\n            CASE WHEN isRandom = 'nan' THEN NULL ELSE isRandom END\n        ) AS BOOLEAN\n    ) AS is_random,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_claim_lootbox') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__loyalty/stg_aws__loyalty__raw_log_claim_lootbox.sql",
            "original_file_path": "models/staging/aws__loyalty/stg_aws__loyalty__raw_log_claim_lootbox.sql",
            "name": "stg_aws__loyalty__raw_log_claim_lootbox",
            "alias": "stg_aws__loyalty__raw_log_claim_lootbox",
            "checksum": {
                "name": "sha256",
                "checksum": "74b595c571eb3221c6d9e806c19915ee17a940cee47b756f8e891dac4dc09f10"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_claim_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/stg_aws__loyalty__raw_log_claim_lootbox.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_loyalty",
                "materialized": "view"
            },
            "created_at": 1705293861.46518,
            "compiled_code": "SELECT\n    id AS user_id,\n    publicAddress AS wallet_address,\n    SAFE_CAST(quantity AS INT64) AS quantity,\n    tokenId AS token_id,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    CAST(\n        (\n            CASE WHEN isRandom = 'nan' THEN NULL ELSE isRandom END\n        ) AS BOOLEAN\n    ) AS is_random,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_claim_lootbox`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_claim_lootbox`"
        },
        "model.dbt_sipher.stg_aws__loyalty__raw_burned": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_loyalty",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_loyalty",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "stg_aws__loyalty__raw_burned"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__loyalty__raw_burned",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id AS user_id,\n    LOWER(a.to) AS wallet_address,\n    batchID AS batch_id,\n    SAFE_CAST(amount AS INT64) AS amount,\n    salt,\n    type,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_loyalty_dashboard_gcs', 'loyalty__raw_burned') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__loyalty/stg_aws__loyalty__raw_burned.sql",
            "original_file_path": "models/staging/aws__loyalty/stg_aws__loyalty__raw_burned.sql",
            "name": "stg_aws__loyalty__raw_burned",
            "alias": "stg_aws__loyalty__raw_burned",
            "checksum": {
                "name": "sha256",
                "checksum": "ad156e3921611049e97e9ed2cc16011989bac38d9b1e7ac6b72c7b058793c226"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_burned"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/stg_aws__loyalty__raw_burned.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_loyalty",
                "materialized": "view"
            },
            "created_at": 1705293861.4683006,
            "compiled_code": "SELECT\n    id AS user_id,\n    LOWER(a.to) AS wallet_address,\n    batchID AS batch_id,\n    SAFE_CAST(amount AS INT64) AS amount,\n    salt,\n    type,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', createdAt) AS created_at,\n    PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', updatedAt) AS updated_at,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_burned` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_burned`"
        },
        "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_sipher_server",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_sipher_server",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_server",
                "stg_sipher_server__raw_inventory_balancing_update"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nWITH pre_process_data AS(\n    SELECT\n        user_id,\t\t\t\t\n        instance_id,\t\t\t\t\n        item_code,\t\t\t\t\n        item_type,\t\t\t\t\n        item_sub_type,\t\t\t\t\n        rarity,\t\t\t\t\n        CAST(NULLIF(tier, '') AS INT64) AS tier,\t\t\t\t\n        CAST(NULLIF(level, '') AS INT64) AS level,\t\t\t\t\n        CAST(NULLIF(ps, '') AS INT64) AS ps,\n        boost,\t\t\t\t\n        CAST(updated_balance AS INT64) AS updated_balance,\n        updated_balance_timestamp,\n        updated_balance_date\n    FROM {{ source('raw_game_meta', 'raw_inventory_balancing_update') }}\n    WHERE updated_balance_date < CURRENT_DATE()\n)\n\nSELECT\n    user_id,\t\t\t\t\n    instance_id,\t\t\t\t\n    item_code,\t\t\t\t\n    item_type,\n    item_sub_type,\t\t\t\t\n    rarity,\n    tier,\n    level,\n    ps,\n    boost,\n    updated_balance,\n    CASE\n        WHEN LENGTH(updated_balance_timestamp) = 13 THEN CAST(updated_balance_timestamp AS INT64)*1000\n        WHEN LENGTH(updated_balance_timestamp) = 16 THEN CAST(updated_balance_timestamp AS INT64)*10 - 62135596800000000\n    END AS updated_balance_timestamp,\n    updated_balance_date\nFROM pre_process_data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_server/stg_sipher_server__raw_inventory_balancing_update.sql",
            "original_file_path": "models/staging/sipher_server/stg_sipher_server__raw_inventory_balancing_update.sql",
            "name": "stg_sipher_server__raw_inventory_balancing_update",
            "alias": "stg_sipher_server__raw_inventory_balancing_update",
            "checksum": {
                "name": "sha256",
                "checksum": "06083ddcf0b5520c4e0ecc2df8f3067be02c34ac0909cefcb1fbb7c848df0441"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_game_meta",
                    "raw_inventory_balancing_update"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_server/stg_sipher_server__raw_inventory_balancing_update.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_sipher_server",
                "materialized": "view"
            },
            "created_at": 1705293861.472156,
            "compiled_code": "WITH pre_process_data AS(\n    SELECT\n        user_id,\t\t\t\t\n        instance_id,\t\t\t\t\n        item_code,\t\t\t\t\n        item_type,\t\t\t\t\n        item_sub_type,\t\t\t\t\n        rarity,\t\t\t\t\n        CAST(NULLIF(tier, '') AS INT64) AS tier,\t\t\t\t\n        CAST(NULLIF(level, '') AS INT64) AS level,\t\t\t\t\n        CAST(NULLIF(ps, '') AS INT64) AS ps,\n        boost,\t\t\t\t\n        CAST(updated_balance AS INT64) AS updated_balance,\n        updated_balance_timestamp,\n        updated_balance_date\n    FROM `sipher-data-platform`.`raw_game_meta`.`raw_inventory_balancing_update`\n    WHERE updated_balance_date < CURRENT_DATE()\n)\n\nSELECT\n    user_id,\t\t\t\t\n    instance_id,\t\t\t\t\n    item_code,\t\t\t\t\n    item_type,\n    item_sub_type,\t\t\t\t\n    rarity,\n    tier,\n    level,\n    ps,\n    boost,\n    updated_balance,\n    CASE\n        WHEN LENGTH(updated_balance_timestamp) = 13 THEN CAST(updated_balance_timestamp AS INT64)*1000\n        WHEN LENGTH(updated_balance_timestamp) = 16 THEN CAST(updated_balance_timestamp AS INT64)*10 - 62135596800000000\n    END AS updated_balance_timestamp,\n    updated_balance_date\nFROM pre_process_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_sipher_server`.`stg_sipher_server__raw_inventory_balancing_update`"
        },
        "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update_today": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_sipher_server",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_sipher_server",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_server",
                "stg_sipher_server__raw_inventory_balancing_update_today"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update_today",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nWITH pre_process_data AS(\n    SELECT\n        user_id,\t\t\t\t\n        instance_id,\t\t\t\t\n        item_code,\t\t\t\t\n        item_type,\t\t\t\t\n        item_sub_type,\t\t\t\t\n        rarity,\t\t\t\t\n        CAST(NULLIF(tier, '') AS INT64) AS tier,\t\t\t\t\n        CAST(NULLIF(level, '') AS INT64) AS level,\t\t\t\t\n        CAST(NULLIF(ps, '') AS INT64) AS ps,\n        boost,\t\t\t\t\n        CAST(updated_balance AS INT64) AS updated_balance,\n        updated_balance_timestamp,\n        updated_balance_date\n    FROM {{ source('raw_game_meta', 'raw_inventory_balancing_update') }}\n    WHERE updated_balance_date = CURRENT_DATE()\n)\n\nSELECT\n    user_id,\t\t\t\t\n    instance_id,\t\t\t\t\n    item_code,\t\t\t\t\n    item_type,\n    item_sub_type,\t\t\t\t\n    rarity,\n    tier,\n    level,\n    ps,\n    boost,\n    updated_balance,\n    CASE\n        WHEN LENGTH(updated_balance_timestamp) = 13 THEN CAST(updated_balance_timestamp AS INT64)*1000\n        WHEN LENGTH(updated_balance_timestamp) = 16 THEN CAST(updated_balance_timestamp AS INT64)*10 - 62135596800000000\n    END AS updated_balance_timestamp,\n    updated_balance_date\nFROM pre_process_data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_server/stg_sipher_server__raw_inventory_balancing_update_today.sql",
            "original_file_path": "models/staging/sipher_server/stg_sipher_server__raw_inventory_balancing_update_today.sql",
            "name": "stg_sipher_server__raw_inventory_balancing_update_today",
            "alias": "stg_sipher_server__raw_inventory_balancing_update_today",
            "checksum": {
                "name": "sha256",
                "checksum": "3e442b9a0745e4fd8e8882234fb097276d87e9e9db3fa49fd56ff3b23ae4557c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_game_meta",
                    "raw_inventory_balancing_update"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_server/stg_sipher_server__raw_inventory_balancing_update_today.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_sipher_server",
                "materialized": "view"
            },
            "created_at": 1705293861.4757898,
            "compiled_code": "WITH pre_process_data AS(\n    SELECT\n        user_id,\t\t\t\t\n        instance_id,\t\t\t\t\n        item_code,\t\t\t\t\n        item_type,\t\t\t\t\n        item_sub_type,\t\t\t\t\n        rarity,\t\t\t\t\n        CAST(NULLIF(tier, '') AS INT64) AS tier,\t\t\t\t\n        CAST(NULLIF(level, '') AS INT64) AS level,\t\t\t\t\n        CAST(NULLIF(ps, '') AS INT64) AS ps,\n        boost,\t\t\t\t\n        CAST(updated_balance AS INT64) AS updated_balance,\n        updated_balance_timestamp,\n        updated_balance_date\n    FROM `sipher-data-platform`.`raw_game_meta`.`raw_inventory_balancing_update`\n    WHERE updated_balance_date = CURRENT_DATE()\n)\n\nSELECT\n    user_id,\t\t\t\t\n    instance_id,\t\t\t\t\n    item_code,\t\t\t\t\n    item_type,\n    item_sub_type,\t\t\t\t\n    rarity,\n    tier,\n    level,\n    ps,\n    boost,\n    updated_balance,\n    CASE\n        WHEN LENGTH(updated_balance_timestamp) = 13 THEN CAST(updated_balance_timestamp AS INT64)*1000\n        WHEN LENGTH(updated_balance_timestamp) = 16 THEN CAST(updated_balance_timestamp AS INT64)*10 - 62135596800000000\n    END AS updated_balance_timestamp,\n    updated_balance_date\nFROM pre_process_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_sipher_server`.`stg_sipher_server__raw_inventory_balancing_update_today`"
        },
        "model.dbt_sipher.stg_opensearch_onchain__raw_inu": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_opensearch_onchain_nft",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_opensearch_onchain_nft",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "stg_opensearch_onchain__raw_inu"
            ],
            "unique_id": "model.dbt_sipher.stg_opensearch_onchain__raw_inu",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    name,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_inu') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/opensearch_onchain/stg_opensearch_onchain__raw_inu.sql",
            "original_file_path": "models/staging/opensearch_onchain/stg_opensearch_onchain__raw_inu.sql",
            "name": "stg_opensearch_onchain__raw_inu",
            "alias": "stg_opensearch_onchain__raw_inu",
            "checksum": {
                "name": "sha256",
                "checksum": "b7aad948f79091a974ce40223ba0ff8aae78c8d41fafb8dc8e8646cb0f3c80da"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_inu"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/stg_opensearch_onchain__raw_inu.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_opensearch_onchain_nft",
                "materialized": "view"
            },
            "created_at": 1705293861.479223,
            "compiled_code": "SELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    name,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_INU` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_inu`"
        },
        "model.dbt_sipher.stg_opensearch_onchain__raw_sculpture": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_opensearch_onchain_nft",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_opensearch_onchain_nft",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "stg_opensearch_onchain__raw_sculpture"
            ],
            "unique_id": "model.dbt_sipher.stg_opensearch_onchain__raw_sculpture",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_sculpture') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/opensearch_onchain/stg_opensearch_onchain__raw_sculpture.sql",
            "original_file_path": "models/staging/opensearch_onchain/stg_opensearch_onchain__raw_sculpture.sql",
            "name": "stg_opensearch_onchain__raw_sculpture",
            "alias": "stg_opensearch_onchain__raw_sculpture",
            "checksum": {
                "name": "sha256",
                "checksum": "ecc9be8361563c5492c61c41d410c99e2e7bf557db9288a9b6b23d0cd4c80d63"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_sculpture"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/stg_opensearch_onchain__raw_sculpture.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_opensearch_onchain_nft",
                "materialized": "view"
            },
            "created_at": 1705293861.4824061,
            "compiled_code": "SELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Sculpture` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_sculpture`"
        },
        "model.dbt_sipher.stg_opensearch_onchain__raw_lootbox": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_opensearch_onchain_nft",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_opensearch_onchain_nft",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "stg_opensearch_onchain__raw_lootbox"
            ],
            "unique_id": "model.dbt_sipher.stg_opensearch_onchain__raw_lootbox",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_lootbox') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/opensearch_onchain/stg_opensearch_onchain__raw_lootbox.sql",
            "original_file_path": "models/staging/opensearch_onchain/stg_opensearch_onchain__raw_lootbox.sql",
            "name": "stg_opensearch_onchain__raw_lootbox",
            "alias": "stg_opensearch_onchain__raw_lootbox",
            "checksum": {
                "name": "sha256",
                "checksum": "acef468f78714493793b928b69532a57b70007340072495feb3c63d4fdda613f"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/stg_opensearch_onchain__raw_lootbox.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_opensearch_onchain_nft",
                "materialized": "view"
            },
            "created_at": 1705293861.4861162,
            "compiled_code": "SELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Lootbox` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_lootbox`"
        },
        "model.dbt_sipher.stg_opensearch_onchain__raw_neko": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_opensearch_onchain_nft",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_opensearch_onchain_nft",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "stg_opensearch_onchain__raw_neko"
            ],
            "unique_id": "model.dbt_sipher.stg_opensearch_onchain__raw_neko",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    name,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_neko') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/opensearch_onchain/stg_opensearch_onchain__raw_neko.sql",
            "original_file_path": "models/staging/opensearch_onchain/stg_opensearch_onchain__raw_neko.sql",
            "name": "stg_opensearch_onchain__raw_neko",
            "alias": "stg_opensearch_onchain__raw_neko",
            "checksum": {
                "name": "sha256",
                "checksum": "799906e068e6ba5cd0cc168fbd12501427769e336b8179e7696bab90e50a6f2e"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_neko"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/stg_opensearch_onchain__raw_neko.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_opensearch_onchain_nft",
                "materialized": "view"
            },
            "created_at": 1705293861.4891741,
            "compiled_code": "SELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    name,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_NEKO` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_neko`"
        },
        "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_opensearch_onchain_nft",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_opensearch_onchain_nft",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "stg_opensearch_onchain__raw_spaceship"
            ],
            "unique_id": "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/opensearch_onchain/stg_opensearch_onchain__raw_spaceship.sql",
            "original_file_path": "models/staging/opensearch_onchain/stg_opensearch_onchain__raw_spaceship.sql",
            "name": "stg_opensearch_onchain__raw_spaceship",
            "alias": "stg_opensearch_onchain__raw_spaceship",
            "checksum": {
                "name": "sha256",
                "checksum": "60d67f1ba3e04a71191be5421a74ad5733ae4bb7e2132058402b06f2e13737ca"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/stg_opensearch_onchain__raw_spaceship.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_opensearch_onchain_nft",
                "materialized": "view"
            },
            "created_at": 1705293861.4921634,
            "compiled_code": "SELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Spaceship` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_spaceship`"
        },
        "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship_parts": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_opensearch_onchain_nft",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_opensearch_onchain_nft",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "stg_opensearch_onchain__raw_spaceship_parts"
            ],
            "unique_id": "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship_parts",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship_parts') }} AS a",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/opensearch_onchain/stg_opensearch_onchain__raw_spaceship_parts.sql",
            "original_file_path": "models/staging/opensearch_onchain/stg_opensearch_onchain__raw_spaceship_parts.sql",
            "name": "stg_opensearch_onchain__raw_spaceship_parts",
            "alias": "stg_opensearch_onchain__raw_spaceship_parts",
            "checksum": {
                "name": "sha256",
                "checksum": "5923008c4ef88e14d71224e66f5ef8ebd6ab8e6ea4923c573aff88104a4626d4"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/stg_opensearch_onchain__raw_spaceship_parts.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_opensearch_onchain_nft",
                "materialized": "view"
            },
            "created_at": 1705293861.4951923,
            "compiled_code": "SELECT\n    LOWER(owner) AS wallet_address,\n    tokenID AS token_id,\n    chainId AS chain_id,\n    id,\n    type,\n    collectionId AS collection_id,\n    CAST(value AS INT64) AS value,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_SpaceshipParts` AS a",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_spaceship_parts`"
        },
        "model.dbt_sipher.stg_facebook_post_comments": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_post_comments"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_facebook_post_comments"
            ],
            "unique_id": "model.dbt_sipher.stg_facebook_post_comments",
            "raw_code": "{{- config(\n    materialized='view',\n)-}}\n\nWITH final AS (\nSELECT\n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", created_time) AS created_time\n  , post_id\n  , id AS message_id\n  , message\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'facebook_sipher_post_comments') }}\nORDER BY 1\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_facebook_post_comments.sql",
            "original_file_path": "models/staging/social/stg_facebook_post_comments.sql",
            "name": "stg_facebook_post_comments",
            "alias": "stg_facebook_post_comments",
            "checksum": {
                "name": "sha256",
                "checksum": "02b4f4376e7d0b43da3d3c2f309f471dfdf1c75d38ce75ac9934fa025cce4487"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_post_comments"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_facebook_post_comments.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.498185,
            "compiled_code": "WITH final AS (\nSELECT\n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", created_time) AS created_time\n  , post_id\n  , id AS message_id\n  , message\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`facebook_sipher_post_comments`\nORDER BY 1\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_facebook_post_comments`"
        },
        "model.dbt_sipher.stg_youtube_contents": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.youtube_contents"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_youtube_contents"
            ],
            "unique_id": "model.dbt_sipher.stg_youtube_contents",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nSELECT\n  videoId         AS video_id\n  , snippet_title AS video_title\n  , PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', snippet_publishedAt) AS published_at\n  , CASE\n      WHEN day IS NULL AND views_x IS NOT NULL THEN DATE_SUB(snapshot_date, INTERVAL 3 DAY)\n      ELSE PARSE_DATE('%Y-%m-%d', day)\n  END AS latest_date_data\n  , position \n  , ( SELECT PARSE_TIME('%H:%M:%S', STRING_AGG(IFNULL(LPAD(val, 2, '0'), '00'), ':' ORDER BY OFFSET))\n    FROM UNNEST([\n      REGEXP_EXTRACT(contentDetails_duration, r'(\\d+)H'), \n      REGEXP_EXTRACT(contentDetails_duration, r'(\\d+)M'), \n      REGEXP_EXTRACT(contentDetails_duration, r'(\\d+)S')\n    ]) VAL WITH OFFSET) AS content_details_duration\n  , creatorContentType  AS creator_content_type\n  , kind\n  , snippet_channelId     AS channel_id\n  , snippet_channelTitle  AS channel_title\n  , snippet_description   AS video_description\n  , snippet_categoryId    AS category_id\n  , CAST(views_x  AS INT64)  AS total_views\n  , CAST(views_y  AS INT64)  AS views\n  , CAST(redViews AS INT64)  AS red_views\n  , CAST(likes    AS INT64)  AS likes\n  , CAST(dislikes AS INT64)  AS dislikes\n  , CAST(shares   AS INT64)  AS shares\n  , CAST(comments AS INT64)  AS comments\n  , CAST(subscribersGained AS INT64)  AS subscribers_gained\n  , CAST(subscribersLost   AS INT64)  AS subscribers_lost\n  , CAST(videosAddedToPlaylists       AS INT64)     AS videos_added_to_playlists\n  , CAST(videosRemovedFromPlaylists   AS INT64)     AS videos_removed_from_playlists\n  , estimatedMinutesWatched           AS estimated_minutes_watched\n  , estimatedRedMinutesWatched        AS estimated_red_minutes_watched\n  , averageViewDuration               AS average_view_duration\n  , averageViewPercentage             AS average_view_percentage\n  , annotationImpressions             AS annotation_impressions\n  , annotationClickableImpressions    AS annotation_clickable_impressions\n  , annotationClicks                  AS annotation_clicks\n  , annotationClickThroughRate        AS annotation_click_through_rate\n  , annotationClosableImpressions     AS annotation_closable_impressions\n  , annotationCloses                  AS annotation_closes\n  , annotationCloseRate               AS annotation_close_rate\n  , cardImpressions                   AS card_impressions\n  , cardClicks                        AS card_clicks\n  , cardClickRate                     AS card_click_rate\n  , cardTeaserImpressions             AS card_teaser_impressions\n  , cardTeaserClicks                  AS card_teaser_clicks\n  , cardTeaserClickRate               AS card_teaser_click_rate\n  , snippet_liveBroadcastContent      AS live_broadcast_content\n  , snippet_localized_title           AS localized_title\n  , snippet_localized_description     AS localized_description\n  , contentDetails_dimension          AS content_details_dimension\n  , contentDetails_definition         AS content_details_definition\n  , contentDetails_caption            AS content_details_caption\n  , contentDetails_licensedContent    AS content_details_licensed_content\n  , contentDetails_projection         AS content_details_projection\n  , contentDetails_hasCustomThumbnail AS content_details_has_custom_thumbnail\n  , status_uploadStatus               AS status_upload_status\n  , status_privacyStatus              AS status_privacy_status\n  , status_license\n  , status_embeddable\n  , status_publicStatsViewable        AS status_public_stats_viewable\n  , status_madeForKids                AS status_made_for_kids\n  , status_selfDeclaredMadeForKids    AS status_self_declared_made_for_kids\n  , __collected_ts\n  , snapshot_date\n\nFROM \n  {{ source('raw_social', 'youtube_contents') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_youtube_contents.sql",
            "original_file_path": "models/staging/social/stg_youtube_contents.sql",
            "name": "stg_youtube_contents",
            "alias": "stg_youtube_contents",
            "checksum": {
                "name": "sha256",
                "checksum": "a13b5dd9f194ff799cdfbba94a9a8e32fa83ec030bed978c17289078ff764b29"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "youtube_contents"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_youtube_contents.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5020218,
            "compiled_code": "SELECT\n  videoId         AS video_id\n  , snippet_title AS video_title\n  , PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*S%Ez', snippet_publishedAt) AS published_at\n  , CASE\n      WHEN day IS NULL AND views_x IS NOT NULL THEN DATE_SUB(snapshot_date, INTERVAL 3 DAY)\n      ELSE PARSE_DATE('%Y-%m-%d', day)\n  END AS latest_date_data\n  , position \n  , ( SELECT PARSE_TIME('%H:%M:%S', STRING_AGG(IFNULL(LPAD(val, 2, '0'), '00'), ':' ORDER BY OFFSET))\n    FROM UNNEST([\n      REGEXP_EXTRACT(contentDetails_duration, r'(\\d+)H'), \n      REGEXP_EXTRACT(contentDetails_duration, r'(\\d+)M'), \n      REGEXP_EXTRACT(contentDetails_duration, r'(\\d+)S')\n    ]) VAL WITH OFFSET) AS content_details_duration\n  , creatorContentType  AS creator_content_type\n  , kind\n  , snippet_channelId     AS channel_id\n  , snippet_channelTitle  AS channel_title\n  , snippet_description   AS video_description\n  , snippet_categoryId    AS category_id\n  , CAST(views_x  AS INT64)  AS total_views\n  , CAST(views_y  AS INT64)  AS views\n  , CAST(redViews AS INT64)  AS red_views\n  , CAST(likes    AS INT64)  AS likes\n  , CAST(dislikes AS INT64)  AS dislikes\n  , CAST(shares   AS INT64)  AS shares\n  , CAST(comments AS INT64)  AS comments\n  , CAST(subscribersGained AS INT64)  AS subscribers_gained\n  , CAST(subscribersLost   AS INT64)  AS subscribers_lost\n  , CAST(videosAddedToPlaylists       AS INT64)     AS videos_added_to_playlists\n  , CAST(videosRemovedFromPlaylists   AS INT64)     AS videos_removed_from_playlists\n  , estimatedMinutesWatched           AS estimated_minutes_watched\n  , estimatedRedMinutesWatched        AS estimated_red_minutes_watched\n  , averageViewDuration               AS average_view_duration\n  , averageViewPercentage             AS average_view_percentage\n  , annotationImpressions             AS annotation_impressions\n  , annotationClickableImpressions    AS annotation_clickable_impressions\n  , annotationClicks                  AS annotation_clicks\n  , annotationClickThroughRate        AS annotation_click_through_rate\n  , annotationClosableImpressions     AS annotation_closable_impressions\n  , annotationCloses                  AS annotation_closes\n  , annotationCloseRate               AS annotation_close_rate\n  , cardImpressions                   AS card_impressions\n  , cardClicks                        AS card_clicks\n  , cardClickRate                     AS card_click_rate\n  , cardTeaserImpressions             AS card_teaser_impressions\n  , cardTeaserClicks                  AS card_teaser_clicks\n  , cardTeaserClickRate               AS card_teaser_click_rate\n  , snippet_liveBroadcastContent      AS live_broadcast_content\n  , snippet_localized_title           AS localized_title\n  , snippet_localized_description     AS localized_description\n  , contentDetails_dimension          AS content_details_dimension\n  , contentDetails_definition         AS content_details_definition\n  , contentDetails_caption            AS content_details_caption\n  , contentDetails_licensedContent    AS content_details_licensed_content\n  , contentDetails_projection         AS content_details_projection\n  , contentDetails_hasCustomThumbnail AS content_details_has_custom_thumbnail\n  , status_uploadStatus               AS status_upload_status\n  , status_privacyStatus              AS status_privacy_status\n  , status_license\n  , status_embeddable\n  , status_publicStatsViewable        AS status_public_stats_viewable\n  , status_madeForKids                AS status_made_for_kids\n  , status_selfDeclaredMadeForKids    AS status_self_declared_made_for_kids\n  , __collected_ts\n  , snapshot_date\n\nFROM \n  `sipher-data-platform`.`raw_social`.`youtube_contents`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_youtube_contents`"
        },
        "model.dbt_sipher.stg_youtube_geographic_areas": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.youtube_geographic_areas"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_youtube_geographic_areas"
            ],
            "unique_id": "model.dbt_sipher.stg_youtube_geographic_areas",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nSELECT\n    channel\n    , channel_id\n    , country\n    , views\n    , redViews\n    , likes\n    , dislikes\n    , shares\n    , comments\n    , subscribersGained                 AS subscribers_gained\n    , subscribersLost                   AS subscribers_lost\n    , videosAddedToPlaylists            AS videos_added_to_playlists\n    , videosRemovedFromPlaylists        AS videos_removed_from_playlists\n    , estimatedMinutesWatched           AS estimated_minutes_watched\n    , estimatedRedMinutesWatched        AS estimated_red_minutes_watched\n    , averageViewDuration               AS average_view_duration\n    , averageViewPercentage             AS average_view_percentage\n    , annotationImpressions             AS annotation_impressions\n    , annotationClickableImpressions    AS annotation_clickable_impressions\n    , annotationClicks                  AS annotation_clicks\n    , annotationClickThroughRate        AS annotation_click_through_rate\n    , annotationClosableImpressions     AS annotation_closable_impressions\n    , annotationCloses                  AS annotation_closes\n    , annotationCloseRate               AS annotation_close_rate\n    , cardImpressions                   AS card_impressions\n    , cardClicks                        AS card_clicks\n    , cardClickRate                     AS card_click_rate\n    , cardTeaserImpressions             AS card_teaser_impressions\n    , cardTeaserClicks                  AS card_teaser_clicks\n    , cardTeaserClickRate               AS card_teaser_click_rate\n    , __collected_ts\n    , snapshot_date\nFROM \n  {{ source('raw_social', 'youtube_geographic_areas') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_youtube_geographic_areas.sql",
            "original_file_path": "models/staging/social/stg_youtube_geographic_areas.sql",
            "name": "stg_youtube_geographic_areas",
            "alias": "stg_youtube_geographic_areas",
            "checksum": {
                "name": "sha256",
                "checksum": "d68c260ba4d603245f326984eb9bb6e3904384c552157016e865f06c017a8fb0"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "youtube_geographic_areas"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_youtube_geographic_areas.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5060446,
            "compiled_code": "SELECT\n    channel\n    , channel_id\n    , country\n    , views\n    , redViews\n    , likes\n    , dislikes\n    , shares\n    , comments\n    , subscribersGained                 AS subscribers_gained\n    , subscribersLost                   AS subscribers_lost\n    , videosAddedToPlaylists            AS videos_added_to_playlists\n    , videosRemovedFromPlaylists        AS videos_removed_from_playlists\n    , estimatedMinutesWatched           AS estimated_minutes_watched\n    , estimatedRedMinutesWatched        AS estimated_red_minutes_watched\n    , averageViewDuration               AS average_view_duration\n    , averageViewPercentage             AS average_view_percentage\n    , annotationImpressions             AS annotation_impressions\n    , annotationClickableImpressions    AS annotation_clickable_impressions\n    , annotationClicks                  AS annotation_clicks\n    , annotationClickThroughRate        AS annotation_click_through_rate\n    , annotationClosableImpressions     AS annotation_closable_impressions\n    , annotationCloses                  AS annotation_closes\n    , annotationCloseRate               AS annotation_close_rate\n    , cardImpressions                   AS card_impressions\n    , cardClicks                        AS card_clicks\n    , cardClickRate                     AS card_click_rate\n    , cardTeaserImpressions             AS card_teaser_impressions\n    , cardTeaserClicks                  AS card_teaser_clicks\n    , cardTeaserClickRate               AS card_teaser_click_rate\n    , __collected_ts\n    , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`youtube_geographic_areas`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_youtube_geographic_areas`"
        },
        "model.dbt_sipher.stg_facebook_page_feed": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_facebook_page_feed"
            ],
            "unique_id": "model.dbt_sipher.stg_facebook_page_feed",
            "raw_code": "{{- config(\n    materialized='view',\n)-}}\n\nWITH data AS (\nSELECT \n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", created_time) AS created_time\n  , page_id\n  , id AS post_id\n  , message\n  , permalink_url\n  , `from`.id    AS author_id\n  , `from`.name  AS author_name\n  , full_picture AS full_picture_url\n  , instagram_eligibility\n  , is_eligible_for_promotion\n  , is_expired\n  , is_hidden\n  , is_instagram_eligible\n  , is_popular\n  , is_published\n  , is_spherical\n  , shares.count AS shares\n  , privacy.allow       AS privacy_allow\n  , privacy.deny        AS privacy_deny\n  , privacy.description AS privacy_description\n  , privacy.friends     AS privacy_friends\n  , privacy.value       AS privacy_value\n  , status_type\n  , subscribed\n  , promotable_id\n  , PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", updated_time) AS updated_time\n  , (SELECT vbe_list.item             FROM UNNEST(video_buying_eligibility.list) AS vbe_list)        AS video_buying_eligibility\n  , (SELECT properties_list.item.name FROM UNNEST(properties.list)               AS properties_list) AS properties_name\n  , (SELECT properties_list.item.text FROM UNNEST(properties.list)               AS properties_list) AS properties_value\n\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'facebook_sipher_page_feed') }}\nORDER BY 1\n)\n\nSELECT * FROM data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_facebook_page_feed.sql",
            "original_file_path": "models/staging/social/stg_facebook_page_feed.sql",
            "name": "stg_facebook_page_feed",
            "alias": "stg_facebook_page_feed",
            "checksum": {
                "name": "sha256",
                "checksum": "9fd91239cda17ee18a1d6ce2f24631226067c0c0d892992fce07708d8f075414"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_page_feed"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_facebook_page_feed.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5095785,
            "compiled_code": "WITH data AS (\nSELECT \n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", created_time) AS created_time\n  , page_id\n  , id AS post_id\n  , message\n  , permalink_url\n  , `from`.id    AS author_id\n  , `from`.name  AS author_name\n  , full_picture AS full_picture_url\n  , instagram_eligibility\n  , is_eligible_for_promotion\n  , is_expired\n  , is_hidden\n  , is_instagram_eligible\n  , is_popular\n  , is_published\n  , is_spherical\n  , shares.count AS shares\n  , privacy.allow       AS privacy_allow\n  , privacy.deny        AS privacy_deny\n  , privacy.description AS privacy_description\n  , privacy.friends     AS privacy_friends\n  , privacy.value       AS privacy_value\n  , status_type\n  , subscribed\n  , promotable_id\n  , PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", updated_time) AS updated_time\n  , (SELECT vbe_list.item             FROM UNNEST(video_buying_eligibility.list) AS vbe_list)        AS video_buying_eligibility\n  , (SELECT properties_list.item.name FROM UNNEST(properties.list)               AS properties_list) AS properties_name\n  , (SELECT properties_list.item.text FROM UNNEST(properties.list)               AS properties_list) AS properties_value\n\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`facebook_sipher_page_feed`\nORDER BY 1\n)\n\nSELECT * FROM data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_facebook_page_feed`"
        },
        "model.dbt_sipher.stg_youtube_demographics": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.youtube_demographics"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_youtube_demographics"
            ],
            "unique_id": "model.dbt_sipher.stg_youtube_demographics",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nSELECT\n    channel\n    , ageGroup AS age_group\n    , gender\n    , viewerPercentage AS viewer_percentage\n    , __collected_ts\n    , channel_id\n    , snapshot_date\nFROM \n  {{ source('raw_social', 'youtube_demographics') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_youtube_demographics.sql",
            "original_file_path": "models/staging/social/stg_youtube_demographics.sql",
            "name": "stg_youtube_demographics",
            "alias": "stg_youtube_demographics",
            "checksum": {
                "name": "sha256",
                "checksum": "1143823f1a66ddd653f48e088c3a8191988b3f378913df0d5aa2118de14c9104"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "youtube_demographics"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_youtube_demographics.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5130525,
            "compiled_code": "SELECT\n    channel\n    , ageGroup AS age_group\n    , gender\n    , viewerPercentage AS viewer_percentage\n    , __collected_ts\n    , channel_id\n    , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`youtube_demographics`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_youtube_demographics`"
        },
        "model.dbt_sipher.stg_tiktok_user_info": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.tiktok_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_tiktok_user_info"
            ],
            "unique_id": "model.dbt_sipher.stg_tiktok_user_info",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  id,\n  unique_id AS user_name,\n  nickname,\n  region AS country_code\nFROM {{ source('raw_social', 'tiktok_user_info') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_tiktok_user_info.sql",
            "original_file_path": "models/staging/social/stg_tiktok_user_info.sql",
            "name": "stg_tiktok_user_info",
            "alias": "stg_tiktok_user_info",
            "checksum": {
                "name": "sha256",
                "checksum": "b91af5eee4ffdb83c04a62eadd79624d564a95d6beaaa22e704d0354f2504d22"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "tiktok_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_tiktok_user_info.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.516114,
            "compiled_code": "SELECT\n  id,\n  unique_id AS user_name,\n  nickname,\n  region AS country_code\nFROM `sipher-data-platform`.`raw_social`.`tiktok_user_info`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_tiktok_user_info`"
        },
        "model.dbt_sipher.stg_facebook_page_impression_gender_locate": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_page_impression_gender_locate"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_facebook_page_impression_gender_locate"
            ],
            "unique_id": "model.dbt_sipher.stg_facebook_page_impression_gender_locate",
            "raw_code": "{{- config(\n    materialized='view',\n)-}}\n\nWITH final AS (\nSELECT\n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", end_time) AS end_time\n  , page_id\n  , name  AS metric_name\n  , title AS metric_title\n  , period\n  , description\n  , metric\n  , reach AS value\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'facebook_sipher_page_impression_gender_locate') }}\nORDER BY 1\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_facebook_page_impression_gender_locate.sql",
            "original_file_path": "models/staging/social/stg_facebook_page_impression_gender_locate.sql",
            "name": "stg_facebook_page_impression_gender_locate",
            "alias": "stg_facebook_page_impression_gender_locate",
            "checksum": {
                "name": "sha256",
                "checksum": "171ccd3e4b0e8831efc56716ace42c133239399d14e6d348bd060b4b74b28d86"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_page_impression_gender_locate"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_facebook_page_impression_gender_locate.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.519986,
            "compiled_code": "WITH final AS (\nSELECT\n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", end_time) AS end_time\n  , page_id\n  , name  AS metric_name\n  , title AS metric_title\n  , period\n  , description\n  , metric\n  , reach AS value\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`facebook_sipher_page_impression_gender_locate`\nORDER BY 1\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_facebook_page_impression_gender_locate`"
        },
        "model.dbt_sipher.stg_youtube_traffic_sources": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.youtube_traffic_sources"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_youtube_traffic_sources"
            ],
            "unique_id": "model.dbt_sipher.stg_youtube_traffic_sources",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nSELECT\n  PARSE_DATE('%Y-%m-%d', day) AS date_tzutc\n  , channel_id\n  , CASE\n    WHEN channel_id = \"UCs8t-T2D2C2HIXt3VIKHz0A\" THEN 'playSIPHER'\n    ELSE channel_id\n  END AS channel_name\n  , insightTrafficSourceType  AS insight_traffic_source_type\n  , views\n  , estimatedMinutesWatched   AS estimated_minutes_watched\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'youtube_traffic_sources') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_youtube_traffic_sources.sql",
            "original_file_path": "models/staging/social/stg_youtube_traffic_sources.sql",
            "name": "stg_youtube_traffic_sources",
            "alias": "stg_youtube_traffic_sources",
            "checksum": {
                "name": "sha256",
                "checksum": "c817b1305f106439aea4658c641adbe7741d0486f2e5b071170f298f8104ce7f"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "youtube_traffic_sources"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_youtube_traffic_sources.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5231388,
            "compiled_code": "SELECT\n  PARSE_DATE('%Y-%m-%d', day) AS date_tzutc\n  , channel_id\n  , CASE\n    WHEN channel_id = \"UCs8t-T2D2C2HIXt3VIKHz0A\" THEN 'playSIPHER'\n    ELSE channel_id\n  END AS channel_name\n  , insightTrafficSourceType  AS insight_traffic_source_type\n  , views\n  , estimatedMinutesWatched   AS estimated_minutes_watched\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`youtube_traffic_sources`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_youtube_traffic_sources`"
        },
        "model.dbt_sipher.stg_youtube_overview": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.youtube_overview"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_youtube_overview"
            ],
            "unique_id": "model.dbt_sipher.stg_youtube_overview",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nSELECT\n  PARSE_DATE('%Y-%m-%d', day) AS date_tzutc\n  , channel_id\n  , CASE\n    WHEN channel_id = \"UCs8t-T2D2C2HIXt3VIKHz0A\" THEN 'playSIPHER'\n    ELSE channel_id\n  END AS channel_name\n  , description\n  , custom_url\n  , CAST(published_at     AS TIMESTAMP) AS published_at\n  , CAST(view_count       AS INT64)     AS view_count\n  , CAST(subscriber_count AS INT64)     AS subscriber_count\n  , hidden_subscriber_count\n  , CAST(video_count      AS INT64)     AS video_count\n  , privacy_status\n  , long_uploads_status\n  , made_for_kids\n  , self_declared_made_for_kids\n  , views\n  , likes\n  , dislikes\n  , shares\n  , estimatedMinutesWatched                 AS est_minutes_watched\n  , CAST(averageViewDuration   AS FLOAT64)  AS avg_view_duration\n  , CAST(averageViewPercentage AS FLOAT64)  AS avg_view_percentage\n  , subscribersGained                       AS subscribers_gained\n  , subscribersLost                         AS subscribers_lost\n  , annotationClickThroughRate              AS annotation_click_through_rate\n  , annotationCloseRate                     AS annotation_close_rate\n  , annotationImpressions                   AS annotation_impressions\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'youtube_overview') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_youtube_overview.sql",
            "original_file_path": "models/staging/social/stg_youtube_overview.sql",
            "name": "stg_youtube_overview",
            "alias": "stg_youtube_overview",
            "checksum": {
                "name": "sha256",
                "checksum": "e7fafe0e52093eb6df58b3db1ce0f87d6955138677fa1de727708f6b14ec126e"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "youtube_overview"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_youtube_overview.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.526208,
            "compiled_code": "SELECT\n  PARSE_DATE('%Y-%m-%d', day) AS date_tzutc\n  , channel_id\n  , CASE\n    WHEN channel_id = \"UCs8t-T2D2C2HIXt3VIKHz0A\" THEN 'playSIPHER'\n    ELSE channel_id\n  END AS channel_name\n  , description\n  , custom_url\n  , CAST(published_at     AS TIMESTAMP) AS published_at\n  , CAST(view_count       AS INT64)     AS view_count\n  , CAST(subscriber_count AS INT64)     AS subscriber_count\n  , hidden_subscriber_count\n  , CAST(video_count      AS INT64)     AS video_count\n  , privacy_status\n  , long_uploads_status\n  , made_for_kids\n  , self_declared_made_for_kids\n  , views\n  , likes\n  , dislikes\n  , shares\n  , estimatedMinutesWatched                 AS est_minutes_watched\n  , CAST(averageViewDuration   AS FLOAT64)  AS avg_view_duration\n  , CAST(averageViewPercentage AS FLOAT64)  AS avg_view_percentage\n  , subscribersGained                       AS subscribers_gained\n  , subscribersLost                         AS subscribers_lost\n  , annotationClickThroughRate              AS annotation_click_through_rate\n  , annotationCloseRate                     AS annotation_close_rate\n  , annotationImpressions                   AS annotation_impressions\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`youtube_overview`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_youtube_overview`"
        },
        "model.dbt_sipher.stg_discord_profile_stats_snapshot": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.discord_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_discord_profile_stats_snapshot"
            ],
            "unique_id": "model.dbt_sipher.stg_discord_profile_stats_snapshot",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  id,\n  owner_id,\n  name,\n  description,\n  owner,\n  member_count,\n  created_at AS profile_created_at,\n  PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) AS snapshot_date_tzict\nFROM {{ source('raw_social', 'discord_profile_stats') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_discord_profile_stats_snapshot.sql",
            "original_file_path": "models/staging/social/stg_discord_profile_stats_snapshot.sql",
            "name": "stg_discord_profile_stats_snapshot",
            "alias": "stg_discord_profile_stats_snapshot",
            "checksum": {
                "name": "sha256",
                "checksum": "107aff8cb62b8834a49b91a66ffd75fee0e6fbdc10ae058e6ceeafa533a88420"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "discord_profile_stats"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_discord_profile_stats_snapshot.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5292025,
            "compiled_code": "SELECT\n  id,\n  owner_id,\n  name,\n  description,\n  owner,\n  member_count,\n  created_at AS profile_created_at,\n  PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) AS snapshot_date_tzict\nFROM `sipher-data-platform`.`raw_social`.`discord_profile_stats__*`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_discord_profile_stats_snapshot`"
        },
        "model.dbt_sipher.stg_twitter_profile_stats": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_twitter_profile_stats"
            ],
            "unique_id": "model.dbt_sipher.stg_twitter_profile_stats",
            "raw_code": "{{- config(\n  materialized='view',\n) -}}\n\n\nSELECT\n  id,\n  username,\n  name,\n  created_at AS profile_created_at,\n  description,\n  protected AS is_protected,\n  verified AS is_verified,\n  location AS user_defined_location,\n  url AS user_defined_url,\n  pinned_tweet_id,\n  profile_image_url,\n  entities.url.urls,\n  public_metrics.followers_count AS followers_cnt,\n  public_metrics.following_count AS following_cnt,\n  public_metrics.listed_count AS listed_cnt,\n  public_metrics.tweet_count AS tweet_cnt,\n  __collected_ts,\n  snapshot_date\nFROM {{ source('raw_social', 'twitter_profile_stats') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_twitter_profile_stats.sql",
            "original_file_path": "models/staging/social/stg_twitter_profile_stats.sql",
            "name": "stg_twitter_profile_stats",
            "alias": "stg_twitter_profile_stats",
            "checksum": {
                "name": "sha256",
                "checksum": "26ec0586e78a556671ea4c323197d4fe60c15c03e77b86e69e1d7177b8c323a6"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_profile_stats"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_twitter_profile_stats.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5328746,
            "compiled_code": "SELECT\n  id,\n  username,\n  name,\n  created_at AS profile_created_at,\n  description,\n  protected AS is_protected,\n  verified AS is_verified,\n  location AS user_defined_location,\n  url AS user_defined_url,\n  pinned_tweet_id,\n  profile_image_url,\n  entities.url.urls,\n  public_metrics.followers_count AS followers_cnt,\n  public_metrics.following_count AS following_cnt,\n  public_metrics.listed_count AS listed_cnt,\n  public_metrics.tweet_count AS tweet_cnt,\n  __collected_ts,\n  snapshot_date\nFROM `sipher-data-platform`.`raw_social`.`twitter_profile_stats__SIPHERxyz__`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_twitter_profile_stats`"
        },
        "model.dbt_sipher.stg_twitter_user_info_latest_snapshot": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_latest_table_suffix"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_user_info",
                    "source.dbt_sipher.raw_social.twitter_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_twitter_user_info_latest_snapshot"
            ],
            "unique_id": "model.dbt_sipher.stg_twitter_user_info_latest_snapshot",
            "raw_code": "{{- config(\n  materialized='view',\n) -}}\n\n{%- set latest_table_suffix = get_latest_table_suffix(\n    table=source('raw_social', 'twitter_user_info')\n) -%}\n\nSELECT\n  id,\n  username,\n  name,\n  created_at AS user_created_at,\n  description,\n  verified AS is_verified,\n  location AS user_defined_location,\n  profile_image_url,\n  url,\n  entities.description.cashtags,\n  entities.description.hashtags,\n  entities.description.mentions,\n  entities.description.urls AS entities_urls,\n  entities.url.urls,\n  protected AS is_protected,\n  pinned_tweet_id,\n\n  public_metrics.followers_count AS followers_cnt,\n  public_metrics.following_count AS following_cnt,\n  public_metrics.listed_count AS listed_cnt,\n  public_metrics.tweet_count AS tweet_cnt\nFROM {{ source('raw_social', 'twitter_user_info') }}\nWHERE _TABLE_SUFFIX = \"{{ latest_table_suffix }}\"",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_twitter_user_info_latest_snapshot.sql",
            "original_file_path": "models/staging/social/stg_twitter_user_info_latest_snapshot.sql",
            "name": "stg_twitter_user_info_latest_snapshot",
            "alias": "stg_twitter_user_info_latest_snapshot",
            "checksum": {
                "name": "sha256",
                "checksum": "fd6951999a522dadba644db27ac52c8d038547071b7819749dbe68060f36c125"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_user_info"
                ],
                [
                    "raw_social",
                    "twitter_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_twitter_user_info_latest_snapshot.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.535906,
            "compiled_code": "SELECT\n  id,\n  username,\n  name,\n  created_at AS user_created_at,\n  description,\n  verified AS is_verified,\n  location AS user_defined_location,\n  profile_image_url,\n  url,\n  entities.description.cashtags,\n  entities.description.hashtags,\n  entities.description.mentions,\n  entities.description.urls AS entities_urls,\n  entities.url.urls,\n  protected AS is_protected,\n  pinned_tweet_id,\n\n  public_metrics.followers_count AS followers_cnt,\n  public_metrics.following_count AS following_cnt,\n  public_metrics.listed_count AS listed_cnt,\n  public_metrics.tweet_count AS tweet_cnt\nFROM `sipher-data-platform`.`raw_social`.`twitter_user_info__SIPHERxyz__*`\nWHERE _TABLE_SUFFIX = \"20230411\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_twitter_user_info_latest_snapshot`"
        },
        "model.dbt_sipher.stg_facebook_page_overall": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_page_overall"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_facebook_page_overall"
            ],
            "unique_id": "model.dbt_sipher.stg_facebook_page_overall",
            "raw_code": "{{- config(\n    materialized='view',\n)-}}\n\nWITH final AS (\nSELECT\n  page_id\n  , name AS page_name\n  , username\n  , category\n  , followers_count\n  , is_community_page\n  , link\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'facebook_sipher_page_overall') }}\nORDER BY snapshot_date\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_facebook_page_overall.sql",
            "original_file_path": "models/staging/social/stg_facebook_page_overall.sql",
            "name": "stg_facebook_page_overall",
            "alias": "stg_facebook_page_overall",
            "checksum": {
                "name": "sha256",
                "checksum": "6ee9f4ee9b5a98c05b72c627efdb3cc8c2472232974461647c4a673da37b6b01"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_page_overall"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_facebook_page_overall.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5395818,
            "compiled_code": "WITH final AS (\nSELECT\n  page_id\n  , name AS page_name\n  , username\n  , category\n  , followers_count\n  , is_community_page\n  , link\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`facebook_sipher_page_overall`\nORDER BY snapshot_date\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_facebook_page_overall`"
        },
        "model.dbt_sipher.stg_discord_user_info_latest_snapshot": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_latest_table_suffix"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.discord_user_info",
                    "source.dbt_sipher.raw_social.discord_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_discord_user_info_latest_snapshot"
            ],
            "unique_id": "model.dbt_sipher.stg_discord_user_info_latest_snapshot",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n{%- set latest_table_suffix = get_latest_table_suffix(\n    table=source('raw_social', 'discord_user_info')\n) -%}\n\n\nSELECT\n  SAFE_CAST(id AS INT64) AS id,\n  SAFE_CAST(name AS STRING) AS name,\n  SAFE_CAST(nick AS STRING) AS nick,\n\n  SAFE_CAST(bot AS BOOLEAN) AS is_bot,\n  SAFE_CAST(pending AS BOOLEAN) AS is_pending,\n  SAFE_CAST(system AS BOOLEAN) AS is_system,\n\n  SAFE_CAST(activities AS STRING) AS activities,\n  SAFE_CAST(discriminator AS INT64) AS discriminator,\n  SAFE_CAST(guild AS STRING) AS guild,\n  SAFE_CAST(guild_permissions AS STRING) AS guild_permissions,\n  SAFE_CAST(mention AS STRING) AS mention,\n  SAFE_CAST(public_flags AS STRING) AS public_flags,\n  SAFE_CAST(raw_status AS STRING) AS raw_status,\n  SAFE_CAST(status AS STRING) AS status,\n  SAFE_CAST(web_status AS STRING) AS web_status,\n  SAFE_CAST(desktop_status AS STRING) AS desktop_status,\n  SAFE_CAST(mobile_status AS STRING) AS mobile_status,\n  SAFE_CAST(roles AS STRING) AS roles,\n  SAFE_CAST(top_role AS STRING) AS top_role,\n  SAFE_CAST(voice AS STRING) AS voice,\n\n  SAFE_CAST(premium_since AS TIMESTAMP) AS premium_since,\n  SAFE_CAST(created_at AS TIMESTAMP) AS user_created_at,\n  SAFE_CAST(joined_at AS TIMESTAMP) AS joined_sipher_guild_at,\nFROM {{ source('raw_social', 'discord_user_info') }}\nWHERE _TABLE_SUFFIX = \"{{ latest_table_suffix }}\"",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_discord_user_info_latest_snapshot.sql",
            "original_file_path": "models/staging/social/stg_discord_user_info_latest_snapshot.sql",
            "name": "stg_discord_user_info_latest_snapshot",
            "alias": "stg_discord_user_info_latest_snapshot",
            "checksum": {
                "name": "sha256",
                "checksum": "55d9d806ba14f81f65c86fee526ca9ba759758c4f1bb24d0514209c252d77c04"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "discord_user_info"
                ],
                [
                    "raw_social",
                    "discord_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_discord_user_info_latest_snapshot.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.542639,
            "compiled_code": "SELECT\n  SAFE_CAST(id AS INT64) AS id,\n  SAFE_CAST(name AS STRING) AS name,\n  SAFE_CAST(nick AS STRING) AS nick,\n\n  SAFE_CAST(bot AS BOOLEAN) AS is_bot,\n  SAFE_CAST(pending AS BOOLEAN) AS is_pending,\n  SAFE_CAST(system AS BOOLEAN) AS is_system,\n\n  SAFE_CAST(activities AS STRING) AS activities,\n  SAFE_CAST(discriminator AS INT64) AS discriminator,\n  SAFE_CAST(guild AS STRING) AS guild,\n  SAFE_CAST(guild_permissions AS STRING) AS guild_permissions,\n  SAFE_CAST(mention AS STRING) AS mention,\n  SAFE_CAST(public_flags AS STRING) AS public_flags,\n  SAFE_CAST(raw_status AS STRING) AS raw_status,\n  SAFE_CAST(status AS STRING) AS status,\n  SAFE_CAST(web_status AS STRING) AS web_status,\n  SAFE_CAST(desktop_status AS STRING) AS desktop_status,\n  SAFE_CAST(mobile_status AS STRING) AS mobile_status,\n  SAFE_CAST(roles AS STRING) AS roles,\n  SAFE_CAST(top_role AS STRING) AS top_role,\n  SAFE_CAST(voice AS STRING) AS voice,\n\n  SAFE_CAST(premium_since AS TIMESTAMP) AS premium_since,\n  SAFE_CAST(created_at AS TIMESTAMP) AS user_created_at,\n  SAFE_CAST(joined_at AS TIMESTAMP) AS joined_sipher_guild_at,\nFROM `sipher-data-platform`.`raw_social`.`discord_user_info__*`\nWHERE _TABLE_SUFFIX = \"20230530\"",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_discord_user_info_latest_snapshot`"
        },
        "model.dbt_sipher.stg_tiktok_profile_stats": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.tiktok_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_tiktok_profile_stats"
            ],
            "unique_id": "model.dbt_sipher.stg_tiktok_profile_stats",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  PARSE_DATE('%Y%m%d', date) AS snapshot_date_tzict,\n  followers AS followers_cnt,\n  hearts AS hearts_cnt,\n  diggs AS diggs_cnt,\n  videos AS videos_cnt\nFROM {{ source('raw_social', 'tiktok_profile_stats') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_tiktok_profile_stats.sql",
            "original_file_path": "models/staging/social/stg_tiktok_profile_stats.sql",
            "name": "stg_tiktok_profile_stats",
            "alias": "stg_tiktok_profile_stats",
            "checksum": {
                "name": "sha256",
                "checksum": "0a4f904f0bbb0013f278ac854e2b504dbe1dd3fea51ab45af384ee5b54c08148"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "tiktok_profile_stats"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_tiktok_profile_stats.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.546266,
            "compiled_code": "SELECT\n  PARSE_DATE('%Y%m%d', date) AS snapshot_date_tzict,\n  followers AS followers_cnt,\n  hearts AS hearts_cnt,\n  diggs AS diggs_cnt,\n  videos AS videos_cnt\nFROM `sipher-data-platform`.`raw_social`.`tiktok_profile_stats`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_tiktok_profile_stats`"
        },
        "model.dbt_sipher.stg_facebook_page_insights": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_page_insights"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_facebook_page_insights"
            ],
            "unique_id": "model.dbt_sipher.stg_facebook_page_insights",
            "raw_code": "{{- config(\n    materialized='view',\n)-}}\n\nWITH final AS (\nSELECT\n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", end_time) AS end_time\n  , page_id\n  , period\n  , page_actions_post_reactions_like_total\n  , page_actions_post_reactions_love_total\n  , page_actions_post_reactions_wow_total\n  , page_actions_post_reactions_haha_total \n  , page_actions_post_reactions_sorry_total \n  , page_actions_post_reactions_anger_total\n  , page_consumptions\n  , page_consumptions_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type, '$.other clicks')        AS INT64) AS page_consumptions_by_other_clicks\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type_unique, '$.other clicks') AS INT64) AS page_consumptions_by_other_clicks_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type, '$.photo view')         AS INT64) AS page_consumptions_by_photo_view\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type_unique, '$.photo view')  AS INT64) AS page_consumptions_by_photo_view_unique\n  , page_content_activity\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type, '$.fan')              AS INT64) AS page_content_activity_by_fan\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type_unique, '$.fan')       AS INT64) AS page_content_activity_by_fan_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type, '$.page post')        AS INT64) AS page_content_activity_by_page_post\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type_unique, '$.page post') AS INT64) AS page_content_activity_by_page_post_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type, '$.other')            AS INT64) AS page_content_activity_by_other\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type_unique, '$.other')     AS INT64) AS page_content_activity_by_other_unique\n  , page_engaged_users\n  , page_fans\n  , CAST(JSON_EXTRACT_SCALAR(page_fan_adds_by_paid_non_paid_unique, '$.total')  AS INT64) AS page_fan_adds_total\n  , CAST(JSON_EXTRACT_SCALAR(page_fan_adds_by_paid_non_paid_unique, '$.paid')   AS INT64) AS page_fan_adds_paid\n  , CAST(JSON_EXTRACT_SCALAR(page_fan_adds_by_paid_non_paid_unique, '$.unpaid') AS INT64) AS page_fan_adds_unpaid\n  , page_fan_removes\n  , page_fan_removes_unique\n  , page_fans_by_like_source\n  , page_fans_by_like_source_unique\n  , page_fans_by_unlike_source_unique\n  , page_fans_online\n  , page_impressions\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type, '$.page post')        AS INT64) AS page_impressions_by_page_post\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type_unique, '$.page post') AS INT64) AS page_impressions_by_page_post_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type, '$.checkin')          AS INT64) AS page_impressions_by_checkin\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type_unique, '$.checkin')   AS INT64) AS page_impressions_by_checkin_unique\n  , page_impressions_frequency_distribution\n  , page_impressions_nonviral\n  , page_impressions_nonviral_unique\n  , page_impressions_organic_unique_v2\n  , page_impressions_organic_v2\n  , page_impressions_paid\n  , page_impressions_paid_unique\n  , page_impressions_unique\n  , page_impressions_viral\n  , page_impressions_viral_frequency_distribution\n  , page_impressions_viral_unique\n  , page_negative_feedback\n  , page_negative_feedback_by_type\n  , page_negative_feedback_by_type_unique\n  , page_negative_feedback_unique\n  , page_places_checkin_total\n  , page_places_checkin_total_unique\n  , page_places_checkin_mobile\n  , page_places_checkin_mobile_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.link')            AS INT64) AS page_positive_feedback_by_link\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.link')     AS INT64) AS page_positive_feedback_by_link_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.like')            AS INT64) AS page_positive_feedback_by_like\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.like')     AS INT64) AS page_positive_feedback_by_like_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.comment')         AS INT64) AS page_positive_feedback_by_comment\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.comment')  AS INT64) AS page_positive_feedback_by_comment_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.other')           AS INT64) AS page_positive_feedback_by_other\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.other')    AS INT64) AS page_positive_feedback_by_other_unique\n  , page_post_engagements\n  , page_posts_impressions\n  , page_posts_impressions_frequency_distribution\n  , page_posts_impressions_nonviral\n  , page_posts_impressions_nonviral_unique\n  , page_posts_impressions_organic\n  , page_posts_impressions_organic_unique\n  , page_posts_impressions_paid\n  , page_posts_impressions_paid_unique\n  , page_posts_impressions_unique\n  , page_posts_impressions_viral\n  , page_posts_impressions_viral_unique\n  , page_posts_served_impressions_organic_unique\n  , page_tab_views_login_top\n  , page_tab_views_login_top_unique\n  , page_tab_views_logout_top\n  , page_video_complete_views_30s\n  , page_video_complete_views_30s_autoplayed\n  , page_video_complete_views_30s_click_to_play\n  , page_video_complete_views_30s_organic\n  , page_video_complete_views_30s_paid\n  , page_video_complete_views_30s_repeat_views\n  , page_video_complete_views_30s_unique\n  , page_video_repeat_views\n  , page_video_view_time\n  , page_video_views\n  , page_video_views_10s\n  , page_video_views_10s_autoplayed\n  , page_video_views_10s_click_to_play\n  , page_video_views_10s_organic\n  , page_video_views_10s_paid\n  , page_video_views_10s_repeat\n  , page_video_views_10s_unique\n  , page_video_views_autoplayed\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_uploaded')                 AS INT64) AS page_video_views_by_page_uploaded\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_uploaded_from_crossposts') AS INT64) AS page_video_views_by_page_uploaded_from_crossposts\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_uploaded_from_shares')     AS INT64) AS page_video_views_by_page_uploaded_from_shares\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_hosted_crosspost')         AS INT64) AS page_video_views_by_page_hosted_crosspost\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_hosted_share')             AS INT64) AS page_video_views_by_page_hosted_share\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_owned')                    AS INT64) AS page_video_views_by_page_owned\n  , page_video_views_click_to_play\n  , page_video_views_organic\n  , page_video_views_paid\n  , page_video_views_unique\n  , page_views_external_referrals\n  , page_views_logged_in_total\n  , page_views_logged_in_unique\n  , page_views_total\n  , page_views_by_referers_logged_in_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_internal_referer_logged_in_unique, '$.OTHER')  AS INT64) AS page_views_by_internal_referer_logged_in_unique_other\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_internal_referer_logged_in_unique, '$.NONE')   AS INT64) AS page_views_by_internal_referer_logged_in_unique_none\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_internal_referer_logged_in_unique, '$.SEARCH') AS INT64) AS page_views_by_internal_referer_logged_in_unique_search\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_logged_in_unique, '$.PHOTOS')      AS INT64) AS page_views_by_profile_tab_logged_in_unique_photos\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_logged_in_unique, '$.HOME')        AS INT64) AS page_views_by_profile_tab_logged_in_unique_home\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_logged_in_unique, '$.ABOUT')       AS INT64) AS page_views_by_profile_tab_logged_in_unique_about\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_total, '$.PHOTOS')                 AS INT64) AS page_views_by_profile_tab_total_photos\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_total, '$.HOME')                   AS INT64) AS page_views_by_profile_tab_total_home\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_total, '$.ABOUT')                  AS INT64) AS page_views_by_profile_tab_total_about\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_site_logged_in_unique, '$.OTHER')              AS INT64) AS page_views_by_site_logged_in_unique_other\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_site_logged_in_unique, '$.MOBILE')             AS INT64) AS page_views_by_site_logged_in_unique_mobile\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_site_logged_in_unique, '$.WWW')                AS INT64) AS page_views_by_site_logged_in_unique_www\n\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'facebook_sipher_page_insights') }}\nORDER BY 1\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_facebook_page_insights.sql",
            "original_file_path": "models/staging/social/stg_facebook_page_insights.sql",
            "name": "stg_facebook_page_insights",
            "alias": "stg_facebook_page_insights",
            "checksum": {
                "name": "sha256",
                "checksum": "1c98de26d0a937b0d2cba5f7d983382e530f2f0607da10eac1164e44fb7fe5c5"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_page_insights"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_facebook_page_insights.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.550233,
            "compiled_code": "WITH final AS (\nSELECT\n  PARSE_TIMESTAMP(\"%Y-%m-%dT%H:%M:%S%z\", end_time) AS end_time\n  , page_id\n  , period\n  , page_actions_post_reactions_like_total\n  , page_actions_post_reactions_love_total\n  , page_actions_post_reactions_wow_total\n  , page_actions_post_reactions_haha_total \n  , page_actions_post_reactions_sorry_total \n  , page_actions_post_reactions_anger_total\n  , page_consumptions\n  , page_consumptions_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type, '$.other clicks')        AS INT64) AS page_consumptions_by_other_clicks\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type_unique, '$.other clicks') AS INT64) AS page_consumptions_by_other_clicks_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type, '$.photo view')         AS INT64) AS page_consumptions_by_photo_view\n  , CAST(JSON_EXTRACT_SCALAR(page_consumptions_by_consumption_type_unique, '$.photo view')  AS INT64) AS page_consumptions_by_photo_view_unique\n  , page_content_activity\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type, '$.fan')              AS INT64) AS page_content_activity_by_fan\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type_unique, '$.fan')       AS INT64) AS page_content_activity_by_fan_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type, '$.page post')        AS INT64) AS page_content_activity_by_page_post\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type_unique, '$.page post') AS INT64) AS page_content_activity_by_page_post_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type, '$.other')            AS INT64) AS page_content_activity_by_other\n  , CAST(JSON_EXTRACT_SCALAR(page_content_activity_by_action_type_unique, '$.other')     AS INT64) AS page_content_activity_by_other_unique\n  , page_engaged_users\n  , page_fans\n  , CAST(JSON_EXTRACT_SCALAR(page_fan_adds_by_paid_non_paid_unique, '$.total')  AS INT64) AS page_fan_adds_total\n  , CAST(JSON_EXTRACT_SCALAR(page_fan_adds_by_paid_non_paid_unique, '$.paid')   AS INT64) AS page_fan_adds_paid\n  , CAST(JSON_EXTRACT_SCALAR(page_fan_adds_by_paid_non_paid_unique, '$.unpaid') AS INT64) AS page_fan_adds_unpaid\n  , page_fan_removes\n  , page_fan_removes_unique\n  , page_fans_by_like_source\n  , page_fans_by_like_source_unique\n  , page_fans_by_unlike_source_unique\n  , page_fans_online\n  , page_impressions\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type, '$.page post')        AS INT64) AS page_impressions_by_page_post\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type_unique, '$.page post') AS INT64) AS page_impressions_by_page_post_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type, '$.checkin')          AS INT64) AS page_impressions_by_checkin\n  , CAST(JSON_EXTRACT_SCALAR(page_impressions_by_story_type_unique, '$.checkin')   AS INT64) AS page_impressions_by_checkin_unique\n  , page_impressions_frequency_distribution\n  , page_impressions_nonviral\n  , page_impressions_nonviral_unique\n  , page_impressions_organic_unique_v2\n  , page_impressions_organic_v2\n  , page_impressions_paid\n  , page_impressions_paid_unique\n  , page_impressions_unique\n  , page_impressions_viral\n  , page_impressions_viral_frequency_distribution\n  , page_impressions_viral_unique\n  , page_negative_feedback\n  , page_negative_feedback_by_type\n  , page_negative_feedback_by_type_unique\n  , page_negative_feedback_unique\n  , page_places_checkin_total\n  , page_places_checkin_total_unique\n  , page_places_checkin_mobile\n  , page_places_checkin_mobile_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.link')            AS INT64) AS page_positive_feedback_by_link\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.link')     AS INT64) AS page_positive_feedback_by_link_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.like')            AS INT64) AS page_positive_feedback_by_like\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.like')     AS INT64) AS page_positive_feedback_by_like_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.comment')         AS INT64) AS page_positive_feedback_by_comment\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.comment')  AS INT64) AS page_positive_feedback_by_comment_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type, '$.other')           AS INT64) AS page_positive_feedback_by_other\n  , CAST(JSON_EXTRACT_SCALAR(page_positive_feedback_by_type_unique, '$.other')    AS INT64) AS page_positive_feedback_by_other_unique\n  , page_post_engagements\n  , page_posts_impressions\n  , page_posts_impressions_frequency_distribution\n  , page_posts_impressions_nonviral\n  , page_posts_impressions_nonviral_unique\n  , page_posts_impressions_organic\n  , page_posts_impressions_organic_unique\n  , page_posts_impressions_paid\n  , page_posts_impressions_paid_unique\n  , page_posts_impressions_unique\n  , page_posts_impressions_viral\n  , page_posts_impressions_viral_unique\n  , page_posts_served_impressions_organic_unique\n  , page_tab_views_login_top\n  , page_tab_views_login_top_unique\n  , page_tab_views_logout_top\n  , page_video_complete_views_30s\n  , page_video_complete_views_30s_autoplayed\n  , page_video_complete_views_30s_click_to_play\n  , page_video_complete_views_30s_organic\n  , page_video_complete_views_30s_paid\n  , page_video_complete_views_30s_repeat_views\n  , page_video_complete_views_30s_unique\n  , page_video_repeat_views\n  , page_video_view_time\n  , page_video_views\n  , page_video_views_10s\n  , page_video_views_10s_autoplayed\n  , page_video_views_10s_click_to_play\n  , page_video_views_10s_organic\n  , page_video_views_10s_paid\n  , page_video_views_10s_repeat\n  , page_video_views_10s_unique\n  , page_video_views_autoplayed\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_uploaded')                 AS INT64) AS page_video_views_by_page_uploaded\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_uploaded_from_crossposts') AS INT64) AS page_video_views_by_page_uploaded_from_crossposts\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_uploaded_from_shares')     AS INT64) AS page_video_views_by_page_uploaded_from_shares\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_hosted_crosspost')         AS INT64) AS page_video_views_by_page_hosted_crosspost\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_hosted_share')             AS INT64) AS page_video_views_by_page_hosted_share\n  , CAST(JSON_EXTRACT_SCALAR(page_video_views_by_uploaded_hosted, '$.page_owned')                    AS INT64) AS page_video_views_by_page_owned\n  , page_video_views_click_to_play\n  , page_video_views_organic\n  , page_video_views_paid\n  , page_video_views_unique\n  , page_views_external_referrals\n  , page_views_logged_in_total\n  , page_views_logged_in_unique\n  , page_views_total\n  , page_views_by_referers_logged_in_unique\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_internal_referer_logged_in_unique, '$.OTHER')  AS INT64) AS page_views_by_internal_referer_logged_in_unique_other\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_internal_referer_logged_in_unique, '$.NONE')   AS INT64) AS page_views_by_internal_referer_logged_in_unique_none\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_internal_referer_logged_in_unique, '$.SEARCH') AS INT64) AS page_views_by_internal_referer_logged_in_unique_search\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_logged_in_unique, '$.PHOTOS')      AS INT64) AS page_views_by_profile_tab_logged_in_unique_photos\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_logged_in_unique, '$.HOME')        AS INT64) AS page_views_by_profile_tab_logged_in_unique_home\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_logged_in_unique, '$.ABOUT')       AS INT64) AS page_views_by_profile_tab_logged_in_unique_about\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_total, '$.PHOTOS')                 AS INT64) AS page_views_by_profile_tab_total_photos\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_total, '$.HOME')                   AS INT64) AS page_views_by_profile_tab_total_home\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_profile_tab_total, '$.ABOUT')                  AS INT64) AS page_views_by_profile_tab_total_about\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_site_logged_in_unique, '$.OTHER')              AS INT64) AS page_views_by_site_logged_in_unique_other\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_site_logged_in_unique, '$.MOBILE')             AS INT64) AS page_views_by_site_logged_in_unique_mobile\n  , CAST(JSON_EXTRACT_SCALAR(page_views_by_site_logged_in_unique, '$.WWW')                AS INT64) AS page_views_by_site_logged_in_unique_www\n\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`facebook_sipher_page_insights`\nORDER BY 1\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_facebook_page_insights`"
        },
        "model.dbt_sipher.stg_twitter_timeline": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_timeline"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "twitter_timeline",
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "created_at",
                    "data_type": "timestamp",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_twitter_timeline"
            ],
            "unique_id": "model.dbt_sipher.stg_twitter_timeline",
            "raw_code": "{{- config(\n    alias='twitter_timeline',\n    materialized='incremental',\n    incremental_strategy='insert_overwrite',\n    partition_by={\n      \"field\": \"created_at\",\n      \"data_type\": \"timestamp\",\n      \"granularity\": \"day\"\n    },\n)-}}\n\nWITH data AS (\n    SELECT *\n    FROM {{ source('raw_social', 'twitter_timeline') }}\n    {% if is_incremental() -%}\n    WHERE `snapshot_date` = '{{ var(\"snapshot_date\", \"2023-12-25\") }}'\n    {% endif -%}\n    QUALIFY __collected_ts = MAX(__collected_ts) OVER (PARTITION BY account, created_at)\n)\n\n\nSELECT\n  created_at,\n  author_id,\n  id,\n  text,\n\n  referenced_tweets,\n  in_reply_to_user_id,\n  reply_settings,\n  conversation_id,\n  lang,\n  entities.annotations,\n  entities.urls,\n  attachments.media_keys,\n  context_annotations,\n\n  public_metrics.impression_count,\n  public_metrics.like_count,\n  public_metrics.reply_count,\n  public_metrics.retweet_count,\n  public_metrics.quote_count,\n\n  __collected_ts,\n  snapshot_date\n\nFROM data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_twitter_timeline.sql",
            "original_file_path": "models/staging/social/stg_twitter_timeline.sql",
            "name": "stg_twitter_timeline",
            "alias": "twitter_timeline",
            "checksum": {
                "name": "sha256",
                "checksum": "9249e07bed32352d4453ebaf7bc581764d22dd894e67a6c168cd17ed76e87b10"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_timeline"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_twitter_timeline.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "alias": "twitter_timeline",
                "materialized": "incremental",
                "incremental_strategy": "insert_overwrite",
                "partition_by": {
                    "field": "created_at",
                    "data_type": "timestamp",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.554562,
            "compiled_code": "WITH data AS (\n    SELECT *\n    FROM `sipher-data-platform`.`raw_social`.`twitter_timeline`\n    WHERE `snapshot_date` = '2023-12-25'\n    QUALIFY __collected_ts = MAX(__collected_ts) OVER (PARTITION BY account, created_at)\n)\n\n\nSELECT\n  created_at,\n  author_id,\n  id,\n  text,\n\n  referenced_tweets,\n  in_reply_to_user_id,\n  reply_settings,\n  conversation_id,\n  lang,\n  entities.annotations,\n  entities.urls,\n  attachments.media_keys,\n  context_annotations,\n\n  public_metrics.impression_count,\n  public_metrics.like_count,\n  public_metrics.reply_count,\n  public_metrics.retweet_count,\n  public_metrics.quote_count,\n\n  __collected_ts,\n  snapshot_date\n\nFROM data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`twitter_timeline`"
        },
        "model.dbt_sipher.stg_facebook_post_insights": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_facebook_post_insights"
            ],
            "unique_id": "model.dbt_sipher.stg_facebook_post_insights",
            "raw_code": "{{- config(\n    materialized='view',\n)-}}\n\nWITH final AS (\nSELECT\n  post_id\n  , period\n  , CAST(post_clicks                      AS INT64) AS post_clicks\n  , CAST(post_clicks_unique               AS INT64) AS post_clicks_unique\n  , CAST(post_engaged_fan                 AS INT64) AS post_engaged_fan\n  , CAST(post_engaged_users               AS INT64) AS post_engaged_users\n  , CAST(post_impressions                 AS INT64) AS post_impressions\n  , CAST(post_impressions_fan             AS INT64) AS post_impressions_fan\n  , CAST(post_impressions_fan_paid        AS INT64) AS post_impressions_fan_paid\n  , CAST(post_impressions_fan_paid_unique AS INT64) AS post_impressions_fan_paid_unique\n  , CAST(post_impressions_fan_unique      AS INT64) AS post_impressions_fan_unique\n  , CAST(post_impressions_nonviral        AS INT64) AS post_impressions_nonviral\n  , CAST(post_impressions_nonviral_unique AS INT64) AS post_impressions_nonviral_unique\n  , CAST(post_impressions_organic         AS INT64) AS post_impressions_organic\n  , CAST(post_impressions_organic_unique  AS INT64) AS post_impressions_organic_unique\n  , CAST(post_impressions_paid            AS INT64) AS post_impressions_paid\n  , CAST(post_impressions_paid_unique     AS INT64) AS post_impressions_paid_unique\n  , CAST(post_impressions_unique          AS INT64) AS post_impressions_unique\n  , CAST(post_impressions_viral           AS INT64) AS post_impressions_viral\n  , CAST(post_impressions_viral_unique    AS INT64) AS post_impressions_viral_unique\n  , CAST(post_negative_feedback           AS INT64) AS post_negative_feedback\n  , CAST(post_negative_feedback_unique    AS INT64) AS post_negative_feedback_unique\n  , CAST(post_reactions_anger_total       AS INT64) AS post_reactions_anger_total\n  , CAST(post_reactions_haha_total        AS INT64) AS post_reactions_haha_total\n  , CAST(post_reactions_like_total        AS INT64) AS post_reactions_like_total\n  , CAST(post_reactions_love_total        AS INT64) AS post_reactions_love_total\n  , CAST(post_reactions_sorry_total       AS INT64) AS post_reactions_sorry_total\n  , CAST(post_reactions_wow_total         AS INT64) AS post_reactions_wow_total\n\n  , __collected_ts\n  , snapshot_date\nFROM \n  {{ source('raw_social', 'facebook_sipher_post_insights') }}\nORDER BY snapshot_date\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_facebook_post_insights.sql",
            "original_file_path": "models/staging/social/stg_facebook_post_insights.sql",
            "name": "stg_facebook_post_insights",
            "alias": "stg_facebook_post_insights",
            "checksum": {
                "name": "sha256",
                "checksum": "a30068d63a895535ae4b92525dfcddaf863e272c5bfc131747a321b85ba82c7c"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_post_insights"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_facebook_post_insights.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.5583017,
            "compiled_code": "WITH final AS (\nSELECT\n  post_id\n  , period\n  , CAST(post_clicks                      AS INT64) AS post_clicks\n  , CAST(post_clicks_unique               AS INT64) AS post_clicks_unique\n  , CAST(post_engaged_fan                 AS INT64) AS post_engaged_fan\n  , CAST(post_engaged_users               AS INT64) AS post_engaged_users\n  , CAST(post_impressions                 AS INT64) AS post_impressions\n  , CAST(post_impressions_fan             AS INT64) AS post_impressions_fan\n  , CAST(post_impressions_fan_paid        AS INT64) AS post_impressions_fan_paid\n  , CAST(post_impressions_fan_paid_unique AS INT64) AS post_impressions_fan_paid_unique\n  , CAST(post_impressions_fan_unique      AS INT64) AS post_impressions_fan_unique\n  , CAST(post_impressions_nonviral        AS INT64) AS post_impressions_nonviral\n  , CAST(post_impressions_nonviral_unique AS INT64) AS post_impressions_nonviral_unique\n  , CAST(post_impressions_organic         AS INT64) AS post_impressions_organic\n  , CAST(post_impressions_organic_unique  AS INT64) AS post_impressions_organic_unique\n  , CAST(post_impressions_paid            AS INT64) AS post_impressions_paid\n  , CAST(post_impressions_paid_unique     AS INT64) AS post_impressions_paid_unique\n  , CAST(post_impressions_unique          AS INT64) AS post_impressions_unique\n  , CAST(post_impressions_viral           AS INT64) AS post_impressions_viral\n  , CAST(post_impressions_viral_unique    AS INT64) AS post_impressions_viral_unique\n  , CAST(post_negative_feedback           AS INT64) AS post_negative_feedback\n  , CAST(post_negative_feedback_unique    AS INT64) AS post_negative_feedback_unique\n  , CAST(post_reactions_anger_total       AS INT64) AS post_reactions_anger_total\n  , CAST(post_reactions_haha_total        AS INT64) AS post_reactions_haha_total\n  , CAST(post_reactions_like_total        AS INT64) AS post_reactions_like_total\n  , CAST(post_reactions_love_total        AS INT64) AS post_reactions_love_total\n  , CAST(post_reactions_sorry_total       AS INT64) AS post_reactions_sorry_total\n  , CAST(post_reactions_wow_total         AS INT64) AS post_reactions_wow_total\n\n  , __collected_ts\n  , snapshot_date\nFROM \n  `sipher-data-platform`.`raw_social`.`facebook_sipher_post_insights`\nORDER BY snapshot_date\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_facebook_post_insights`"
        },
        "model.dbt_sipher.stg_tiktok_video_comment": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_social.tiktok_video_comment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_social",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "stg_tiktok_video_comment"
            ],
            "unique_id": "model.dbt_sipher.stg_tiktok_video_comment",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  post_id AS video_id,\n  `desc` AS video_description,\n  music AS video_music,\n  comments AS comments_cnt,\n  diggs AS diggs_cnt,\n  download AS download_cnt,\n  play AS play_cnt,\n  forward AS forward_cnt,\n  share AS share_cnt,\n  comment_text,\n  comment_user_id,\n  PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) AS snapshot_date_tzict\nFROM {{ source('raw_social', 'tiktok_video_comment') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/social/stg_tiktok_video_comment.sql",
            "original_file_path": "models/staging/social/stg_tiktok_video_comment.sql",
            "name": "stg_tiktok_video_comment",
            "alias": "stg_tiktok_video_comment",
            "checksum": {
                "name": "sha256",
                "checksum": "219ecab024aa33681af2c0f0043bf3573bf0ee04ae415d70a7ab823db2d8d924"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "tiktok_video_comment"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/stg_tiktok_video_comment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_social",
                "materialized": "view"
            },
            "created_at": 1705293861.56162,
            "compiled_code": "SELECT\n  post_id AS video_id,\n  `desc` AS video_description,\n  music AS video_music,\n  comments AS comments_cnt,\n  diggs AS diggs_cnt,\n  download AS download_cnt,\n  play AS play_cnt,\n  forward AS forward_cnt,\n  share AS share_cnt,\n  comment_text,\n  comment_user_id,\n  PARSE_DATE('%Y%m%d', _TABLE_SUFFIX) AS snapshot_date_tzict\nFROM `sipher-data-platform`.`raw_social`.`tiktok_video_*`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_social`.`stg_tiktok_video_comment`"
        },
        "model.dbt_sipher.stg_firebase__hidden_atlas_events_14d": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_hidden_atlas.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_firebase",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_firebase",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "stg_firebase__hidden_atlas_events_14d"
            ],
            "unique_id": "model.dbt_sipher.stg_firebase__hidden_atlas_events_14d",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM {{ source('raw_firebase_hidden_atlas', 'events') }}\nWHERE PARSE_DATE('%Y%m%d', SUBSTR(_TABLE_SUFFIX, -8)) BETWEEN DATE_SUB(CURRENT_DATE() , INTERVAL 14 DAY) AND CURRENT_DATE()",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/firebase/stg_firebase__hidden_atlas_events_14d.sql",
            "original_file_path": "models/staging/firebase/stg_firebase__hidden_atlas_events_14d.sql",
            "name": "stg_firebase__hidden_atlas_events_14d",
            "alias": "stg_firebase__hidden_atlas_events_14d",
            "checksum": {
                "name": "sha256",
                "checksum": "96dcab067eb9bba62240307c70ac26454f52d995441143d4dce87faadbda2f32"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_hidden_atlas",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/stg_firebase__hidden_atlas_events_14d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_firebase",
                "materialized": "view"
            },
            "created_at": 1705293861.564666,
            "compiled_code": "SELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM `hidden-atlas`.`analytics_402014087`.`events_*`\nWHERE PARSE_DATE('%Y%m%d', SUBSTR(_TABLE_SUFFIX, -8)) BETWEEN DATE_SUB(CURRENT_DATE() , INTERVAL 14 DAY) AND CURRENT_DATE()",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_firebase`.`stg_firebase__hidden_atlas_events_14d`"
        },
        "model.dbt_sipher.stg_firebase__artventure_events_14d": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_artventure.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_firebase",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_firebase",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "stg_firebase__artventure_events_14d"
            ],
            "unique_id": "model.dbt_sipher.stg_firebase__artventure_events_14d",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM \n  {{ source('raw_firebase_artventure', 'events') }}\nWHERE \n    PARSE_DATE('%Y%m%d', SUBSTR(_TABLE_SUFFIX, -8)) BETWEEN DATE_SUB(CURRENT_DATE() , INTERVAL 14 DAY) AND CURRENT_DATE()",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/firebase/stg_firebase__artventure_events_14d.sql",
            "original_file_path": "models/staging/firebase/stg_firebase__artventure_events_14d.sql",
            "name": "stg_firebase__artventure_events_14d",
            "alias": "stg_firebase__artventure_events_14d",
            "checksum": {
                "name": "sha256",
                "checksum": "1a5e0561ab7ec7ec7f1d48d3766833d351e328871e2dc6b67412a11a161c45f2"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_artventure",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/stg_firebase__artventure_events_14d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_firebase",
                "materialized": "view"
            },
            "created_at": 1705293861.5685105,
            "compiled_code": "SELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM \n  `art-venture-387704`.`analytics_376091252`.`events_*`\nWHERE \n    PARSE_DATE('%Y%m%d', SUBSTR(_TABLE_SUFFIX, -8)) BETWEEN DATE_SUB(CURRENT_DATE() , INTERVAL 14 DAY) AND CURRENT_DATE()",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_firebase`.`stg_firebase__artventure_events_14d`"
        },
        "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_hidden_atlas.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_firebase",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_firebase",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "stg_firebase__hidden_atlas_events_all_time"
            ],
            "unique_id": "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM {{ source('raw_firebase_hidden_atlas', 'events') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/firebase/stg_firebase__hidden_atlas_events_all_time.sql",
            "original_file_path": "models/staging/firebase/stg_firebase__hidden_atlas_events_all_time.sql",
            "name": "stg_firebase__hidden_atlas_events_all_time",
            "alias": "stg_firebase__hidden_atlas_events_all_time",
            "checksum": {
                "name": "sha256",
                "checksum": "dd9810898cbf7becd665c06390f83c89f167841b27e0eb4ee7ff0a7801e0a9fd"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_hidden_atlas",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/stg_firebase__hidden_atlas_events_all_time.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_firebase",
                "materialized": "view"
            },
            "created_at": 1705293861.571552,
            "compiled_code": "SELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM `hidden-atlas`.`analytics_402014087`.`events_*`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_firebase`.`stg_firebase__hidden_atlas_events_all_time`"
        },
        "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_firebase",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_firebase",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "stg_firebase__sipher_odyssey_events_all_time"
            ],
            "unique_id": "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM {{ source('raw_firebase_sipher_odyssey', 'events') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/firebase/stg_firebase__sipher_odyssey_events_all_time.sql",
            "original_file_path": "models/staging/firebase/stg_firebase__sipher_odyssey_events_all_time.sql",
            "name": "stg_firebase__sipher_odyssey_events_all_time",
            "alias": "stg_firebase__sipher_odyssey_events_all_time",
            "checksum": {
                "name": "sha256",
                "checksum": "acf839b85334983adb4e43ec9ac8aaf826969d5a0a54d8a6925ad93cdbe00624"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/stg_firebase__sipher_odyssey_events_all_time.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_firebase",
                "materialized": "view"
            },
            "created_at": 1705293861.5751402,
            "compiled_code": "SELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM `sipherg1production`.`analytics_387396350`.`events_*`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`"
        },
        "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_firebase",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_firebase",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "stg_firebase__sipher_odyssey_events_14d"
            ],
            "unique_id": "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM {{ source('raw_firebase_sipher_odyssey', 'events') }}\nWHERE PARSE_DATE('%Y%m%d', SUBSTR(_TABLE_SUFFIX, -8)) BETWEEN DATE_SUB(CURRENT_DATE() , INTERVAL 14 DAY) AND CURRENT_DATE()",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/firebase/stg_firebase__sipher_odyssey_events_14d.sql",
            "original_file_path": "models/staging/firebase/stg_firebase__sipher_odyssey_events_14d.sql",
            "name": "stg_firebase__sipher_odyssey_events_14d",
            "alias": "stg_firebase__sipher_odyssey_events_14d",
            "checksum": {
                "name": "sha256",
                "checksum": "ab529b0c1c5feafd43fcf8ee18a7c6f39c9b764b73f0332b9bd6aefb53eaac49"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/stg_firebase__sipher_odyssey_events_14d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_firebase",
                "materialized": "view"
            },
            "created_at": 1705293861.5783014,
            "compiled_code": "SELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM `sipherg1production`.`analytics_387396350`.`events_*`\nWHERE PARSE_DATE('%Y%m%d', SUBSTR(_TABLE_SUFFIX, -8)) BETWEEN DATE_SUB(CURRENT_DATE() , INTERVAL 14 DAY) AND CURRENT_DATE()",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_14d`"
        },
        "model.dbt_sipher.stg_firebase__artventure_events_all_time": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_artventure.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staging_firebase",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staging_firebase",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "stg_firebase__artventure_events_all_time"
            ],
            "unique_id": "model.dbt_sipher.stg_firebase__artventure_events_all_time",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\n\nSELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM \n  {{ source('raw_firebase_artventure', 'events') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/firebase/stg_firebase__artventure_events_all_time.sql",
            "original_file_path": "models/staging/firebase/stg_firebase__artventure_events_all_time.sql",
            "name": "stg_firebase__artventure_events_all_time",
            "alias": "stg_firebase__artventure_events_all_time",
            "checksum": {
                "name": "sha256",
                "checksum": "1979ee8889560b4da0fbda6af42084cc13a11ba289133265d6aae57522784e20"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_artventure",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/stg_firebase__artventure_events_all_time.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staging_firebase",
                "materialized": "view"
            },
            "created_at": 1705293861.582151,
            "compiled_code": "SELECT\n  *,\n  _TABLE_SUFFIX AS __table_suffix\nFROM \n  `art-venture-387704`.`analytics_376091252`.`events_*`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staging_firebase`.`stg_firebase__artventure_events_all_time`"
        },
        "model.dbt_sipher.stg_aws__billing__raw_metaverse": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_billing_gcs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_billing_gcs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "stg_aws__billing__raw_metaverse"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__billing__raw_metaverse",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_billing_gcs', 'billing__raw_metaverse') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__billing/stg_aws__billing__raw_metaverse.sql",
            "original_file_path": "models/staging/aws__billing/stg_aws__billing__raw_metaverse.sql",
            "name": "stg_aws__billing__raw_metaverse",
            "alias": "stg_aws__billing__raw_metaverse",
            "checksum": {
                "name": "sha256",
                "checksum": "4deb17701dcb627d98d7d86c79c3f8e186975679397396c0a6c4e05f7246743e"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/stg_aws__billing__raw_metaverse.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_billing_gcs",
                "materialized": "view"
            },
            "created_at": 1705293861.5851324,
            "compiled_code": "SELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_metaverse_billing`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_metaverse`"
        },
        "model.dbt_sipher.stg_aws__billing__raw_g1": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_billing_gcs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_billing_gcs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "stg_aws__billing__raw_g1"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__billing__raw_g1",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_billing_gcs', 'billing__raw_g1') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__billing/stg_aws__billing__raw_g1.sql",
            "original_file_path": "models/staging/aws__billing/stg_aws__billing__raw_g1.sql",
            "name": "stg_aws__billing__raw_g1",
            "alias": "stg_aws__billing__raw_g1",
            "checksum": {
                "name": "sha256",
                "checksum": "a2ee698b777156bf8464432fcb92b580c24fc21fb6985b3e484e7ac13ccf1247"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/stg_aws__billing__raw_g1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_billing_gcs",
                "materialized": "view"
            },
            "created_at": 1705293861.5882835,
            "compiled_code": "SELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_g1_billing`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_g1`"
        },
        "model.dbt_sipher.stg_aws__billing__raw_marketplace": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_billing_gcs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_billing_gcs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "stg_aws__billing__raw_marketplace"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__billing__raw_marketplace",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_billing_gcs', 'billing__raw_marketplace') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__billing/stg_aws__billing__raw_marketplace.sql",
            "original_file_path": "models/staging/aws__billing/stg_aws__billing__raw_marketplace.sql",
            "name": "stg_aws__billing__raw_marketplace",
            "alias": "stg_aws__billing__raw_marketplace",
            "checksum": {
                "name": "sha256",
                "checksum": "2f3c699838b18fdcc08438f14f6e757dd7aeeab1900e160f4f0b01ba0565f946"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/stg_aws__billing__raw_marketplace.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_billing_gcs",
                "materialized": "view"
            },
            "created_at": 1705293861.5914052,
            "compiled_code": "SELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_marketplace_billing`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_marketplace`"
        },
        "model.dbt_sipher.stg_aws__billing__raw_blockchain": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_billing_gcs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_billing_gcs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "stg_aws__billing__raw_blockchain"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__billing__raw_blockchain",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_billing_gcs', 'billing__raw_blockchain') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__billing/stg_aws__billing__raw_blockchain.sql",
            "original_file_path": "models/staging/aws__billing/stg_aws__billing__raw_blockchain.sql",
            "name": "stg_aws__billing__raw_blockchain",
            "alias": "stg_aws__billing__raw_blockchain",
            "checksum": {
                "name": "sha256",
                "checksum": "1869eef68445955aa43567bdbfdf6670fac1ec400b2f484cfae142aad011cea6"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/stg_aws__billing__raw_blockchain.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_billing_gcs",
                "materialized": "view"
            },
            "created_at": 1705293861.594494,
            "compiled_code": "SELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_blockchain_billing`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_blockchain`"
        },
        "model.dbt_sipher.stg_aws__billing__raw_game_production": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_billing_gcs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_billing_gcs",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "stg_aws__billing__raw_game_production"
            ],
            "unique_id": "model.dbt_sipher.stg_aws__billing__raw_game_production",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM {{ source('raw_aws_billing_gcs', 'billing__raw_game_production') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/aws__billing/stg_aws__billing__raw_game_production.sql",
            "original_file_path": "models/staging/aws__billing/stg_aws__billing__raw_game_production.sql",
            "name": "stg_aws__billing__raw_game_production",
            "alias": "stg_aws__billing__raw_game_production",
            "checksum": {
                "name": "sha256",
                "checksum": "3c0275017138849609a3caf3411d97aaf66776756aafc649ea0ae558ac89ae08"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/stg_aws__billing__raw_game_production.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_aws_billing_gcs",
                "materialized": "view"
            },
            "created_at": 1705293861.5983367,
            "compiled_code": "SELECT\n    identity_LineItemId AS identity_line_item_id,\n    DATE(bill_BillingPeriodStartDate) AS bill_billing_period_start_date,\n    DATE(lineItem_UsageStartDate) AS line_item_usage_start_date,\n    lineItem_ProductCode AS line_item_product_code,\n    CAST(lineItem_UnblendedCost AS NUMERIC) AS line_item_unblended_cost,\n    CAST(lineItem_BlendedCost AS NUMERIC) AS line_item_blended_cost,\n    lineItem_LineItemDescription AS line_item_line_item_description,\n    lineItem_LineItemType AS line_item_line_item_type,\n    product_region AS product_region,\n    resourceTags_user_eks_cluster_name AS resource_tag_cluster_name,\n    resourceTags_user_project AS resource_tag_project,\n    resourceTags_user_type AS resource_tag_type,\n    dt AS snapshot_date_tzutc\nFROM `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_game_production_billing`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_game_production`"
        },
        "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_etherscan",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_etherscan",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "stg_coinmarketcap__main_token_quotes_intraday"
            ],
            "unique_id": "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    token_symbol,\t\t\t\n    price_usd,\t\t\t\n    market_cap_usd,\n    vol_24h,\n    price_btc,\t\t\t\n    market_cap_btc,\n    TIMESTAMP_SECONDS(CAST(timestamp AS INT64)) AS\ttimestamp\nFROM {{ source('raw_coinmarketcap', 'main_token_quotes_intraday') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/coinmarketcap/stg_coinmarketcap__main_token_quotes_intraday.sql",
            "original_file_path": "models/staging/coinmarketcap/stg_coinmarketcap__main_token_quotes_intraday.sql",
            "name": "stg_coinmarketcap__main_token_quotes_intraday",
            "alias": "stg_coinmarketcap__main_token_quotes_intraday",
            "checksum": {
                "name": "sha256",
                "checksum": "b78c1f059365c611e37a74d487bdacc2291339b03abb5c315b070dfdae60bf21"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes_intraday"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/stg_coinmarketcap__main_token_quotes_intraday.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_etherscan",
                "materialized": "view"
            },
            "created_at": 1705293861.6014295,
            "compiled_code": "SELECT\n    token_symbol,\t\t\t\n    price_usd,\t\t\t\n    market_cap_usd,\n    vol_24h,\n    price_btc,\t\t\t\n    market_cap_btc,\n    TIMESTAMP_SECONDS(CAST(timestamp AS INT64)) AS\ttimestamp\nFROM `sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes_intraday`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_etherscan`.`stg_coinmarketcap__main_token_quotes_intraday`"
        },
        "model.dbt_sipher.stg_coinmarketcap__main_token_quotes": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_etherscan",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_etherscan",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "stg_coinmarketcap__main_token_quotes"
            ],
            "unique_id": "model.dbt_sipher.stg_coinmarketcap__main_token_quotes",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    id,\n    name,\n    symbol,\n    open AS open_price,\n    high,\n    low,\n    close AS close_price,\n    PARSE_DATE(\"%Y-%m-%d\", LEFT(timestamp,10)) AS quote_date,\n    timestamp,\nFROM {{ source('raw_coinmarketcap', 'main_token_quotes') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/coinmarketcap/stg_coinmarketcap__main_token_quotes.sql",
            "original_file_path": "models/staging/coinmarketcap/stg_coinmarketcap__main_token_quotes.sql",
            "name": "stg_coinmarketcap__main_token_quotes",
            "alias": "stg_coinmarketcap__main_token_quotes",
            "checksum": {
                "name": "sha256",
                "checksum": "ffc58e12b8b7c1b631ddbab573d8f3b3c6ab8e9e30de1f63448c706b7b6cc7e0"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/stg_coinmarketcap__main_token_quotes.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_etherscan",
                "materialized": "view"
            },
            "created_at": 1705293861.6044247,
            "compiled_code": "SELECT\n    id,\n    name,\n    symbol,\n    open AS open_price,\n    high,\n    low,\n    close AS close_price,\n    PARSE_DATE(\"%Y-%m-%d\", LEFT(timestamp,10)) AS quote_date,\n    timestamp,\nFROM `sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_etherscan`.`stg_coinmarketcap__main_token_quotes`"
        },
        "model.dbt_sipher.stg_etherscan_polygon__important_wallet_accounts_balance": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_etherscan",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_etherscan",
            "fqn": [
                "dbt_sipher",
                "staging",
                "etherscan",
                "stg_etherscan_polygon__important_wallet_accounts_balance"
            ],
            "unique_id": "model.dbt_sipher.stg_etherscan_polygon__important_wallet_accounts_balance",
            "raw_code": "{{- config(\n    materialized = 'view',\n)-}}\n\nSELECT\n    wallet_address,\n    wallet_name,\n    token_address,\n    token_symbol,\n    CAST(value AS NUMERIC) AS value,\n    decimal,\n    network,\n    timestamp,\n    DATE(LEFT(CAST(date AS STRING), 10)) AS quote_date\nFROM {{ source('raw_etherscan', 'etherscan_polygon_important_wallet_accounts_balance') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/etherscan/stg_etherscan_polygon__important_wallet_accounts_balance.sql",
            "original_file_path": "models/staging/etherscan/stg_etherscan_polygon__important_wallet_accounts_balance.sql",
            "name": "stg_etherscan_polygon__important_wallet_accounts_balance",
            "alias": "stg_etherscan_polygon__important_wallet_accounts_balance",
            "checksum": {
                "name": "sha256",
                "checksum": "f8ed8cf4dcfbf560897690de6179b2b40813fadacc6376613017c8ae57cb090d"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_etherscan",
                    "etherscan_polygon_important_wallet_accounts_balance"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/etherscan/stg_etherscan_polygon__important_wallet_accounts_balance.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "raw_etherscan",
                "materialized": "view"
            },
            "created_at": 1705293861.6074188,
            "compiled_code": "SELECT\n    wallet_address,\n    wallet_name,\n    token_address,\n    token_symbol,\n    CAST(value AS NUMERIC) AS value,\n    decimal,\n    network,\n    timestamp,\n    DATE(LEFT(CAST(date AS STRING), 10)) AS quote_date\nFROM `sipher-data-platform`.`raw_etherscan`.`etherscan_polygon_important_wallet_accounts_balance`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_etherscan`.`stg_etherscan_polygon__important_wallet_accounts_balance`"
        },
        "model.dbt_sipher.spaceship_claimable_lootbox": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "spaceship_claimable_lootbox"
            ],
            "unique_id": "model.dbt_sipher.spaceship_claimable_lootbox",
            "raw_code": "{{config(materialized='table')}}\n\n\nselect * from `sipher-data-platform.sipher_presentation.spaceship_claimable_lootbox`",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/spaceship_claimable_lootbox.sql",
            "original_file_path": "models/core/spaceship_claimable_lootbox.sql",
            "name": "spaceship_claimable_lootbox",
            "alias": "spaceship_claimable_lootbox",
            "checksum": {
                "name": "sha256",
                "checksum": "1461eea7aa13c4fb1f3a27213ba79ec9cf3bbb4281fd02d9e5a43a72463ffd75"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "tokenId": {
                    "name": "tokenId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lootbox_type": {
                    "name": "lootbox_type",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_spaceship_claimable_lootbox.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/spaceship_claimable_lootbox.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.0991666,
            "compiled_code": "\n\n\nselect * from `sipher-data-platform.sipher_presentation.spaceship_claimable_lootbox`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`spaceship_claimable_lootbox`"
        },
        "model.dbt_sipher.quest_retention_weekly_hd": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "quest_retention_weekly_hd"
            ],
            "unique_id": "model.dbt_sipher.quest_retention_weekly_hd",
            "raw_code": "{{config(materialized='table')}}\n\nwith s1 as (\n    select\n        timestamp(createdAt) createdAt,\n        min_createdAt,\n        quest_userId,\n        date_DIFF(date(createdAt), min_createdAt, day) as diff\n    from\n        `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest` o\n        left join (\n            select\n                cast(userId as int64) quest_userId,\n                min (date(createdAt)) min_createdAt\n            from\n                `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest`\n            group by\n                1\n        ) s on s.quest_userId = cast(o.userId as int64)\n    where\n        true\n),\ns2 as (\n    select\n        quest_userId,\n        diff,\n        cast(FLOOR((diff - 0) / 7) as INT64) as fl\n    from\n        s1\n),\ns3 as (\n    select\n        fl as period,\n        count(distinct quest_userId) as quest_userId,\n        1 as a\n    from\n        s2\n    group by\n        1\n    order by\n        1\n),\ns4 as (\n    select\n        *,\n        LAG(quest_userId) OVER (\n            PARTITION BY a\n            order by\n                period asc\n        ) as lag\n    from\n        s3\n),\ns5 as (\n    select\n        quest_userId as quest_userIds\n    from\n        s4\n    where\n        period = 0\n)\nselect\n    period,\n    quest_userId,\n    round((quest_userId - lag) / lag, 2) as churn_rate,\n    round(quest_userId / quest_userIds, 2) as drop_\nfrom\n    s4,\n    s5\norder by\n    1",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/quest_retention_weekly_hd.sql",
            "original_file_path": "models/core/quest_retention_weekly_hd.sql",
            "name": "quest_retention_weekly_hd",
            "alias": "quest_retention_weekly_hd",
            "checksum": {
                "name": "sha256",
                "checksum": "151f210f82ab81eb913e6fb90c8def3d5dc706dedcd0c992f1556b2028fa278a"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "period": {
                    "name": "period",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "quest_userId": {
                    "name": "quest_userId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_quest_retention_weekly_hd.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/quest_retention_weekly_hd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.0658722,
            "compiled_code": "\n\nwith s1 as (\n    select\n        timestamp(createdAt) createdAt,\n        min_createdAt,\n        quest_userId,\n        date_DIFF(date(createdAt), min_createdAt, day) as diff\n    from\n        `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest` o\n        left join (\n            select\n                cast(userId as int64) quest_userId,\n                min (date(createdAt)) min_createdAt\n            from\n                `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest`\n            group by\n                1\n        ) s on s.quest_userId = cast(o.userId as int64)\n    where\n        true\n),\ns2 as (\n    select\n        quest_userId,\n        diff,\n        cast(FLOOR((diff - 0) / 7) as INT64) as fl\n    from\n        s1\n),\ns3 as (\n    select\n        fl as period,\n        count(distinct quest_userId) as quest_userId,\n        1 as a\n    from\n        s2\n    group by\n        1\n    order by\n        1\n),\ns4 as (\n    select\n        *,\n        LAG(quest_userId) OVER (\n            PARTITION BY a\n            order by\n                period asc\n        ) as lag\n    from\n        s3\n),\ns5 as (\n    select\n        quest_userId as quest_userIds\n    from\n        s4\n    where\n        period = 0\n)\nselect\n    period,\n    quest_userId,\n    round((quest_userId - lag) / lag, 2) as churn_rate,\n    round(quest_userId / quest_userIds, 2) as drop_\nfrom\n    s4,\n    s5\norder by\n    1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`quest_retention_weekly_hd`"
        },
        "model.dbt_sipher.quest_4retention_daily_hd": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "quest_4retention_daily_hd"
            ],
            "unique_id": "model.dbt_sipher.quest_4retention_daily_hd",
            "raw_code": "{{config(materialized='table')}}\n\nwith a as (\n    select\n        *,\n        lag(o_time) over (\n            partition by quest_userId\n            order by\n                o_time\n        ) as previous_day,\n        date_diff(\n            o_time,\n            lag(o_time) over (\n                partition by quest_userId\n                order by\n                    o_time\n            ),\n            day\n        ) as gap\n    from\n        (\n            select\n                cast(userId as int64) quest_userId,\n                date_trunc(dt, day) as o_time,\n                date_trunc(date(min_dt), day) as f_day\n            from\n                `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest` o\n                left join (\n                    select\n                        cast(userId as int64) quest_userId,\n                        min (dt) min_dt\n                    from\n                        `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest`\n                    group by\n                        1\n                ) s on s.quest_userId = cast(o.userId as int64)\n            where\n                true\n            order by\n                dt\n        ) s\n),\nf as(\n    select\n        o_time,\n        lag(count(distinct quest_userId)) over (\n            order by\n                o_time\n        ) as begining ,--- S\u1ed1  l\u00fac b\u1eaft \u0111\u1ea7u,\n        count(distinct quest_userId) as ending ,\n        --- S\u1ed1  hi\u1ec7n t\u1ea1i,\n        count(\n            distinct case when o_time <> f_day\n            and (\n                previous_day is null\n                or gap > 1\n            ) then quest_userId end\n        ) as returns ,-- S\u1ed1  kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng \u1edf th\u1eddi \u0111i\u1ec3m tr\u01b0\u1edbc n nh\u01b0ng ho\u1ea1t \u0111\u1ed9ng \u1edf th\u1eddi \u0111i\u1ec3m n (th\u1eddi \u0111i\u1ec3m \u0111\u01b0\u1ee3c t\u00ednh),\n        count(\n            distinct case when o_time = f_day then quest_userId end\n        ) as news ,-- S\u1ed1  m\u1edbi,\n        count(\n            distinct case when o_time <> f_day\n            and gap = 1 then quest_userId end\n        ) as retention ,--- S\u1ed1 retention,\n        lag(count(distinct quest_userId)) over (\n            order by\n                o_time\n        ) - count(\n            distinct case when o_time <> f_day\n            and gap = 1 then quest_userId end\n        ) as churn_driver --- S\u1ed1  t\u1ea1m th\u1eddi r\u1eddi b\u1ecf. BEGINING - RETENTION\n        -- select *\n    from\n        a\n    group by\n        1\n    order by\n        o_time\n)\nselect\n    format_date('%Y-%m-%d', o_time) as o_time,\n    begining,\n    ending,\n    returns,\n    news,\n    retention,\n    churn_driver\nfrom\n    f",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/quest_4retention_daily_hd.sql",
            "original_file_path": "models/core/quest_4retention_daily_hd.sql",
            "name": "quest_4retention_daily_hd",
            "alias": "quest_4retention_daily_hd",
            "checksum": {
                "name": "sha256",
                "checksum": "9017db03a1e972691288a89a002d7c330af62a85e884bb149458de65c9091e28"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "o_time": {
                    "name": "o_time",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "ending": {
                    "name": "ending",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "returns": {
                    "name": "returns",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "news": {
                    "name": "news",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "retention": {
                    "name": "retention",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "churn_driver": {
                    "name": "churn_driver",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_quest_4retention_daily_hd.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/quest_4retention_daily_hd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.0846488,
            "compiled_code": "\n\nwith a as (\n    select\n        *,\n        lag(o_time) over (\n            partition by quest_userId\n            order by\n                o_time\n        ) as previous_day,\n        date_diff(\n            o_time,\n            lag(o_time) over (\n                partition by quest_userId\n                order by\n                    o_time\n            ),\n            day\n        ) as gap\n    from\n        (\n            select\n                cast(userId as int64) quest_userId,\n                date_trunc(dt, day) as o_time,\n                date_trunc(date(min_dt), day) as f_day\n            from\n                `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest` o\n                left join (\n                    select\n                        cast(userId as int64) quest_userId,\n                        min (dt) min_dt\n                    from\n                        `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest`\n                    group by\n                        1\n                ) s on s.quest_userId = cast(o.userId as int64)\n            where\n                true\n            order by\n                dt\n        ) s\n),\nf as(\n    select\n        o_time,\n        lag(count(distinct quest_userId)) over (\n            order by\n                o_time\n        ) as begining ,--- S\u1ed1  l\u00fac b\u1eaft \u0111\u1ea7u,\n        count(distinct quest_userId) as ending ,\n        --- S\u1ed1  hi\u1ec7n t\u1ea1i,\n        count(\n            distinct case when o_time <> f_day\n            and (\n                previous_day is null\n                or gap > 1\n            ) then quest_userId end\n        ) as returns ,-- S\u1ed1  kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng \u1edf th\u1eddi \u0111i\u1ec3m tr\u01b0\u1edbc n nh\u01b0ng ho\u1ea1t \u0111\u1ed9ng \u1edf th\u1eddi \u0111i\u1ec3m n (th\u1eddi \u0111i\u1ec3m \u0111\u01b0\u1ee3c t\u00ednh),\n        count(\n            distinct case when o_time = f_day then quest_userId end\n        ) as news ,-- S\u1ed1  m\u1edbi,\n        count(\n            distinct case when o_time <> f_day\n            and gap = 1 then quest_userId end\n        ) as retention ,--- S\u1ed1 retention,\n        lag(count(distinct quest_userId)) over (\n            order by\n                o_time\n        ) - count(\n            distinct case when o_time <> f_day\n            and gap = 1 then quest_userId end\n        ) as churn_driver --- S\u1ed1  t\u1ea1m th\u1eddi r\u1eddi b\u1ecf. BEGINING - RETENTION\n        -- select *\n    from\n        a\n    group by\n        1\n    order by\n        o_time\n)\nselect\n    format_date('%Y-%m-%d', o_time) as o_time,\n    begining,\n    ending,\n    returns,\n    news,\n    retention,\n    churn_driver\nfrom\n    f",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`"
        },
        "model.dbt_sipher.gcs_external_raw_ather_id_user": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_aws__ather_id__raw_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "gcs_external_raw_ather_id_user"
            ],
            "unique_id": "model.dbt_sipher.gcs_external_raw_ather_id_user",
            "raw_code": "{{ config(materialized='table') }}\n\nSELECT DISTINCT \n    user_id AS id \nFROM {{ ref('stg_aws__ather_id__raw_user') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/gcs_external_raw_ather_id_user.sql",
            "original_file_path": "models/core/gcs_external_raw_ather_id_user.sql",
            "name": "gcs_external_raw_ather_id_user",
            "alias": "gcs_external_raw_ather_id_user",
            "checksum": {
                "name": "sha256",
                "checksum": "71f84ddf2f980c4922e8c5b54c4074a6a26e3fee554ea7c785a9fe12a0898211"
            },
            "tags": [],
            "refs": [
                [
                    "stg_aws__ather_id__raw_user"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/gcs_external_raw_ather_id_user.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293861.6156113,
            "compiled_code": "\n\nSELECT DISTINCT \n    user_id AS id \nFROM `sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_user`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`gcs_external_raw_ather_id_user`"
        },
        "model.dbt_sipher.SIPHER_user_activeness_by_hour": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "SIPHER_user_activeness_by_hour"
            ],
            "unique_id": "model.dbt_sipher.SIPHER_user_activeness_by_hour",
            "raw_code": "{{config(materialized='table')}}\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_user_activeness_by_hour`",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/SIPHER_user_activeness_by_hour.sql",
            "original_file_path": "models/core/SIPHER_user_activeness_by_hour.sql",
            "name": "SIPHER_user_activeness_by_hour",
            "alias": "SIPHER_user_activeness_by_hour",
            "checksum": {
                "name": "sha256",
                "checksum": "411e06f8f2d73fc2ae014fd3fe2b7fe5aad55262bc7ebf27391563c63d6f2b4c"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "hour": {
                    "name": "hour",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_count": {
                    "name": "user_count",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "event_count": {
                    "name": "event_count",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/SIPHER_user_activeness_by_hour.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.1305828,
            "compiled_code": "\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_user_activeness_by_hour`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`SIPHER_user_activeness_by_hour`"
        },
        "model.dbt_sipher.SIPHER_overall": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "SIPHER_overall"
            ],
            "unique_id": "model.dbt_sipher.SIPHER_overall",
            "raw_code": "{{config(materialized='table')}}\n\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_overall`",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/SIPHER_overall.sql",
            "original_file_path": "models/core/SIPHER_overall.sql",
            "name": "SIPHER_overall",
            "alias": "SIPHER_overall",
            "checksum": {
                "name": "sha256",
                "checksum": "4305f44b806a0a12c3a064520f97d5cfe388ca6c8f0964a9d88947cbac25b18e"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "act_date": {
                    "name": "act_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_SIPHER_overall.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/SIPHER_overall.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.0807927,
            "compiled_code": "\n\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_overall`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`SIPHER_overall`"
        },
        "model.dbt_sipher.quest_retention_daily_hd": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "quest_retention_daily_hd"
            ],
            "unique_id": "model.dbt_sipher.quest_retention_daily_hd",
            "raw_code": "{{config(materialized='table')}}\n\nwith s1 as (\n    select\n        dt,\n        min_dt,\n        quest_userId,\n        TIMESTAMP_DIFF(dt, min_dt, day) as diff\n    from\n        `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest` o\n        left join (\n            select\n                cast(userId as int64) quest_userId,\n                min (dt) min_dt\n            from\n                `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest`\n            group by\n                1\n        ) s on s.quest_userId = cast(o.userId as int64)\n    where\n        true\n),\ns2 as (\n    select\n        quest_userId,\n        diff,\n        cast(FLOOR((diff - 0) / 1) as INT64) as fl\n    from\n        s1\n),\ns3 as (\n    select\n        concat('day ', fl) as period,\n        count(distinct quest_userId) as quest_userId,\n        '1' as a\n    from\n        s2\n    group by\n        1\n    order by\n        1\n),\ns4 as (\n    select\n        *,\n        LAG(quest_userId) OVER (\n            PARTITION BY a\n            order by\n                period asc\n        ) as lag\n    from\n        s3\n),\ns5 as (\n    select\n        quest_userId as quest_userIds\n    from\n        s4\n    where\n        period = 'day 0'\n)\nselect\n    period,\n    quest_userId,\n    round((quest_userId - lag) * 100 / lag, 2) as churn_rate,\n    round(quest_userId * 100 / quest_userIds, 2) as drop_\nfrom\n    s4,\n    s5\norder by\n    1",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/quest_retention_daily_hd.sql",
            "original_file_path": "models/core/quest_retention_daily_hd.sql",
            "name": "quest_retention_daily_hd",
            "alias": "quest_retention_daily_hd",
            "checksum": {
                "name": "sha256",
                "checksum": "458fd118a5942baca9616acdb794a14ce31d6d179785e90f0c9f84ca5b4d97f8"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "period": {
                    "name": "period",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_quest_retention_daily_hd.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/quest_retention_daily_hd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.1441941,
            "compiled_code": "\n\nwith s1 as (\n    select\n        dt,\n        min_dt,\n        quest_userId,\n        TIMESTAMP_DIFF(dt, min_dt, day) as diff\n    from\n        `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest` o\n        left join (\n            select\n                cast(userId as int64) quest_userId,\n                min (dt) min_dt\n            from\n                `sipher-data-platform.raw_loyalty_dashboard_gcs.gcs_external_raw_loyalty_log_claim_quest`\n            group by\n                1\n        ) s on s.quest_userId = cast(o.userId as int64)\n    where\n        true\n),\ns2 as (\n    select\n        quest_userId,\n        diff,\n        cast(FLOOR((diff - 0) / 1) as INT64) as fl\n    from\n        s1\n),\ns3 as (\n    select\n        concat('day ', fl) as period,\n        count(distinct quest_userId) as quest_userId,\n        '1' as a\n    from\n        s2\n    group by\n        1\n    order by\n        1\n),\ns4 as (\n    select\n        *,\n        LAG(quest_userId) OVER (\n            PARTITION BY a\n            order by\n                period asc\n        ) as lag\n    from\n        s3\n),\ns5 as (\n    select\n        quest_userId as quest_userIds\n    from\n        s4\n    where\n        period = 'day 0'\n)\nselect\n    period,\n    quest_userId,\n    round((quest_userId - lag) * 100 / lag, 2) as churn_rate,\n    round(quest_userId * 100 / quest_userIds, 2) as drop_\nfrom\n    s4,\n    s5\norder by\n    1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`quest_retention_daily_hd`"
        },
        "model.dbt_sipher.atherlabs_dashboard_MAU": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "atherlabs_dashboard_MAU"
            ],
            "unique_id": "model.dbt_sipher.atherlabs_dashboard_MAU",
            "raw_code": "{{config(materialized='table')}}\n\nSELECT\n  EXTRACT(MONTH FROM act_date) AS act_month,\n  COUNT(DISTINCT user_id) AS user_id_cnt,\n  COUNT(DISTINCT user_pseudo_id) AS user_pseudo_id_cnt,\n\nFROM `sipher-atherlabs-ga.analytics_341181237.events_*` \nWHERE event_name IN ('session_start', 'user_engagement', 'page_view')\nGROUP BY 1\nORDER By 1",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/atherlabs_dashboard_MAU.sql",
            "original_file_path": "models/core/atherlabs_dashboard_MAU.sql",
            "name": "atherlabs_dashboard_MAU",
            "alias": "atherlabs_dashboard_MAU",
            "checksum": {
                "name": "sha256",
                "checksum": "45d646595f6c4db1a2446bd2c0c046e90039925fd3b3b6eeeb9f14dade2a4d65"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "act_month": {
                    "name": "act_month",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_id_cnt": {
                    "name": "user_id_cnt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_pseudo_id_cnt": {
                    "name": "user_pseudo_id_cnt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_atherlabs_dashboard_MAU.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/atherlabs_dashboard_MAU.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.0710893,
            "compiled_code": "\n\nSELECT\n  EXTRACT(MONTH FROM act_date) AS act_month,\n  COUNT(DISTINCT user_id) AS user_id_cnt,\n  COUNT(DISTINCT user_pseudo_id) AS user_pseudo_id_cnt,\n\nFROM `sipher-atherlabs-ga.analytics_341181237.events_*` \nWHERE event_name IN ('session_start', 'user_engagement', 'page_view')\nGROUP BY 1\nORDER By 1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_MAU`"
        },
        "model.dbt_sipher.quest_dashboard_hd": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "quest_dashboard_hd"
            ],
            "unique_id": "model.dbt_sipher.quest_dashboard_hd",
            "raw_code": "{{config(materialized='table')}}\n\nselect * from `sipher-data-platform.sipher_presentation.quest_dashboard_hd`",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/quest_dashboard_hd.sql",
            "original_file_path": "models/core/quest_dashboard_hd.sql",
            "name": "quest_dashboard_hd",
            "alias": "quest_dashboard_hd",
            "checksum": {
                "name": "sha256",
                "checksum": "af67aa1253976208dfdc050c51c3ba2e7173b9d1863d9080a740c758c94d4387"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "event_time": {
                    "name": "event_time",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_id": {
                    "name": "user_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "quest_userId": {
                    "name": "quest_userId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "point_userid": {
                    "name": "point_userid",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_pseudo_id": {
                    "name": "user_pseudo_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "country": {
                    "name": "country",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "wallet_address": {
                    "name": "wallet_address",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_quest_dashboard_hd.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/quest_dashboard_hd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.04581,
            "compiled_code": "\n\nselect * from `sipher-data-platform.sipher_presentation.quest_dashboard_hd`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`quest_dashboard_hd`"
        },
        "model.dbt_sipher.SIPHER_top_sipherians": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "SIPHER_top_sipherians"
            ],
            "unique_id": "model.dbt_sipher.SIPHER_top_sipherians",
            "raw_code": "{{config(materialized='table')}}\n\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_top_sipherians`",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/SIPHER_top_sipherians.sql",
            "original_file_path": "models/core/SIPHER_top_sipherians.sql",
            "name": "SIPHER_top_sipherians",
            "alias": "SIPHER_top_sipherians",
            "checksum": {
                "name": "sha256",
                "checksum": "15ea473d66161244b974c46801fd887c6785c0d1282a499c2ac049ef48df775d"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "act_date": {
                    "name": "act_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_SIPHER_top_sipherians.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/SIPHER_top_sipherians.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.058955,
            "compiled_code": "\n\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_top_sipherians`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`SIPHER_top_sipherians`"
        },
        "model.dbt_sipher.SIPHER_token_holders_overview": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "SIPHER_token_holders_overview"
            ],
            "unique_id": "model.dbt_sipher.SIPHER_token_holders_overview",
            "raw_code": "{{config(materialized='table')}}\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_token_holders_overview`\nwhere user_address not in ('0x000000000000000000000000000000000000dead')",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/SIPHER_token_holders_overview.sql",
            "original_file_path": "models/core/SIPHER_token_holders_overview.sql",
            "name": "SIPHER_token_holders_overview",
            "alias": "SIPHER_token_holders_overview",
            "checksum": {
                "name": "sha256",
                "checksum": "540674d3cdf74250be8e5544345286c855ee7678a7e15f9ce54e044071a5978c"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "user_address": {
                    "name": "user_address",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_SIPHER_token_holders_overview.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/SIPHER_token_holders_overview.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.1428716,
            "compiled_code": "\n\nselect * from `sipher-data-platform.sipher_presentation.SIPHER_token_holders_overview`\nwhere user_address not in ('0x000000000000000000000000000000000000dead')",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`SIPHER_token_holders_overview`"
        },
        "model.dbt_sipher.pc_game_retention": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "pc_game_retention"
            ],
            "unique_id": "model.dbt_sipher.pc_game_retention",
            "raw_code": "{{ config(materialized='table') }}\n\nWITH users_with_cohorts AS (\n    SELECT\n        EXTRACT(\n            MONTH\n            FROM\n                CAST(event_time AS DATE)\n        ) AS cohort,\n        user_id,\n        event_time\n    FROM\n        `sipher-odyssey.pc_game_analytics.sipher_pc_event`\n),\nuser_activity AS (\n    SELECT\n        user_id,\n        event_time AS active_at\n    FROM\n        `sipher-odyssey.pc_game_analytics.sipher_pc_init`\n    WHERE\n        user_id IS NOT NULL\n),\nactivity_days_per_user AS (\n    SELECT\n        c.user_id,\n        cohort,\n        DATE_DIFF(a.active_at, c.event_time, DAY) AS activity_day\n    FROM\n        users_with_cohorts c\n        LEFT JOIN user_activity a ON c.user_id = a.user_id\n)\nSELECT\n    cohort,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 1 THEN user_id END)\n    ) AS D1,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 2 THEN user_id END)\n    ) AS D2,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 7 THEN user_id END)\n    ) AS D7,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 30 THEN user_id END)\n    ) AS D30\nFROM\n    activity_days_per_user\nGROUP BY\n    cohort",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/pc_game_retention.sql",
            "original_file_path": "models/core/pc_game_retention.sql",
            "name": "pc_game_retention",
            "alias": "pc_game_retention",
            "checksum": {
                "name": "sha256",
                "checksum": "89934768322322a87d3c73edda10ad009e7604ef0d63bf6e996471bb150f860f"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/pc_game_retention.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293861.6245542,
            "compiled_code": "\n\nWITH users_with_cohorts AS (\n    SELECT\n        EXTRACT(\n            MONTH\n            FROM\n                CAST(event_time AS DATE)\n        ) AS cohort,\n        user_id,\n        event_time\n    FROM\n        `sipher-odyssey.pc_game_analytics.sipher_pc_event`\n),\nuser_activity AS (\n    SELECT\n        user_id,\n        event_time AS active_at\n    FROM\n        `sipher-odyssey.pc_game_analytics.sipher_pc_init`\n    WHERE\n        user_id IS NOT NULL\n),\nactivity_days_per_user AS (\n    SELECT\n        c.user_id,\n        cohort,\n        DATE_DIFF(a.active_at, c.event_time, DAY) AS activity_day\n    FROM\n        users_with_cohorts c\n        LEFT JOIN user_activity a ON c.user_id = a.user_id\n)\nSELECT\n    cohort,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 1 THEN user_id END)\n    ) AS D1,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 2 THEN user_id END)\n    ) AS D2,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 7 THEN user_id END)\n    ) AS D7,\n    COUNT(\n        DISTINCT(CASE WHEN activity_day = 30 THEN user_id END)\n    ) AS D30\nFROM\n    activity_days_per_user\nGROUP BY\n    cohort",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`pc_game_retention`"
        },
        "model.dbt_sipher.atherlabs_dashboard_DAU": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "atherlabs_dashboard_DAU"
            ],
            "unique_id": "model.dbt_sipher.atherlabs_dashboard_DAU",
            "raw_code": "{{config(materialized='table')}}\n\n\nSELECT\n  act_date,\n  EXTRACT(MONTH FROM act_date) AS act_month,\n  COUNT(DISTINCT user_id) AS user_id_cnt,\n  COUNT(DISTINCT user_pseudo_id) AS user_pseudo_id_cnt,\n\nFROM `sipher-atherlabs-ga.analytics_341181237.events_*` \nWHERE event_name IN ('session_start', 'user_engagement', 'page_view')\nGROUP BY 1\nORDER By 1",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/atherlabs_dashboard_DAU.sql",
            "original_file_path": "models/core/atherlabs_dashboard_DAU.sql",
            "name": "atherlabs_dashboard_DAU",
            "alias": "atherlabs_dashboard_DAU",
            "checksum": {
                "name": "sha256",
                "checksum": "1491ca4e0b55f2edd327af32d71d3a2fd6efb66e6f72b4712bccb277008451a4"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "act_date": {
                    "name": "act_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "act_month": {
                    "name": "act_month",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_id_cnt": {
                    "name": "user_id_cnt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_pseudo_id_cnt": {
                    "name": "user_pseudo_id_cnt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_atherlabs_dashboard_DAU.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/atherlabs_dashboard_DAU.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.1184106,
            "compiled_code": "\n\n\nSELECT\n  act_date,\n  EXTRACT(MONTH FROM act_date) AS act_month,\n  COUNT(DISTINCT user_id) AS user_id_cnt,\n  COUNT(DISTINCT user_pseudo_id) AS user_pseudo_id_cnt,\n\nFROM `sipher-atherlabs-ga.analytics_341181237.events_*` \nWHERE event_name IN ('session_start', 'user_engagement', 'page_view')\nGROUP BY 1\nORDER By 1",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_DAU`"
        },
        "model.dbt_sipher.staking_rewards_total_claimed": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "staking_rewards_total_claimed"
            ],
            "unique_id": "model.dbt_sipher.staking_rewards_total_claimed",
            "raw_code": "{{config(materialized='table')}}\n\nselect * from `sipher-data-platform.sipher_presentation.staking_rewards_total_claimed`",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/staking_rewards_total_claimed.sql",
            "original_file_path": "models/core/staking_rewards_total_claimed.sql",
            "name": "staking_rewards_total_claimed",
            "alias": "staking_rewards_total_claimed",
            "checksum": {
                "name": "sha256",
                "checksum": "e6f5ab610f9b0423a6cdd3dfa7c3c6b8b544c12d39fe3c119161d2f0e2d090a9"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "platform": {
                    "name": "platform",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "first_date_of_month": {
                    "name": "first_date_of_month",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "wallet_address": {
                    "name": "wallet_address",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "total_claimed": {
                    "name": "total_claimed",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_staking_rewards_total_claimed.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/staking_rewards_total_claimed.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.1088583,
            "compiled_code": "\n\nselect * from `sipher-data-platform.sipher_presentation.staking_rewards_total_claimed`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`staking_rewards_total_claimed`"
        },
        "model.dbt_sipher.raw_loyalty_hd": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "raw_loyalty_hd"
            ],
            "unique_id": "model.dbt_sipher.raw_loyalty_hd",
            "raw_code": "{{ config(materialized='table') }}\n\n\nwith raw_loyalty_hd as (\n    select * \n    ,LENGTH(wallet_address) as cnt_char_wallet_address\n    from `sipher-data-platform.sipher_presentation.raw_loyalty_hd`\n    -- where wallet_address is not null\n    -- limit 1000\n)\n\n,final as (\n    select * from raw_loyalty_hd\n)\n\nselect * from final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/raw_loyalty_hd.sql",
            "original_file_path": "models/core/raw_loyalty_hd.sql",
            "name": "raw_loyalty_hd",
            "alias": "raw_loyalty_hd",
            "checksum": {
                "name": "sha256",
                "checksum": "b510d94b45993c463f15bf67aa714ae53d772003ccc243f5b83c6f9ff473674c"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "user_id": {
                    "name": "user_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "wallet_address": {
                    "name": "wallet_address",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_raw_loyalty_hd.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/raw_loyalty_hd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.124968,
            "compiled_code": "\n\n\nwith raw_loyalty_hd as (\n    select * \n    ,LENGTH(wallet_address) as cnt_char_wallet_address\n    from `sipher-data-platform.sipher_presentation.raw_loyalty_hd`\n    -- where wallet_address is not null\n    -- limit 1000\n)\n\n,final as (\n    select * from raw_loyalty_hd\n)\n\nselect * from final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`raw_loyalty_hd`"
        },
        "model.dbt_sipher.game_dashboard_hd": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "game_dashboard_hd"
            ],
            "unique_id": "model.dbt_sipher.game_dashboard_hd",
            "raw_code": "{{config(materialized='table')}}\n\nWITH nomean AS (\n    SELECT\n        'no' nm\n),\nraw as (\n    SELECT\n        e.user_id,\n        DATETIME(FORMAT_DATE('%F %T', e.event_time)) event_time,\n        DATE(FORMAT_DATE('%F', e.event_time)) event_date,\n        e.event_name,\n        e.event_parameter,\n        device_info.os AS device_os,\n        geo.country AS country\n    FROM\n        `sipher-odyssey.pc_game_analytics.sipher_pc_event` e\n        LEFT JOIN `sipher-odyssey.pc_game_analytics.sipher_pc_init` i ON e.user_id = i.user_id\n        AND DATE(e.event_time) = DATE(i.event_time)\n    WHERE\n        DATE(e.event_time) >= \"2022-01-01\"\n),\nraw1 as (\n    SELECT\n        DISTINCT user_id ,\n        -- session_id,\n        event_time,\n        event_date,\n        event_name,\n        event_parameter.key AS e_key,\n        event_parameter.value.string_value AS e_str_val,\n        COALESCE(\n            event_parameter.value.float_value,\n            event_parameter.value.int_value\n        ) AS value,\n        device_os,\n        country\n    FROM\n        raw e,\n        unnest (e.event_parameter) AS event_parameter\n    WHERE\n        DATE(event_time) >= \"2022-01-01\"\n),\nuser_info AS (\n    SELECT\n        DISTINCT user_id,\n        event_date,\n        device_os,\n        country\n    FROM\n        raw1\n),\nsession_start AS (\n    SELECT\n        DISTINCT user_id,\n        event_time,\n        event_date ,\n        -- event_name,\n        user_id || '-' || ROW_NUMBER() OVER(\n            PARTITION BY user_id\n            ORDER BY\n                event_time\n        ) || '-' || event_date AS session_id,\n        device_os,\n        country\n    FROM\n        raw\n    WHERE\n        true\n        AND event_name IN ('session_start')\n),\nsessions2 AS (\n    SELECT\n        *,\n        event_time AS session_start_at,\n        LEAD(event_time) OVER(\n            PARTITION BY user_id\n            ORDER BY\n                event_time\n        ) AS next_session_start_at\n    FROM\n        session_start\n),\nsession3 AS (\n    SELECT\n        s.user_id,\n        s.session_id,\n        r.event_name,\n        r.event_time\n    FROM\n        sessions2 s\n        LEFT JOIN raw1 r ON r.user_id = s.user_id\n        AND s.session_start_at <= r.event_time\n        AND (\n            r.event_time < s.next_session_start_at\n            OR next_session_start_at IS NULL\n        ) -- less but not equal\n),\nsession_durationtb AS (\n    SELECT\n        user_id,\n        event_date,\n        sum(duration) AS session_duration\n    FROM\n        (\n            SELECT\n                s.user_id,\n                s.session_id,\n                DATE(event_time) event_date,\n                TIMESTAMP_DIFF(MAX(s.event_time), MIN(s.event_time), MINUTE) AS duration\n            FROM\n                session3 s\n            GROUP BY\n                1,\n                2,\n                3\n            ORDER BY\n                1 DESC\n        )\n    GROUP BY\n        1,\n        2\n),\ngameplay AS (\n    SELECT\n        user_id,\n        event_time,\n        event_date,\n        event_name\n    FROM\n        raw\n    WHERE\n        true\n        AND event_name IN ('gameplay_start')\n),\nloading AS (\n    SELECT\n        user_id,\n        event_date,\n        COUNT(\n            DISTINCT CASE WHEN event_name = 'loading_start' THEN user_id END\n        ) loading_start,\n        COUNT(\n            DISTINCT CASE WHEN event_name = 'loading_completed' THEN user_id END\n        ) loading_completed,\n        COUNT(\n            DISTINCT CASE WHEN event_name = 'loading_failed' THEN user_id END\n        ) loading_failed\n    FROM\n        (\n            SELECT\n                DISTINCT user_id,\n                event_time,\n                event_date,\n                event_name\n            FROM\n                raw\n            WHERE\n                true\n                AND event_name IN (\n                    'loading_start',\n                    'loading_completed',\n                    'loading_failed'\n                )\n        )\n    GROUP BY\n        1,\n        2\n),\nfirst_active AS (\n    SELECT\n        user_id,\n        MIN(event_time) first_active_time\n    FROM\n        session_start\n    GROUP BY\n        1\n),\nraw_table AS (\n    SELECT\n        *,\n        CASE WHEN g_user_id IS NOT NULL THEN s.user_id END AS gameplay\n    FROM\n        (\n            SELECT\n                DISTINCT s.*\n            EXCEPT(event_time),\n                f.first_active_time,\n                g.user_id AS g_user_id\n            FROM\n                session_start s\n                LEFT JOIN first_active f ON s.user_id = f.user_id\n                AND DATE(s.event_date) = DATE(f.first_active_time)\n                LEFT JOIN gameplay g ON s.user_id = g.user_id\n                AND s.event_date = g.event_date --and s.event_time <= g.event_time\n            ORDER BY\n                1,\n                3\n        ) AS s\n),\nfinal AS (\n    SELECT\n        distinct r.event_date,(r.user_id) AS dau,(gameplay) AS gameplay,\n        first_active_time,\n        s.session_duration,\n        l.loading_start,\n        loading_completed,\n        loading_failed,\n        device_os,\n        country\n    FROM\n        raw_table r\n        LEFT JOIN session_durationtb s ON r.user_id = s.user_id\n        AND r.event_date = s.event_date\n        LEFT JOIN loading l ON r.user_id = l.user_id\n        AND r.event_date = l.event_date\n)\nSELECT\n    *\nFROM\n    final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/game_dashboard_hd.sql",
            "original_file_path": "models/core/game_dashboard_hd.sql",
            "name": "game_dashboard_hd",
            "alias": "game_dashboard_hd",
            "checksum": {
                "name": "sha256",
                "checksum": "e4a98c51badca4f1412e25c874a1bca1029c8596ac87b1cbffbbf0e2d5e85787"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "event_date": {
                    "name": "event_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_game_dashboard_hd.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/game_dashboard_hd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.0964189,
            "compiled_code": "\n\nWITH nomean AS (\n    SELECT\n        'no' nm\n),\nraw as (\n    SELECT\n        e.user_id,\n        DATETIME(FORMAT_DATE('%F %T', e.event_time)) event_time,\n        DATE(FORMAT_DATE('%F', e.event_time)) event_date,\n        e.event_name,\n        e.event_parameter,\n        device_info.os AS device_os,\n        geo.country AS country\n    FROM\n        `sipher-odyssey.pc_game_analytics.sipher_pc_event` e\n        LEFT JOIN `sipher-odyssey.pc_game_analytics.sipher_pc_init` i ON e.user_id = i.user_id\n        AND DATE(e.event_time) = DATE(i.event_time)\n    WHERE\n        DATE(e.event_time) >= \"2022-01-01\"\n),\nraw1 as (\n    SELECT\n        DISTINCT user_id ,\n        -- session_id,\n        event_time,\n        event_date,\n        event_name,\n        event_parameter.key AS e_key,\n        event_parameter.value.string_value AS e_str_val,\n        COALESCE(\n            event_parameter.value.float_value,\n            event_parameter.value.int_value\n        ) AS value,\n        device_os,\n        country\n    FROM\n        raw e,\n        unnest (e.event_parameter) AS event_parameter\n    WHERE\n        DATE(event_time) >= \"2022-01-01\"\n),\nuser_info AS (\n    SELECT\n        DISTINCT user_id,\n        event_date,\n        device_os,\n        country\n    FROM\n        raw1\n),\nsession_start AS (\n    SELECT\n        DISTINCT user_id,\n        event_time,\n        event_date ,\n        -- event_name,\n        user_id || '-' || ROW_NUMBER() OVER(\n            PARTITION BY user_id\n            ORDER BY\n                event_time\n        ) || '-' || event_date AS session_id,\n        device_os,\n        country\n    FROM\n        raw\n    WHERE\n        true\n        AND event_name IN ('session_start')\n),\nsessions2 AS (\n    SELECT\n        *,\n        event_time AS session_start_at,\n        LEAD(event_time) OVER(\n            PARTITION BY user_id\n            ORDER BY\n                event_time\n        ) AS next_session_start_at\n    FROM\n        session_start\n),\nsession3 AS (\n    SELECT\n        s.user_id,\n        s.session_id,\n        r.event_name,\n        r.event_time\n    FROM\n        sessions2 s\n        LEFT JOIN raw1 r ON r.user_id = s.user_id\n        AND s.session_start_at <= r.event_time\n        AND (\n            r.event_time < s.next_session_start_at\n            OR next_session_start_at IS NULL\n        ) -- less but not equal\n),\nsession_durationtb AS (\n    SELECT\n        user_id,\n        event_date,\n        sum(duration) AS session_duration\n    FROM\n        (\n            SELECT\n                s.user_id,\n                s.session_id,\n                DATE(event_time) event_date,\n                TIMESTAMP_DIFF(MAX(s.event_time), MIN(s.event_time), MINUTE) AS duration\n            FROM\n                session3 s\n            GROUP BY\n                1,\n                2,\n                3\n            ORDER BY\n                1 DESC\n        )\n    GROUP BY\n        1,\n        2\n),\ngameplay AS (\n    SELECT\n        user_id,\n        event_time,\n        event_date,\n        event_name\n    FROM\n        raw\n    WHERE\n        true\n        AND event_name IN ('gameplay_start')\n),\nloading AS (\n    SELECT\n        user_id,\n        event_date,\n        COUNT(\n            DISTINCT CASE WHEN event_name = 'loading_start' THEN user_id END\n        ) loading_start,\n        COUNT(\n            DISTINCT CASE WHEN event_name = 'loading_completed' THEN user_id END\n        ) loading_completed,\n        COUNT(\n            DISTINCT CASE WHEN event_name = 'loading_failed' THEN user_id END\n        ) loading_failed\n    FROM\n        (\n            SELECT\n                DISTINCT user_id,\n                event_time,\n                event_date,\n                event_name\n            FROM\n                raw\n            WHERE\n                true\n                AND event_name IN (\n                    'loading_start',\n                    'loading_completed',\n                    'loading_failed'\n                )\n        )\n    GROUP BY\n        1,\n        2\n),\nfirst_active AS (\n    SELECT\n        user_id,\n        MIN(event_time) first_active_time\n    FROM\n        session_start\n    GROUP BY\n        1\n),\nraw_table AS (\n    SELECT\n        *,\n        CASE WHEN g_user_id IS NOT NULL THEN s.user_id END AS gameplay\n    FROM\n        (\n            SELECT\n                DISTINCT s.*\n            EXCEPT(event_time),\n                f.first_active_time,\n                g.user_id AS g_user_id\n            FROM\n                session_start s\n                LEFT JOIN first_active f ON s.user_id = f.user_id\n                AND DATE(s.event_date) = DATE(f.first_active_time)\n                LEFT JOIN gameplay g ON s.user_id = g.user_id\n                AND s.event_date = g.event_date --and s.event_time <= g.event_time\n            ORDER BY\n                1,\n                3\n        ) AS s\n),\nfinal AS (\n    SELECT\n        distinct r.event_date,(r.user_id) AS dau,(gameplay) AS gameplay,\n        first_active_time,\n        s.session_duration,\n        l.loading_start,\n        loading_completed,\n        loading_failed,\n        device_os,\n        country\n    FROM\n        raw_table r\n        LEFT JOIN session_durationtb s ON r.user_id = s.user_id\n        AND r.event_date = s.event_date\n        LEFT JOIN loading l ON r.user_id = l.user_id\n        AND r.event_date = l.event_date\n)\nSELECT\n    *\nFROM\n    final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`game_dashboard_hd`"
        },
        "model.dbt_sipher.atherlabs_users": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.dim_ather_user__all",
                    "model.dbt_sipher.fct_sipher_other_token_owners"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "core",
                "atherlabs_users"
            ],
            "unique_id": "model.dbt_sipher.atherlabs_users",
            "raw_code": "{{config(materialized='table')}}\n\nWITH \n    dim_user AS\n  (SELECT\n    *\n  FROM {{ ref('dim_ather_user__all')}}\n  )\n\n  ,data_atherlabs AS \n  (\n    SELECT DISTINCT\n      user_id AS ather_id,\n      LOWER(wallet_address) AS wallet_address,\n      email AS email,\n      -- name AS user_name\n    FROM dim_user, UNNEST(email) AS email\n  )\n\n    ,data_token AS \n    (\n        SELECT \n            *\n        FROM `sipher-data-platform.sipher_ethereum.sipher_token_transfers_*`\n        UNION ALL \n        SELECT \n            *\n        FROM `sipher-data-platform.sipher_ethereum.today_sipher_token_transfers`\n    )\n\n    ,token_pre_results AS \n    (\n        SELECT\n            from_address AS address,\n            token_address,\n            token_name,\n            -CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n        UNION ALL\n        SELECT\n            to_address AS address,\n            token_address,\n            token_name,\n            CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n    )\n  \n  ,token_results AS\n  (\n      SELECT\n        LOWER(address) AS wallet_address,\n        -- token_name,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher inu\" THEN sipher_value\n            ELSE 0\n            END) AS INU_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher neko\" THEN sipher_value\n            ELSE 0\n            END) AS NEKO_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher token\" THEN sipher_value\n            ELSE 0\n            END) AS TOKEN_TOTAL\n    FROM token_pre_results\n    GROUP BY 1 \n  )\n\n  , other_token_results AS(\n    SELECT *\n    FROM {{ ref('fct_sipher_other_token_owners')}}\n  )\n\n  SELECT\n    CURRENT_DATE() AS act_date,\n    ather_id,\n    email,\n    wallet_address,\n    INU_TOTAL,\n    NEKO_TOTAL,\n    (INU_TOTAL + NEKO_TOTAL) AS GENEIS_NFT_TOTAL,\n    TOKEN_TOTAL,\n\n    lootbox_quantity,\n    spaceship_quantity,\n    spaceship_part_quantity,\n    lootbox_onchain_quantity,\n    spaceship_onchain_quantity,\n    spaceship_part_onchain_quantity,\n    sculpture_onchain_quantity,\n    (lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS total_other_nft, \n    (lootbox_onchain_quantity + spaceship_onchain_quantity + spaceship_part_onchain_quantity + sculpture_onchain_quantity) AS total_other_onchain_nft, \n    (INU_TOTAL + NEKO_TOTAL + lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS TOTAL_NFT\n  FROM data_atherlabs\n  FULL OUTER JOIN token_results USING (wallet_address)\n  FULL OUTER JOIN other_token_results USING (wallet_address)\n  ORDER BY ather_id DESC",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "core/atherlabs_users.sql",
            "original_file_path": "models/core/atherlabs_users.sql",
            "name": "atherlabs_users",
            "alias": "atherlabs_users",
            "checksum": {
                "name": "sha256",
                "checksum": "3dca1429e654c0bd8256e05ac83d1fb31a5d25459916a88c3bdf1cf197cc828e"
            },
            "tags": [],
            "refs": [
                [
                    "dim_ather_user__all"
                ],
                [
                    "fct_sipher_other_token_owners"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "act_date": {
                    "name": "act_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "wallet_address": {
                    "name": "wallet_address",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/core/schema_atherlabs_users.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/core/atherlabs_users.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.0618224,
            "compiled_code": "\n\nWITH \n    dim_user AS\n  (SELECT\n    *\n  FROM `sipher-data-testing`.`raw_aws_atherlabs`.`dim_ather_user__all`\n  )\n\n  ,data_atherlabs AS \n  (\n    SELECT DISTINCT\n      user_id AS ather_id,\n      LOWER(wallet_address) AS wallet_address,\n      email AS email,\n      -- name AS user_name\n    FROM dim_user, UNNEST(email) AS email\n  )\n\n    ,data_token AS \n    (\n        SELECT \n            *\n        FROM `sipher-data-platform.sipher_ethereum.sipher_token_transfers_*`\n        UNION ALL \n        SELECT \n            *\n        FROM `sipher-data-platform.sipher_ethereum.today_sipher_token_transfers`\n    )\n\n    ,token_pre_results AS \n    (\n        SELECT\n            from_address AS address,\n            token_address,\n            token_name,\n            -CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n        UNION ALL\n        SELECT\n            to_address AS address,\n            token_address,\n            token_name,\n            CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n    )\n  \n  ,token_results AS\n  (\n      SELECT\n        LOWER(address) AS wallet_address,\n        -- token_name,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher inu\" THEN sipher_value\n            ELSE 0\n            END) AS INU_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher neko\" THEN sipher_value\n            ELSE 0\n            END) AS NEKO_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher token\" THEN sipher_value\n            ELSE 0\n            END) AS TOKEN_TOTAL\n    FROM token_pre_results\n    GROUP BY 1 \n  )\n\n  , other_token_results AS(\n    SELECT *\n    FROM `sipher-data-testing`.`sipher_presentation`.`fct_sipher_other_token_owners`\n  )\n\n  SELECT\n    CURRENT_DATE() AS act_date,\n    ather_id,\n    email,\n    wallet_address,\n    INU_TOTAL,\n    NEKO_TOTAL,\n    (INU_TOTAL + NEKO_TOTAL) AS GENEIS_NFT_TOTAL,\n    TOKEN_TOTAL,\n\n    lootbox_quantity,\n    spaceship_quantity,\n    spaceship_part_quantity,\n    lootbox_onchain_quantity,\n    spaceship_onchain_quantity,\n    spaceship_part_onchain_quantity,\n    sculpture_onchain_quantity,\n    (lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS total_other_nft, \n    (lootbox_onchain_quantity + spaceship_onchain_quantity + spaceship_part_onchain_quantity + sculpture_onchain_quantity) AS total_other_onchain_nft, \n    (INU_TOTAL + NEKO_TOTAL + lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS TOTAL_NFT\n  FROM data_atherlabs\n  FULL OUTER JOIN token_results USING (wallet_address)\n  FULL OUTER JOIN other_token_results USING (wallet_address)\n  ORDER BY ather_id DESC",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`atherlabs_users`"
        },
        "model.dbt_sipher.fct_salvage": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_meta_game",
                "fct_salvage"
            ],
            "unique_id": "model.dbt_sipher.fct_salvage",
            "raw_code": "--\n\nCREATE OR REPLACE TABLE `sipher-data-platform.reporting_game_meta.fct_salvage`\nPARTITION BY event_timestamp\nCLUSTER BY day_diff\nAS\n\nWITH raw AS\n(\n\tSELECT  \n        event_timestamp, \n        user_id, \n        event_name, \n        event_params, \n        app_info,\n        user_pseudo_id \n\tFROM {{ ref('stg_firebase__sipher_odyssey_events_all_time') }}\n\tWHERE true  \n        AND _TABLE_SUFFIX > '0901'  \n\t    AND event_name IN ('salvage_action')\n) \n\n, fct_user_login AS\n(\n    SELECT DISTINCT \n        user_id,\n        day0_date_tzutc,\n        build_number,\n        app_version,\n        email,\n        user_name,\n        current_build_timestamp,\n        next_build_timestamp,\n        pack_name,\n        Date_Added,\n        a.group,\n    FROM `sipher-data-platform.reporting_game_level_design.fct_user_login` a\n\n) \n \n, salvage_raw AS\n(\n\tSELECT DISTINCT  \n\t    event_timestamp\n\t    ,user_pseudo_id\n\t    ,raw.user_id AS user_id\n        ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'reward') AS reward \n        ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'sub_screen') AS screen \n\t    ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'item_type') AS item_type  \n \t    ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'instance_id') AS instance_id\n\t    ,(SELECT value.double_value FROM UNNEST (event_params) WHERE key = 'stackable') AS stackable\n\tFROM raw \n\tWHERE event_name IN ('salvage_action')\n\tORDER BY event_timestamp DESC, user_pseudo_id \n)\n\n, reformatjson AS\n( \n    SELECT \n        * EXCEPT(screen,reward),\n        REPLACE(reward, 'Chips', '\"Chips\"')reward,\n--b1 th\u00eam \" v\u00e0o sau { v\u00e0 tr\u01b0\u1edbc }\n--b2 th\u00eam \" v\u00e0o tr\u01b0\u1edbc v\u00e0 sau :\n--b3 th\u00eam \" v\u00e0o tr\u01b0\u1edbc v\u00e0 sau , \n        REPLACE(REPLACE(REPLACE(REPLACE(screen, '{', '{\"'), '}', '\"}'), ': ', '\":\"'), ', ', '\",\"')screen,\n\n    FROM salvage_raw\n)\n\n,extract_json AS \n(\n    SELECT DISTINCT \n        * EXCEPT(reward, screen),\n        CAST(JSON_EXTRACT_SCALAR(reward, '$.Chips') AS INT64) Chips,\n        JSON_EXTRACT_SCALAR(screen, '$.screen')screen,\n        JSON_EXTRACT_SCALAR(screen, '$.tab')tab,\n    FROM\n    reformatjson\n    )\n\n\n,mapp_dim_user AS \n(\n    SELECT \n        DATE(TIMESTAMP_MICROS(event_timestamp))event_timestamp,\n        e.*EXCEPT(event_timestamp), \n        c.*EXCEPT(user_id, current_build_timestamp, next_build_timestamp),\n        DATE_DIFF(DATE(TIMESTAMP_MICROS(event_timestamp)), DATE(day0_date_tzutc), DAY) day_diff,\n    FROM extract_json e \n    JOIN fct_user_login c \n  \tON e.user_id = c.user_id AND e.event_timestamp > c.current_build_timestamp AND e.event_timestamp < COALESCE(c.next_build_timestamp, 7258118400000000)\n\n)\n\nSELECT * FROM mapp_dim_user",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_meta_game/fct_salvage.sql",
            "original_file_path": "models/marts/sipher_odyssey_meta_game/fct_salvage.sql",
            "name": "fct_salvage",
            "alias": "fct_salvage",
            "checksum": {
                "name": "sha256",
                "checksum": "cacf60fefdf245cc71fc86e9ea00d59a22afa4528d7f2ca29287392662c5c3d1"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__sipher_odyssey_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_meta_game/fct_salvage.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705293861.632183,
            "compiled_code": "--\n\nCREATE OR REPLACE TABLE `sipher-data-platform.reporting_game_meta.fct_salvage`\nPARTITION BY event_timestamp\nCLUSTER BY day_diff\nAS\n\nWITH raw AS\n(\n\tSELECT  \n        event_timestamp, \n        user_id, \n        event_name, \n        event_params, \n        app_info,\n        user_pseudo_id \n\tFROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`\n\tWHERE true  \n        AND _TABLE_SUFFIX > '0901'  \n\t    AND event_name IN ('salvage_action')\n) \n\n, fct_user_login AS\n(\n    SELECT DISTINCT \n        user_id,\n        day0_date_tzutc,\n        build_number,\n        app_version,\n        email,\n        user_name,\n        current_build_timestamp,\n        next_build_timestamp,\n        pack_name,\n        Date_Added,\n        a.group,\n    FROM `sipher-data-platform.reporting_game_level_design.fct_user_login` a\n\n) \n \n, salvage_raw AS\n(\n\tSELECT DISTINCT  \n\t    event_timestamp\n\t    ,user_pseudo_id\n\t    ,raw.user_id AS user_id\n        ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'reward') AS reward \n        ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'sub_screen') AS screen \n\t    ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'item_type') AS item_type  \n \t    ,(SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'instance_id') AS instance_id\n\t    ,(SELECT value.double_value FROM UNNEST (event_params) WHERE key = 'stackable') AS stackable\n\tFROM raw \n\tWHERE event_name IN ('salvage_action')\n\tORDER BY event_timestamp DESC, user_pseudo_id \n)\n\n, reformatjson AS\n( \n    SELECT \n        * EXCEPT(screen,reward),\n        REPLACE(reward, 'Chips', '\"Chips\"')reward,\n--b1 th\u00eam \" v\u00e0o sau { v\u00e0 tr\u01b0\u1edbc }\n--b2 th\u00eam \" v\u00e0o tr\u01b0\u1edbc v\u00e0 sau :\n--b3 th\u00eam \" v\u00e0o tr\u01b0\u1edbc v\u00e0 sau , \n        REPLACE(REPLACE(REPLACE(REPLACE(screen, '{', '{\"'), '}', '\"}'), ': ', '\":\"'), ', ', '\",\"')screen,\n\n    FROM salvage_raw\n)\n\n,extract_json AS \n(\n    SELECT DISTINCT \n        * EXCEPT(reward, screen),\n        CAST(JSON_EXTRACT_SCALAR(reward, '$.Chips') AS INT64) Chips,\n        JSON_EXTRACT_SCALAR(screen, '$.screen')screen,\n        JSON_EXTRACT_SCALAR(screen, '$.tab')tab,\n    FROM\n    reformatjson\n    )\n\n\n,mapp_dim_user AS \n(\n    SELECT \n        DATE(TIMESTAMP_MICROS(event_timestamp))event_timestamp,\n        e.*EXCEPT(event_timestamp), \n        c.*EXCEPT(user_id, current_build_timestamp, next_build_timestamp),\n        DATE_DIFF(DATE(TIMESTAMP_MICROS(event_timestamp)), DATE(day0_date_tzutc), DAY) day_diff,\n    FROM extract_json e \n    JOIN fct_user_login c \n  \tON e.user_id = c.user_id AND e.event_timestamp > c.current_build_timestamp AND e.event_timestamp < COALESCE(c.next_build_timestamp, 7258118400000000)\n\n)\n\nSELECT * FROM mapp_dim_user",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`fct_salvage`"
        },
        "model.dbt_sipher.dim_ather_user__wallet": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_aws__ather_id__raw_user",
                    "model.dbt_sipher.stg_aws__ather_id__raw_wallet"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_atherlabs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_atherlabs",
            "fqn": [
                "dbt_sipher",
                "marts",
                "atherlabs_core",
                "dim_ather_user__wallet"
            ],
            "unique_id": "model.dbt_sipher.dim_ather_user__wallet",
            "raw_code": "{{- config(\n    materialized = 'table',\n    schema = 'raw_aws_atherlabs',\n)-}}\n\nSELECT\n    user.user_id AS user_id,\n    wallet.user_id AS wallet_user_id,\n    wallet_address,\n    user.cognito_sub AS user_cognito_sub,\n    wallet.cognito_sub AS wallet_cognito_sub,\n    user.created_at AS user_created_at,\n    user.updated_at AS user_updated_at,\n    wallet.created_at AS wallet_created_at,\n    wallet.updated_at AS wallet_updated_at,\n    subscribe_email,\n    avatar_image,\n    email,\n    name,\n    is_verified,\n    is_banned,\n    bio,\n    banner_image,\n    MAX(COALESCE(user.snapshot_date_tzutc, wallet.snapshot_date_tzutc)) AS partition_date\nFROM\n    {{ ref('stg_aws__ather_id__raw_user') }} AS user\n    LEFT JOIN {{ ref('stg_aws__ather_id__raw_wallet') }} AS wallet ON user.user_id = wallet.user_id\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/atherlabs_core/dim_ather_user__wallet.sql",
            "original_file_path": "models/marts/atherlabs_core/dim_ather_user__wallet.sql",
            "name": "dim_ather_user__wallet",
            "alias": "dim_ather_user__wallet",
            "checksum": {
                "name": "sha256",
                "checksum": "0d8bd1ad523be108b3d77e2aea331b0645d2974a32ae1637468afd77bae1e5b4"
            },
            "tags": [],
            "refs": [
                [
                    "stg_aws__ather_id__raw_user"
                ],
                [
                    "stg_aws__ather_id__raw_wallet"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/atherlabs_core/dim_ather_user__wallet.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "raw_aws_atherlabs"
            },
            "created_at": 1705293861.633351,
            "compiled_code": "SELECT\n    user.user_id AS user_id,\n    wallet.user_id AS wallet_user_id,\n    wallet_address,\n    user.cognito_sub AS user_cognito_sub,\n    wallet.cognito_sub AS wallet_cognito_sub,\n    user.created_at AS user_created_at,\n    user.updated_at AS user_updated_at,\n    wallet.created_at AS wallet_created_at,\n    wallet.updated_at AS wallet_updated_at,\n    subscribe_email,\n    avatar_image,\n    email,\n    name,\n    is_verified,\n    is_banned,\n    bio,\n    banner_image,\n    MAX(COALESCE(user.snapshot_date_tzutc, wallet.snapshot_date_tzutc)) AS partition_date\nFROM\n    `sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_user` AS user\n    LEFT JOIN `sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_wallet` AS wallet ON user.user_id = wallet.user_id\nGROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_atherlabs`.`dim_ather_user__wallet`"
        },
        "model.dbt_sipher.dim_ather_user__all": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_aws__ather_id__raw_user",
                    "model.dbt_sipher.stg_aws__ather_id__raw_wallet",
                    "model.dbt_sipher.stg_aws__ather_id__raw_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "raw_aws_atherlabs",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "raw_aws_atherlabs",
            "fqn": [
                "dbt_sipher",
                "marts",
                "atherlabs_core",
                "dim_ather_user__all"
            ],
            "unique_id": "model.dbt_sipher.dim_ather_user__all",
            "raw_code": "{{- config(\n    materialized = 'table',\n    schema = 'raw_aws_atherlabs',\n)-}} \n\nWITH \nraw_user_wallet AS(    \n    SELECT\n        user.user_id AS user_id,\n        wallet.user_id AS wallet_user_id,\n        wallet_address,\n        user.cognito_sub AS user_cognito_sub,\n        wallet.cognito_sub AS wallet_cognito_sub,\n        user.created_at AS user_created_at,\n        user.updated_at AS user_updated_at,\n        wallet.created_at AS wallet_created_at,\n        wallet.updated_at AS wallet_updated_at,\n        subscribe_email,\n        avatar_image,\n        email,\n        name,\n        is_verified,\n        is_banned,\n        bio,\n        banner_image,\n        MAX(COALESCE(user.snapshot_date_tzutc, wallet.snapshot_date_tzutc)) AS partition_date\n    FROM\n        {{ ref('stg_aws__ather_id__raw_user') }} AS user\n        LEFT JOIN {{ ref('stg_aws__ather_id__raw_wallet') }} AS wallet ON user.user_id = wallet.user_id\n    GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n),\nuser_wallet AS(\n    SELECT\n        DISTINCT COALESCE(user_id, wallet_user_id) AS user_id,\n        LOWER(wallet_address) AS wallet_address,\n        email,\n        name\n    FROM\n        raw_user_wallet\n),\ncognito_raw AS(\n    SELECT\n        user_id,\n        SPLIT(connected_wallets, ',') AS wallets,\n        email,\n        username,\n        user_status\n    FROM\n        {{ ref('stg_aws__ather_id__raw_cognito') }}\n),\ncognito_user AS(\n    SELECT\n        DISTINCT user_id,\n        CASE WHEN wallets = 'nan' THEN NULL ELSE LOWER(wallets) END AS wallet_address,\n        email,\n        username,\n        user_status\n    FROM\n        cognito_raw,\n        UNNEST(wallets) wallets\n),\nunion_all AS(\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT user_id,\n                wallet_address,\n            FROM\n                user_wallet\n            UNION ALL\n            SELECT\n                DISTINCT user_id,\n                wallet_address,\n            FROM\n                cognito_user\n        )\n    ORDER BY\n        user_id\n),\nuser_all AS(\n    SELECT\n        user_id,\n        COALESCE(\n            ua.wallet_address,\n            uw.wallet_address,\n            cu.wallet_address\n        ) AS wallet_address,\n        ARRAY_AGG(\n            DISTINCT COALESCE(uw.email, cu.email) IGNORE NULLS\n        ) AS email,\n        ARRAY_AGG(DISTINCT name IGNORE NULLS) AS name,\n        ARRAY_AGG(DISTINCT username IGNORE NULLS) AS cognito_user_name,\n        user_status\n    FROM\n        union_all AS ua\n        LEFT JOIN user_wallet AS uw USING(user_id)\n        LEFT JOIN cognito_user AS cu USING(user_id)\n    GROUP BY\n        1,\n        2,\n        6\n    ORDER BY\n        user_id\n)\nSELECT\n    *\nFROM\n    user_all",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/atherlabs_core/dim_ather_user__all.sql",
            "original_file_path": "models/marts/atherlabs_core/dim_ather_user__all.sql",
            "name": "dim_ather_user__all",
            "alias": "dim_ather_user__all",
            "checksum": {
                "name": "sha256",
                "checksum": "1a86399060d22ede8ee6b1ca0f5d7dbf136036f7522713d1fe74a03cc526c1da"
            },
            "tags": [],
            "refs": [
                [
                    "stg_aws__ather_id__raw_user"
                ],
                [
                    "stg_aws__ather_id__raw_wallet"
                ],
                [
                    "stg_aws__ather_id__raw_cognito"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/atherlabs_core/dim_ather_user__all.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "raw_aws_atherlabs"
            },
            "created_at": 1705293861.6376312,
            "compiled_code": "WITH \nraw_user_wallet AS(    \n    SELECT\n        user.user_id AS user_id,\n        wallet.user_id AS wallet_user_id,\n        wallet_address,\n        user.cognito_sub AS user_cognito_sub,\n        wallet.cognito_sub AS wallet_cognito_sub,\n        user.created_at AS user_created_at,\n        user.updated_at AS user_updated_at,\n        wallet.created_at AS wallet_created_at,\n        wallet.updated_at AS wallet_updated_at,\n        subscribe_email,\n        avatar_image,\n        email,\n        name,\n        is_verified,\n        is_banned,\n        bio,\n        banner_image,\n        MAX(COALESCE(user.snapshot_date_tzutc, wallet.snapshot_date_tzutc)) AS partition_date\n    FROM\n        `sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_user` AS user\n        LEFT JOIN `sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_wallet` AS wallet ON user.user_id = wallet.user_id\n    GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n),\nuser_wallet AS(\n    SELECT\n        DISTINCT COALESCE(user_id, wallet_user_id) AS user_id,\n        LOWER(wallet_address) AS wallet_address,\n        email,\n        name\n    FROM\n        raw_user_wallet\n),\ncognito_raw AS(\n    SELECT\n        user_id,\n        SPLIT(connected_wallets, ',') AS wallets,\n        email,\n        username,\n        user_status\n    FROM\n        `sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_cognito`\n),\ncognito_user AS(\n    SELECT\n        DISTINCT user_id,\n        CASE WHEN wallets = 'nan' THEN NULL ELSE LOWER(wallets) END AS wallet_address,\n        email,\n        username,\n        user_status\n    FROM\n        cognito_raw,\n        UNNEST(wallets) wallets\n),\nunion_all AS(\n    SELECT\n        DISTINCT *\n    FROM\n        (\n            SELECT\n                DISTINCT user_id,\n                wallet_address,\n            FROM\n                user_wallet\n            UNION ALL\n            SELECT\n                DISTINCT user_id,\n                wallet_address,\n            FROM\n                cognito_user\n        )\n    ORDER BY\n        user_id\n),\nuser_all AS(\n    SELECT\n        user_id,\n        COALESCE(\n            ua.wallet_address,\n            uw.wallet_address,\n            cu.wallet_address\n        ) AS wallet_address,\n        ARRAY_AGG(\n            DISTINCT COALESCE(uw.email, cu.email) IGNORE NULLS\n        ) AS email,\n        ARRAY_AGG(DISTINCT name IGNORE NULLS) AS name,\n        ARRAY_AGG(DISTINCT username IGNORE NULLS) AS cognito_user_name,\n        user_status\n    FROM\n        union_all AS ua\n        LEFT JOIN user_wallet AS uw USING(user_id)\n        LEFT JOIN cognito_user AS cu USING(user_id)\n    GROUP BY\n        1,\n        2,\n        6\n    ORDER BY\n        user_id\n)\nSELECT\n    *\nFROM\n    user_all",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`raw_aws_atherlabs`.`dim_ather_user__all`"
        },
        "model.dbt_sipher.fct_artventure_user_events": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_event_params"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__artventure_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "fct_artventure_user_events"
            ],
            "unique_id": "model.dbt_sipher.fct_artventure_user_events",
            "raw_code": "{{- config(\n    materialized='table'\n) -}}\n\nWITH raw AS (\n    SELECT\n        PARSE_DATE('%Y%m%d', event_date) AS date,\n        TIMESTAMP_MICROS(event_timestamp) AS timestamp,\n        user_id,\n        user_pseudo_id,\n        event_name,\n        event_params\n    FROM {{ ref('stg_firebase__artventure_events_all_time') }}\n    WHERE event_name NOT IN (\n        'task_registered',\n        'task_executing',\n        'task_executed'\n    )\n)\n,user_events AS (\n    SELECT\n        *,\n        CASE WHEN \n            {{ get_string_value_from_event_params(key=\"page_location\") }} like '%alpha%'\n            OR REGEXP_CONTAINS({{ get_string_value_from_event_params(key=\"page_location\") }}, \n                r\"https://artventure.ai/ai-recipes/[^/]+\")\n            THEN 'alpha' ELSE 'internal'\n        END AS version\n    FROM raw\n)\n\nSELECT * FROM user_events",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/artventure/fct_artventure_user_events.sql",
            "original_file_path": "models/marts/artventure/fct_artventure_user_events.sql",
            "name": "fct_artventure_user_events",
            "alias": "fct_artventure_user_events",
            "checksum": {
                "name": "sha256",
                "checksum": "15e9f3caa096e944e5bc5a43841154a32cb54bb8a5b5ee16f3594b37b80751b1"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__artventure_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "user_id": {
                    "name": "user_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/marts/artventure/schema_artventure.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/fct_artventure_user_events.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.14912,
            "compiled_code": "WITH raw AS (\n    SELECT\n        PARSE_DATE('%Y%m%d', event_date) AS date,\n        TIMESTAMP_MICROS(event_timestamp) AS timestamp,\n        user_id,\n        user_pseudo_id,\n        event_name,\n        event_params\n    FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__artventure_events_all_time`\n    WHERE event_name NOT IN (\n        'task_registered',\n        'task_executing',\n        'task_executed'\n    )\n)\n,user_events AS (\n    SELECT\n        *,\n        CASE WHEN \n            (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"page_location\") like '%alpha%'\n            OR REGEXP_CONTAINS((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"page_location\"), \n                r\"https://artventure.ai/ai-recipes/[^/]+\")\n            THEN 'alpha' ELSE 'internal'\n        END AS version\n    FROM raw\n)\n\nSELECT * FROM user_events",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`fct_artventure_user_events`"
        },
        "model.dbt_sipher.dim_artventure_user": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.int_artventure_user_devices"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "dim_artventure_user"
            ],
            "unique_id": "model.dbt_sipher.dim_artventure_user",
            "raw_code": "{{- config(\n    materialized='table',\n) -}}\n\nWITH devices AS (\n    SELECT user_id,\n        user_email,\n        ARRAY_AGG(\n            STRUCT(\n                last_used_at,\n                user_pseudo_ids,\n                category,\n                mobile_brand_name,\n                mobile_model_name,\n                mobile_marketing_name,\n                mobile_os_hardware_model,\n                operating_system,\n                operating_system_version,\n                browser,\n                browser_version,\n                web_info_browser,\n                web_info_browser_version,\n                web_info_hostname\n            )\n        ) AS device\n    FROM {{ ref('int_artventure_user_devices') }}\n    GROUP BY user_id, user_email\n)\nSELECT *\nFROM devices",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/artventure/dim_artventure_user.sql",
            "original_file_path": "models/marts/artventure/dim_artventure_user.sql",
            "name": "dim_artventure_user",
            "alias": "dim_artventure_user",
            "checksum": {
                "name": "sha256",
                "checksum": "0d5ba99886373a03439d06178573ac97c607dc5fe10d8e5d7b212209c94087f7"
            },
            "tags": [],
            "refs": [
                [
                    "int_artventure_user_devices"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "user_id": {
                    "name": "user_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_email": {
                    "name": "user_email",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/marts/artventure/schema_artventure.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/dim_artventure_user.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.1478262,
            "compiled_code": "WITH devices AS (\n    SELECT user_id,\n        user_email,\n        ARRAY_AGG(\n            STRUCT(\n                last_used_at,\n                user_pseudo_ids,\n                category,\n                mobile_brand_name,\n                mobile_model_name,\n                mobile_marketing_name,\n                mobile_os_hardware_model,\n                operating_system,\n                operating_system_version,\n                browser,\n                browser_version,\n                web_info_browser,\n                web_info_browser_version,\n                web_info_hostname\n            )\n        ) AS device\n    FROM `sipher-data-testing`.`tmp_dbt`.`int_artventure_user_devices`\n    GROUP BY user_id, user_email\n)\nSELECT *\nFROM devices",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`dim_artventure_user`"
        },
        "model.dbt_sipher.mart_artventure_task": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.fct_artventure_task_events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "mart_artventure_task",
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "date",
                    "data_type": "date",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "mart_artventure_task"
            ],
            "unique_id": "model.dbt_sipher.mart_artventure_task",
            "raw_code": "{{- config(\n    alias='mart_artventure_task',\n    materialized='table',\n    partition_by={\n      \"field\": \"date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n    },\n)-}}\n\n{%- set statuses = [\n    'task_registered',\n    'task_executing',\n    'task_executed',\n] -%}\n\n\nWITH fact AS (\n    SELECT\n        *\n    FROM {{ ref(\"fct_artventure_task_events\") }}\n)\n,reporting AS (\n    SELECT\n        date,\n        {%- for status in statuses -%}\n            SUM(CASE WHEN status = '{{ status }}' THEN 1 ELSE 0 END) AS {{ status }},\n        {% endfor -%}\n        AVG(tasks_in_queue) / 1000 AS avg_tasks_in_queue,\n        AVG(queue_duration) / 1000 AS avg_queue_duration,\n        AVG(runpod_queue_duration) / 1000 AS avg_runpod_queue_duration,\n        AVG(execution_duration) / 1000 AS avg_execution_duration\n    FROM fact\n    GROUP BY date\n)\n\nSELECT * FROM reporting",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/artventure/mart_artventure_task.sql",
            "original_file_path": "models/marts/artventure/mart_artventure_task.sql",
            "name": "mart_artventure_task",
            "alias": "mart_artventure_task",
            "checksum": {
                "name": "sha256",
                "checksum": "025a6fc2e9d788c79d116207e830908df8a3c3ca358c2534b3fcf2e8172de85d"
            },
            "tags": [],
            "refs": [
                [
                    "fct_artventure_task_events"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/mart_artventure_task.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "mart_artventure_task",
                "materialized": "table",
                "partition_by": {
                    "field": "date",
                    "data_type": "date",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.6486728,
            "compiled_code": "WITH fact AS (\n    SELECT\n        *\n    FROM `sipher-data-testing`.`tmp_dbt`.`fct_artventure_task_events`\n)\n,reporting AS (\n    SELECT\n        date,SUM(CASE WHEN status = 'task_registered' THEN 1 ELSE 0 END) AS task_registered,\n        SUM(CASE WHEN status = 'task_executing' THEN 1 ELSE 0 END) AS task_executing,\n        SUM(CASE WHEN status = 'task_executed' THEN 1 ELSE 0 END) AS task_executed,\n        AVG(tasks_in_queue) / 1000 AS avg_tasks_in_queue,\n        AVG(queue_duration) / 1000 AS avg_queue_duration,\n        AVG(runpod_queue_duration) / 1000 AS avg_runpod_queue_duration,\n        AVG(execution_duration) / 1000 AS avg_execution_duration\n    FROM fact\n    GROUP BY date\n)\n\nSELECT * FROM reporting",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`mart_artventure_task`"
        },
        "model.dbt_sipher.mart_artventure_recipe__usage": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_event_params",
                    "macro.dbt_sipher.get_int_value_from_event_params",
                    "macro.dbt_sipher.get_double_value_from_event_params"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_artventure_user_events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "mart_artventure_recipe__usage",
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "date",
                    "data_type": "date",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "mart_artventure_recipe__usage"
            ],
            "unique_id": "model.dbt_sipher.mart_artventure_recipe__usage",
            "raw_code": "{{- config(\n    alias='mart_artventure_recipe__usage',\n    materialized='table',\n    partition_by={\n        \"field\": \"date\",\n        \"data_type\": \"date\",\n        \"granularity\": \"day\"\n    },\n)-}}\n\nWITH raw_generate AS (\n    SELECT\n        COALESCE(\n            {{ get_string_value_from_event_params(key=\"recipe_name\") }},\n            {{ get_string_value_from_event_params(key=\"recipe_id\") }}\n        ) as recipe,\n        {{ get_string_value_from_event_params(key=\"template\") }} AS template,\n        {{ get_string_value_from_event_params(key=\"gender\") }} AS gender,\n        {{ get_string_value_from_event_params(key=\"age\") }} AS age,\n        {{ get_string_value_from_event_params(key=\"theme\") }} AS theme,\n        {{ get_string_value_from_event_params(key=\"style\") }} AS style,\n        {{ get_string_value_from_event_params(key=\"backgroundColor\") }} AS background_color,\n        {{ get_int_value_from_event_params(key=\"shapePrecisionLevel\") }} AS shape_precision_level,\n        COALESCE(\n            {{ get_int_value_from_event_params(key=\"creative_intensity\") }},\n            {{ get_double_value_from_event_params(key=\"creative_intensity\") }},\n            {{ get_int_value_from_event_params(key=\"creativeIntensity\") }},\n            {{ get_double_value_from_event_params(key=\"creativeIntensity\") }}\n        ) AS creative_intensity,\n        COALESCE(\n            {{ get_int_value_from_event_params(key=\"similarity\") }},\n            {{ get_double_value_from_event_params(key=\"similarity\") }}\n        ) AS similarity,\n        {{ get_string_value_from_event_params(key=\"aspectRatio\") }} AS aspect_ratio,\n        {{ get_int_value_from_event_params(key=\"upscaleRatio\") }} AS upscale_ratio,\n        {{ get_int_value_from_event_params(key=\"denoising_strength\") }} AS denoising_strength,\n        {{ get_string_value_from_event_params(key=\"shapeControl\") }} AS shape_control,\n        {{ get_string_value_from_event_params(key=\"modelHash\") }} AS model_hash,\n        {{ get_string_value_from_event_params(key=\"pose\") }} AS pose,\n        {{ get_int_value_from_event_params(key=\"duration\") }} AS duration,\n        version,\n        date,\n        CASE WHEN user_id = 'anonymous' THEN user_pseudo_id ELSE user_id END AS user_id,\n    FROM {{ ref(\"fct_artventure_user_events\") }}\n    WHERE event_name = 'click'\n        AND {{ get_string_value_from_event_params(key=\"event_label\") }} \n            IN ('recipe_alpha_generate', 'recipe-generate')\n)\n,reporting AS (\n    SELECT\n        *\n    FROM raw_generate\n    WHERE recipe IS NOT NULL\n)\n\nSELECT * FROM reporting",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/artventure/mart_artventure_recipe__usage.sql",
            "original_file_path": "models/marts/artventure/mart_artventure_recipe__usage.sql",
            "name": "mart_artventure_recipe__usage",
            "alias": "mart_artventure_recipe__usage",
            "checksum": {
                "name": "sha256",
                "checksum": "585b5ade57456a7dfa79fc3a70a48cd1d5d9837c3d60842c3bc290365bf88097"
            },
            "tags": [],
            "refs": [
                [
                    "fct_artventure_user_events"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/mart_artventure_recipe__usage.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "mart_artventure_recipe__usage",
                "materialized": "table",
                "partition_by": {
                    "field": "date",
                    "data_type": "date",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.6523373,
            "compiled_code": "WITH raw_generate AS (\n    SELECT\n        COALESCE(\n            (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"recipe_name\"),\n            (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"recipe_id\")\n        ) as recipe,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"template\") AS template,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gender\") AS gender,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"age\") AS age,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"theme\") AS theme,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"style\") AS style,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"backgroundColor\") AS background_color,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"shapePrecisionLevel\") AS shape_precision_level,\n        COALESCE(\n            (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"creative_intensity\"),\n            (SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"creative_intensity\"),\n            (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"creativeIntensity\"),\n            (SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"creativeIntensity\")\n        ) AS creative_intensity,\n        COALESCE(\n            (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"similarity\"),\n            (SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"similarity\")\n        ) AS similarity,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"aspectRatio\") AS aspect_ratio,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"upscaleRatio\") AS upscale_ratio,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"denoising_strength\") AS denoising_strength,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"shapeControl\") AS shape_control,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"modelHash\") AS model_hash,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"pose\") AS pose,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"duration\") AS duration,\n        version,\n        date,\n        CASE WHEN user_id = 'anonymous' THEN user_pseudo_id ELSE user_id END AS user_id,\n    FROM `sipher-data-testing`.`tmp_dbt`.`fct_artventure_user_events`\n    WHERE event_name = 'click'\n        AND (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"event_label\") \n            IN ('recipe_alpha_generate', 'recipe-generate')\n)\n,reporting AS (\n    SELECT\n        *\n    FROM raw_generate\n    WHERE recipe IS NOT NULL\n)\n\nSELECT * FROM reporting",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`mart_artventure_recipe__usage`"
        },
        "model.dbt_sipher.fct_artventure_task_events": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_event_params",
                    "macro.dbt_sipher.get_int_value_from_event_params"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__artventure_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "fct_artventure_task_events"
            ],
            "unique_id": "model.dbt_sipher.fct_artventure_task_events",
            "raw_code": "{{- config(\n    materialized='table'\n) -}}\n\nWITH raw AS (\n    SELECT\n        PARSE_DATE('%Y%m%d', event_date) AS date,\n        TIMESTAMP_MICROS(event_timestamp) AS timestamp,\n        event_name,\n        event_params\n    FROM {{ ref('stg_firebase__artventure_events_all_time') }}\n    WHERE event_name IN (\n        'task_registered',\n        'task_executing',\n        'task_executed'\n    )\n)\n,task_events AS (\n    SELECT\n        date,\n        timestamp,\n        {{ get_string_value_from_event_params(key=\"task_id\") }} AS task_id,\n        event_name AS status,\n        {{ get_int_value_from_event_params(key=\"tasks_in_queue\") }} AS tasks_in_queue,\n        {{ get_int_value_from_event_params(key=\"queue_duration\") }} AS queue_duration,\n        {{ get_int_value_from_event_params(key=\"runpod_queue_duration\") }} AS runpod_queue_duration,\n        {{ get_int_value_from_event_params(key=\"execution_duration\") }} AS execution_duration\n    FROM raw\n)\n\nSELECT * FROM task_events",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/artventure/fct_artventure_task_events.sql",
            "original_file_path": "models/marts/artventure/fct_artventure_task_events.sql",
            "name": "fct_artventure_task_events",
            "alias": "fct_artventure_task_events",
            "checksum": {
                "name": "sha256",
                "checksum": "7be5b99279e378b479efc4c7a1608698413050c558faf79395aa97028ac6260a"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__artventure_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {
                "date": {
                    "name": "date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "task_id": {
                    "name": "task_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "status": {
                    "name": "status",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/marts/artventure/schema_artventure.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/fct_artventure_task_events.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1705293862.1487076,
            "compiled_code": "WITH raw AS (\n    SELECT\n        PARSE_DATE('%Y%m%d', event_date) AS date,\n        TIMESTAMP_MICROS(event_timestamp) AS timestamp,\n        event_name,\n        event_params\n    FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__artventure_events_all_time`\n    WHERE event_name IN (\n        'task_registered',\n        'task_executing',\n        'task_executed'\n    )\n)\n,task_events AS (\n    SELECT\n        date,\n        timestamp,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"task_id\") AS task_id,\n        event_name AS status,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"tasks_in_queue\") AS tasks_in_queue,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"queue_duration\") AS queue_duration,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"runpod_queue_duration\") AS runpod_queue_duration,\n        (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"execution_duration\") AS execution_duration\n    FROM raw\n)\n\nSELECT * FROM task_events",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`fct_artventure_task_events`"
        },
        "model.dbt_sipher.mart_artventure_recipe__feedback": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_event_params"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_artventure_user_events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "mart_artventure_recipe__feedback",
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "mart_artventure_recipe__feedback"
            ],
            "unique_id": "model.dbt_sipher.mart_artventure_recipe__feedback",
            "raw_code": "{{- config(\n    alias='mart_artventure_recipe__feedback',\n    materialized='table'\n)-}}\n\n{%- set responses = [\n    'CLOSE',\n    'HAPPY',\n    'NEUTRAL',\n    'SAD',\n    'SKIP'\n] -%}\n\nWITH raw_feedback AS (\n    SELECT\n        CASE WHEN user_id = 'anonymous' THEN user_pseudo_id ELSE user_id END AS user_id,\n        {{ get_string_value_from_event_params(key=\"recipe_id\") }} AS recipe,\n        {{ get_string_value_from_event_params(key=\"response\") }} AS response\n    FROM {{ ref(\"fct_artventure_user_events\") }}\n    WHERE event_name = 'click'\n        AND {{ get_string_value_from_event_params(key=\"event_label\") }} = \"feedback\"\n)\n,reporting AS (\n    SELECT\n        recipe,\n        {%- for response in responses -%}\n            SUM(CASE WHEN response = '{{ response }}' THEN 1 ELSE 0 END) AS cnt_{{ response }},\n        {% endfor -%}\n    FROM raw_feedback\n    WHERE recipe IS NOT NULL\n    GROUP BY recipe\n)\n\nSELECT * FROM reporting",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/artventure/mart_artventure_recipe__feedback.sql",
            "original_file_path": "models/marts/artventure/mart_artventure_recipe__feedback.sql",
            "name": "mart_artventure_recipe__feedback",
            "alias": "mart_artventure_recipe__feedback",
            "checksum": {
                "name": "sha256",
                "checksum": "740f609208cdb0f3274980e397d21e97903672f68b452a770e2dabc969392415"
            },
            "tags": [],
            "refs": [
                [
                    "fct_artventure_user_events"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/mart_artventure_recipe__feedback.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "mart_artventure_recipe__feedback",
                "materialized": "table"
            },
            "created_at": 1705293861.66375,
            "compiled_code": "WITH raw_feedback AS (\n    SELECT\n        CASE WHEN user_id = 'anonymous' THEN user_pseudo_id ELSE user_id END AS user_id,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"recipe_id\") AS recipe,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"response\") AS response\n    FROM `sipher-data-testing`.`tmp_dbt`.`fct_artventure_user_events`\n    WHERE event_name = 'click'\n        AND (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"event_label\") = \"feedback\"\n)\n,reporting AS (\n    SELECT\n        recipe,SUM(CASE WHEN response = 'CLOSE' THEN 1 ELSE 0 END) AS cnt_CLOSE,\n        SUM(CASE WHEN response = 'HAPPY' THEN 1 ELSE 0 END) AS cnt_HAPPY,\n        SUM(CASE WHEN response = 'NEUTRAL' THEN 1 ELSE 0 END) AS cnt_NEUTRAL,\n        SUM(CASE WHEN response = 'SAD' THEN 1 ELSE 0 END) AS cnt_SAD,\n        SUM(CASE WHEN response = 'SKIP' THEN 1 ELSE 0 END) AS cnt_SKIP,\n        FROM raw_feedback\n    WHERE recipe IS NOT NULL\n    GROUP BY recipe\n)\n\nSELECT * FROM reporting",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`mart_artventure_recipe__feedback`"
        },
        "model.dbt_sipher.int_artventure_user_devices": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_event_params",
                    "macro.dbt_utils.generate_surrogate_key",
                    "macro.dbt.is_incremental",
                    "macro.dbt_sipher.load_metadata"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__artventure_events_all_time",
                    "model.dbt_sipher.stg_firebase__artventure_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "device_sk",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "user_pseudo_ids",
                    "last_used_at",
                    "operating_system_version",
                    "browser",
                    "browser_version",
                    "web_info_browser",
                    "web_info_browser_version",
                    "web_info_hostname"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "intermediate",
                "int_artventure_user_devices"
            ],
            "unique_id": "model.dbt_sipher.int_artventure_user_devices",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='device_sk',\n  merge_update_columns = [\n    'user_pseudo_ids',\n    'last_used_at',\n    'operating_system_version',\n    'browser',\n    'browser_version',\n    'web_info_browser',\n    'web_info_browser_version',\n    'web_info_hostname'\n  ],\n) -}}\n\nWITH raw AS (\n    SELECT\n        *,\n        {{ get_string_value_from_event_params(key=\"user_email\") }} AS user_email,\n    FROM {{ ref('stg_firebase__artventure_events_all_time') }}\n    WHERE event_name = 'click'\n        AND {{ get_string_value_from_event_params(key=\"event_label\") }} = 'sign_in_with_google'\n)\n\n,device_properties AS (\n    SELECT\n        user_pseudo_id,\n        {{ dbt_utils.generate_surrogate_key([\n            'device.category',\n            'device.operating_system'\n        ]) }} AS _device_model_key,\n        MAX(TIMESTAMP_MICROS(event_timestamp)) AS last_used_at,\n        MAX(device.mobile_brand_name) AS mobile_brand_name,\n        MAX(device.category) AS category,\n        MAX(device.mobile_model_name) AS mobile_model_name,\n        MAX(device.mobile_marketing_name) AS mobile_marketing_name,\n        MAX(device.mobile_os_hardware_model) AS mobile_os_hardware_model,\n        MAX(device.operating_system) AS operating_system,\n        MAX(device.operating_system_version) AS operating_system_version,\n        MAX(device.browser) AS browser,\n        MAX(device.browser_version) AS browser_version,\n        MAX(device.web_info.browser) AS web_info_browser,\n        MAX(device.web_info.browser_version) AS web_info_browser_version,\n        MAX(device.web_info.hostname) AS web_info_hostname,\n    FROM raw\n    GROUP BY user_pseudo_id, _device_model_key\n)\n\n,map_device_to_user_id AS (\n    SELECT\n        user_id,\n        user_email,\n        ARRAY_AGG(DISTINCT user_pseudo_id) AS user_pseudo_ids\n    FROM raw\n    WHERE user_id IS NOT NULL\n    GROUP BY user_id, user_email\n)\n\n,final AS (\n    SELECT\n        {{ dbt_utils.generate_surrogate_key([\n            'user_id',\n            'user_email',\n            '_device_model_key'\n        ]) }} AS device_sk,\n        user_id,\n        user_email,\n        _device_model_key,\n        ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n        MAX(last_used_at) AS last_used_at,\n        MAX(category) AS category,\n        MAX(mobile_brand_name) AS mobile_brand_name,\n        MAX(mobile_model_name) AS mobile_model_name,\n        MAX(mobile_marketing_name) AS mobile_marketing_name,\n        MAX(mobile_os_hardware_model) AS mobile_os_hardware_model,\n        MAX(operating_system) AS operating_system,\n        MAX(operating_system_version) AS operating_system_version,\n        MAX(browser) AS browser,\n        MAX(browser_version) AS browser_version,\n        MAX(web_info_browser) AS web_info_browser,\n        MAX(web_info_browser_version) AS web_info_browser_version,\n        MAX(web_info_hostname) AS web_info_hostname\n    FROM map_device_to_user_id, UNNEST(user_pseudo_ids) AS user_pseudo_id_map\n    LEFT JOIN device_properties ON device_properties.user_pseudo_id = user_pseudo_id_map\n    GROUP BY user_id, user_email, _device_model_key\n)\n\n\n{% if is_incremental() -%}\n,current_ids_and_new_ids AS (\n    SELECT\n        device_sk,\n        user_pseudo_id\n    FROM {{ this }}\n    LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n\n    UNION DISTINCT\n\n    SELECT\n        device_sk,\n        user_pseudo_id\n    FROM final\n    LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n)\n\n,combined_id AS (\n    SELECT\n        device_sk,\n        ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n    FROM current_ids_and_new_ids\n    GROUP BY device_sk\n)\n\nSELECT\n    final.*\n    EXCEPT(_device_model_key)\n    REPLACE (\n        combined_id.user_pseudo_ids AS user_pseudo_ids\n    ),\n    {{ load_metadata(sources=[ref('stg_firebase__artventure_events_all_time')]) }} AS load_metadata\nFROM final\nLEFT JOIN combined_id USING(device_sk)\n\n{%- else -%}\n\nSELECT\n    * EXCEPT(_device_model_key),\n    {{ load_metadata(sources=[ref('stg_firebase__artventure_events_all_time')]) }} AS load_metadata\nFROM final\n\n{%- endif -%}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/artventure/intermediate/int_artventure_user_devices.sql",
            "original_file_path": "models/marts/artventure/intermediate/int_artventure_user_devices.sql",
            "name": "int_artventure_user_devices",
            "alias": "int_artventure_user_devices",
            "checksum": {
                "name": "sha256",
                "checksum": "235755f986cc75b8e71a5e50f51f0c8879e6083687c0163b92ed26639d9b0f9d"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__artventure_events_all_time"
                ],
                [
                    "stg_firebase__artventure_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/intermediate/int_artventure_user_devices.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "unique_key": "device_sk",
                "merge_update_columns": [
                    "user_pseudo_ids",
                    "last_used_at",
                    "operating_system_version",
                    "browser",
                    "browser_version",
                    "web_info_browser",
                    "web_info_browser_version",
                    "web_info_hostname"
                ]
            },
            "created_at": 1705293861.669141,
            "compiled_code": "WITH raw AS (\n    SELECT\n        *,\n        (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"user_email\") AS user_email,\n    FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__artventure_events_all_time`\n    WHERE event_name = 'click'\n        AND (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"event_label\") = 'sign_in_with_google'\n)\n\n,device_properties AS (\n    SELECT\n        user_pseudo_id,\n        to_hex(md5(cast(coalesce(cast(device.category as STRING), '') || '-' || coalesce(cast(device.operating_system as STRING), '') as STRING))) AS _device_model_key,\n        MAX(TIMESTAMP_MICROS(event_timestamp)) AS last_used_at,\n        MAX(device.mobile_brand_name) AS mobile_brand_name,\n        MAX(device.category) AS category,\n        MAX(device.mobile_model_name) AS mobile_model_name,\n        MAX(device.mobile_marketing_name) AS mobile_marketing_name,\n        MAX(device.mobile_os_hardware_model) AS mobile_os_hardware_model,\n        MAX(device.operating_system) AS operating_system,\n        MAX(device.operating_system_version) AS operating_system_version,\n        MAX(device.browser) AS browser,\n        MAX(device.browser_version) AS browser_version,\n        MAX(device.web_info.browser) AS web_info_browser,\n        MAX(device.web_info.browser_version) AS web_info_browser_version,\n        MAX(device.web_info.hostname) AS web_info_hostname,\n    FROM raw\n    GROUP BY user_pseudo_id, _device_model_key\n)\n\n,map_device_to_user_id AS (\n    SELECT\n        user_id,\n        user_email,\n        ARRAY_AGG(DISTINCT user_pseudo_id) AS user_pseudo_ids\n    FROM raw\n    WHERE user_id IS NOT NULL\n    GROUP BY user_id, user_email\n)\n\n,final AS (\n    SELECT\n        to_hex(md5(cast(coalesce(cast(user_id as STRING), '') || '-' || coalesce(cast(user_email as STRING), '') || '-' || coalesce(cast(_device_model_key as STRING), '') as STRING))) AS device_sk,\n        user_id,\n        user_email,\n        _device_model_key,\n        ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n        MAX(last_used_at) AS last_used_at,\n        MAX(category) AS category,\n        MAX(mobile_brand_name) AS mobile_brand_name,\n        MAX(mobile_model_name) AS mobile_model_name,\n        MAX(mobile_marketing_name) AS mobile_marketing_name,\n        MAX(mobile_os_hardware_model) AS mobile_os_hardware_model,\n        MAX(operating_system) AS operating_system,\n        MAX(operating_system_version) AS operating_system_version,\n        MAX(browser) AS browser,\n        MAX(browser_version) AS browser_version,\n        MAX(web_info_browser) AS web_info_browser,\n        MAX(web_info_browser_version) AS web_info_browser_version,\n        MAX(web_info_hostname) AS web_info_hostname\n    FROM map_device_to_user_id, UNNEST(user_pseudo_ids) AS user_pseudo_id_map\n    LEFT JOIN device_properties ON device_properties.user_pseudo_id = user_pseudo_id_map\n    GROUP BY user_id, user_email, _device_model_key\n)\n\n\nSELECT\n    * EXCEPT(_device_model_key),\n    ARRAY[STRUCT(\n      CURRENT_TIMESTAMP() AS data_load_timestamp,\n      \"`sipher-data-testing`.`staging_firebase`.`stg_firebase__artventure_events_all_time`\" AS data_sources\n    )] AS load_metadata\nFROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`int_artventure_user_devices`"
        },
        "model.dbt_sipher.fct_sipher_other_token_owners": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_max_column_value"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_aws__loyalty__raw_log_claim_lootbox",
                    "model.dbt_sipher.stg_aws__loyalty__raw_log_open_lootbox",
                    "model.dbt_sipher.stg_aws__loyalty__raw_log_spaceship",
                    "model.dbt_sipher.stg_aws__loyalty__raw_log_scrap_spaceship_parts",
                    "model.dbt_sipher.stg_aws__loyalty__raw_pending_mint",
                    "model.dbt_sipher.stg_aws__loyalty__raw_burned",
                    "model.dbt_sipher.stg_opensearch_onchain__raw_lootbox",
                    "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship",
                    "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship_parts",
                    "model.dbt_sipher.stg_opensearch_onchain__raw_sculpture"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_presentation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_presentation",
            "fqn": [
                "dbt_sipher",
                "marts",
                "non_game_atherlabs",
                "fct_sipher_other_token_owners"
            ],
            "unique_id": "model.dbt_sipher.fct_sipher_other_token_owners",
            "raw_code": "{{  config(\n    materialized='table',\n    schema='sipher_presentation',\n    )\n}}\n\n{% set stg_loyalty_tables = {\n    'raw_log_claim_lootbox': ref('stg_aws__loyalty__raw_log_claim_lootbox'),\n    'raw_log_open_lootbox': ref('stg_aws__loyalty__raw_log_open_lootbox'),\n    'raw_log_spaceship': ref('stg_aws__loyalty__raw_log_spaceship'),\n    'raw_log_scrap_spaceship_parts': ref('stg_aws__loyalty__raw_log_scrap_spaceship_parts'),\n    'raw_pending_mint': ref('stg_aws__loyalty__raw_pending_mint'),\n    'raw_burned': ref('stg_aws__loyalty__raw_burned'),\n    'raw_onchain_lootbox': ref('stg_opensearch_onchain__raw_lootbox'),\n    'raw_onchain_spaceship': ref('stg_opensearch_onchain__raw_spaceship'),\n    'raw_onchain_spaceship_parts': ref('stg_opensearch_onchain__raw_spaceship_parts'),\n    'raw_onchain_sculpture': ref('stg_opensearch_onchain__raw_sculpture'),\n    }\n%}\n\n{% set table_max_dates = [] %}\n{% for stg_table in stg_loyalty_tables  %}\n{% do table_max_dates.append(get_max_column_value(stg_loyalty_tables[stg_table], 'snapshot_date_tzutc')) %}\n{% endfor %}\n\n{% set zip_table_and_max_date = zip(table_max_dates, stg_loyalty_tables) | list %}\n\nWITH\n{% for table_max_date, stg_loyalty_table in zip_table_and_max_date %}\n  {{ \",\" if not loop.first else \"\" }}{{stg_loyalty_table}} AS(\n    SELECT\n      *\n    FROM {{ stg_loyalty_tables[stg_loyalty_table] }}\n    WHERE snapshot_date_tzutc = '{{table_max_date}}'\n  )\n{% endfor %}\n\n, lootbox_claim AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(quantity,0)) AS lootbox_claimed_quantity\n    FROM raw_log_claim_lootbox\n    GROUP BY 1\n  )\n\n  , lootbox_open AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(lootbox_id),0) AS lootbox_opened_quantity\n    FROM raw_log_open_lootbox\n    GROUP BY 1\n  )\n\n  , lootbox_mint AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS lootbox_minted_quantity\n    FROM raw_pending_mint AS a\n    WHERE type = 'Lootbox' AND status = 'Minted'\n    GROUP BY 1\n  )\n\n  , lootbox_burn AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL((amount),0)) AS lootbox_burned_quantity\n    FROM raw_burned AS a\n    WHERE type = 'Lootbox'\n    GROUP BY 1\n  )\n\n  , lootbox_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS lootbox_onchain_quantity\n    FROM raw_onchain_lootbox\n    GROUP BY 1\n  )\n\n\n  , spaceship_part_open AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(lootbox_id),0)*5 AS spaceship_part_opened_quantity\n    FROM raw_log_open_lootbox\n    GROUP BY 1\n  )\n\n  , spaceship_part_mint AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_part_minted_quantity\n    FROM raw_pending_mint AS a\n    WHERE type='SpaceshipPart' AND status = 'Minted'\n    GROUP BY 1\n  )\n\n  , spaceship_part_burn AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_part_burned_quantity\n    FROM raw_burned AS a\n    WHERE type = 'SpaceshipPart'\n    GROUP BY 1\n  )\n\n  , spaceship_part_build_dismantle AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(CASE WHEN action = 'build' THEN part_token_ids END),0)*5 AS spaceship_part_built_quantity,\n      IFNULL(COUNT(CASE WHEN action = 'dismatle' THEN part_token_ids END),0)*5 AS spaceship_part_dismantled_quantity\n    FROM raw_log_spaceship\n    GROUP BY 1\n  )\n\n  , spaceship_part_scrap AS(\n    SELECT\n      wallet_address,\n      COUNT(IFNULL(new_spaceship_part_token_id,'0')) AS spaceship_part_scrap_quantity\n    FROM raw_log_scrap_spaceship_parts AS a\n    GROUP BY 1\n  )\n\n  ,spaceship_part_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS spaceship_part_onchain_quantity\n    FROM raw_onchain_spaceship_parts\n    GROUP BY 1\n  )\n\n  , spaceship_mint AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_minted_quantity\n    FROM raw_pending_mint AS a\n    WHERE type='Spaceship' AND status = 'Minted'\n    GROUP BY 1\n  )\n\n  , spaceship_burn AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_burned_quantity\n    FROM raw_burned AS a\n    WHERE type = 'Spaceship'\n    GROUP BY 1\n  )\n\n  , spaceship_build_dismantle AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(CASE WHEN action = 'build' THEN part_token_ids END),0) AS spaceship_built_quantity,\n      IFNULL(COUNT(CASE WHEN action = 'dismatle' THEN part_token_ids END),0) AS spaceship_dismantled_quantity\n    FROM raw_log_spaceship\n    GROUP BY 1\n  )\n\n  , spaceship_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS spaceship_onchain_quantity\n    FROM raw_onchain_spaceship\n    GROUP BY 1\n  )\n\n\n  , sculpture_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS sculpture_onchain_quantity\n    FROM raw_onchain_sculpture\n    GROUP BY 1\n  )\n\n  , joined_data AS(\n    SELECT\n      * EXCEPT(wallet_address),\n      COALESCE(lootbox_claim.wallet_address,\n            lootbox_open.wallet_address,\n            lootbox_mint.wallet_address,\n            lootbox_onchain.wallet_address,\n            lootbox_burn.wallet_address,\n            spaceship_burn.wallet_address,\n            spaceship_mint.wallet_address,\n            spaceship_onchain.wallet_address,\n            spaceship_build_dismantle.wallet_address,\n            spaceship_part_open.wallet_address,\n            spaceship_part_burn.wallet_address,\n            spaceship_part_mint.wallet_address,\n            spaceship_part_scrap.wallet_address,\n            spaceship_part_onchain.wallet_address,\n            spaceship_part_build_dismantle.wallet_address,\n            sculpture_onchain.wallet_address) AS wallet_address\n    FROM lootbox_claim\n    FULL OUTER JOIN lootbox_open ON lootbox_open.wallet_address = lootbox_claim.wallet_address\n    FULL OUTER JOIN lootbox_mint ON lootbox_mint.wallet_address = lootbox_open.wallet_address\n    FULL OUTER JOIN lootbox_onchain ON lootbox_onchain.wallet_address = lootbox_mint.wallet_address\n    FULL OUTER JOIN lootbox_burn ON lootbox_burn.wallet_address = lootbox_onchain.wallet_address\n    FULL OUTER JOIN spaceship_burn ON spaceship_burn.wallet_address = lootbox_burn.wallet_address\n    FULL OUTER JOIN spaceship_mint ON spaceship_mint.wallet_address = spaceship_burn.wallet_address\n    FULL OUTER JOIN spaceship_onchain ON spaceship_onchain.wallet_address = spaceship_mint.wallet_address\n    FULL OUTER JOIN spaceship_build_dismantle ON spaceship_build_dismantle.wallet_address = spaceship_onchain.wallet_address\n    FULL OUTER JOIN spaceship_part_open ON spaceship_part_open.wallet_address = spaceship_build_dismantle.wallet_address\n    FULL OUTER JOIN spaceship_part_burn ON spaceship_part_burn.wallet_address = spaceship_part_open.wallet_address\n    FULL OUTER JOIN spaceship_part_mint ON spaceship_part_mint.wallet_address = spaceship_part_burn.wallet_address\n    FULL OUTER JOIN spaceship_part_scrap ON spaceship_part_scrap.wallet_address = spaceship_part_mint.wallet_address\n    FULL OUTER JOIN spaceship_part_onchain ON spaceship_part_onchain.wallet_address = spaceship_part_scrap.wallet_address\n    FULL OUTER JOIN spaceship_part_build_dismantle ON spaceship_part_build_dismantle.wallet_address = spaceship_part_onchain.wallet_address\n    FULL OUTER JOIN sculpture_onchain ON sculpture_onchain.wallet_address = spaceship_part_build_dismantle.wallet_address\n  )\n \n  SELECT\n    wallet_address,\n    SUM(IFNULL((lootbox_claimed_quantity - lootbox_opened_quantity - lootbox_minted_quantity + lootbox_burned_quantity),0)) AS lootbox_quantity,\n    SUM(IFNULL((spaceship_built_quantity - spaceship_dismantled_quantity - spaceship_minted_quantity + spaceship_burned_quantity),0)) AS spaceship_quantity,\n    SUM(IFNULL((spaceship_part_opened_quantity - spaceship_part_minted_quantity + spaceship_part_burned_quantity + spaceship_part_dismantled_quantity - spaceship_part_built_quantity - spaceship_part_scrap_quantity*2),0)) AS spaceship_part_quantity,\n    SUM(IFNULL(lootbox_onchain_quantity,0)) AS lootbox_onchain_quantity,\n    SUM(IFNULL(spaceship_onchain_quantity,0)) AS spaceship_onchain_quantity,\n    SUM(IFNULL(spaceship_part_onchain_quantity,0)) AS spaceship_part_onchain_quantity,\n    SUM(IFNULL(sculpture_onchain_quantity,0)) AS sculpture_onchain_quantity,\n\n  FROM joined_data\n  GROUP BY wallet_address",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/non_game_atherlabs/fct_sipher_other_token_owners.sql",
            "original_file_path": "models/marts/non_game_atherlabs/fct_sipher_other_token_owners.sql",
            "name": "fct_sipher_other_token_owners",
            "alias": "fct_sipher_other_token_owners",
            "checksum": {
                "name": "sha256",
                "checksum": "1376d4f36d3efbf1305b083f92c86ee0dd24367df93b74609b9157be3a5e52e8"
            },
            "tags": [],
            "refs": [
                [
                    "stg_aws__loyalty__raw_log_claim_lootbox"
                ],
                [
                    "stg_aws__loyalty__raw_log_open_lootbox"
                ],
                [
                    "stg_aws__loyalty__raw_log_spaceship"
                ],
                [
                    "stg_aws__loyalty__raw_log_scrap_spaceship_parts"
                ],
                [
                    "stg_aws__loyalty__raw_pending_mint"
                ],
                [
                    "stg_aws__loyalty__raw_burned"
                ],
                [
                    "stg_opensearch_onchain__raw_lootbox"
                ],
                [
                    "stg_opensearch_onchain__raw_spaceship"
                ],
                [
                    "stg_opensearch_onchain__raw_spaceship_parts"
                ],
                [
                    "stg_opensearch_onchain__raw_sculpture"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/non_game_atherlabs/fct_sipher_other_token_owners.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "sipher_presentation"
            },
            "created_at": 1705293861.6760392,
            "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWITH\n\n  raw_log_claim_lootbox AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_claim_lootbox`\n    WHERE snapshot_date_tzutc = '2023-07-20'\n  )\n\n  ,raw_log_open_lootbox AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_open_lootbox`\n    WHERE snapshot_date_tzutc = '2023-07-20'\n  )\n\n  ,raw_log_spaceship AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_spaceship`\n    WHERE snapshot_date_tzutc = '2023-07-20'\n  )\n\n  ,raw_log_scrap_spaceship_parts AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_log_scrap_spaceship_parts`\n    WHERE snapshot_date_tzutc = '2023-07-20'\n  )\n\n  ,raw_pending_mint AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_pending_mint`\n    WHERE snapshot_date_tzutc = '2023-07-20'\n  )\n\n  ,raw_burned AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_loyalty`.`stg_aws__loyalty__raw_burned`\n    WHERE snapshot_date_tzutc = '2023-07-20'\n  )\n\n  ,raw_onchain_lootbox AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_lootbox`\n    WHERE snapshot_date_tzutc = '2023-10-17'\n  )\n\n  ,raw_onchain_spaceship AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_spaceship`\n    WHERE snapshot_date_tzutc = '2023-10-17'\n  )\n\n  ,raw_onchain_spaceship_parts AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_spaceship_parts`\n    WHERE snapshot_date_tzutc = '2023-10-17'\n  )\n\n  ,raw_onchain_sculpture AS(\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_opensearch_onchain_nft`.`stg_opensearch_onchain__raw_sculpture`\n    WHERE snapshot_date_tzutc = '2023-10-17'\n  )\n\n\n, lootbox_claim AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(quantity,0)) AS lootbox_claimed_quantity\n    FROM raw_log_claim_lootbox\n    GROUP BY 1\n  )\n\n  , lootbox_open AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(lootbox_id),0) AS lootbox_opened_quantity\n    FROM raw_log_open_lootbox\n    GROUP BY 1\n  )\n\n  , lootbox_mint AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS lootbox_minted_quantity\n    FROM raw_pending_mint AS a\n    WHERE type = 'Lootbox' AND status = 'Minted'\n    GROUP BY 1\n  )\n\n  , lootbox_burn AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL((amount),0)) AS lootbox_burned_quantity\n    FROM raw_burned AS a\n    WHERE type = 'Lootbox'\n    GROUP BY 1\n  )\n\n  , lootbox_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS lootbox_onchain_quantity\n    FROM raw_onchain_lootbox\n    GROUP BY 1\n  )\n\n\n  , spaceship_part_open AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(lootbox_id),0)*5 AS spaceship_part_opened_quantity\n    FROM raw_log_open_lootbox\n    GROUP BY 1\n  )\n\n  , spaceship_part_mint AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_part_minted_quantity\n    FROM raw_pending_mint AS a\n    WHERE type='SpaceshipPart' AND status = 'Minted'\n    GROUP BY 1\n  )\n\n  , spaceship_part_burn AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_part_burned_quantity\n    FROM raw_burned AS a\n    WHERE type = 'SpaceshipPart'\n    GROUP BY 1\n  )\n\n  , spaceship_part_build_dismantle AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(CASE WHEN action = 'build' THEN part_token_ids END),0)*5 AS spaceship_part_built_quantity,\n      IFNULL(COUNT(CASE WHEN action = 'dismatle' THEN part_token_ids END),0)*5 AS spaceship_part_dismantled_quantity\n    FROM raw_log_spaceship\n    GROUP BY 1\n  )\n\n  , spaceship_part_scrap AS(\n    SELECT\n      wallet_address,\n      COUNT(IFNULL(new_spaceship_part_token_id,'0')) AS spaceship_part_scrap_quantity\n    FROM raw_log_scrap_spaceship_parts AS a\n    GROUP BY 1\n  )\n\n  ,spaceship_part_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS spaceship_part_onchain_quantity\n    FROM raw_onchain_spaceship_parts\n    GROUP BY 1\n  )\n\n  , spaceship_mint AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_minted_quantity\n    FROM raw_pending_mint AS a\n    WHERE type='Spaceship' AND status = 'Minted'\n    GROUP BY 1\n  )\n\n  , spaceship_burn AS(\n    SELECT\n      wallet_address,\n      SUM(IFNULL(amount,0)) AS spaceship_burned_quantity\n    FROM raw_burned AS a\n    WHERE type = 'Spaceship'\n    GROUP BY 1\n  )\n\n  , spaceship_build_dismantle AS(\n    SELECT\n      wallet_address,\n      IFNULL(COUNT(CASE WHEN action = 'build' THEN part_token_ids END),0) AS spaceship_built_quantity,\n      IFNULL(COUNT(CASE WHEN action = 'dismatle' THEN part_token_ids END),0) AS spaceship_dismantled_quantity\n    FROM raw_log_spaceship\n    GROUP BY 1\n  )\n\n  , spaceship_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS spaceship_onchain_quantity\n    FROM raw_onchain_spaceship\n    GROUP BY 1\n  )\n\n\n  , sculpture_onchain AS(\n    SELECT \n      wallet_address,\n      SUM(value) AS sculpture_onchain_quantity\n    FROM raw_onchain_sculpture\n    GROUP BY 1\n  )\n\n  , joined_data AS(\n    SELECT\n      * EXCEPT(wallet_address),\n      COALESCE(lootbox_claim.wallet_address,\n            lootbox_open.wallet_address,\n            lootbox_mint.wallet_address,\n            lootbox_onchain.wallet_address,\n            lootbox_burn.wallet_address,\n            spaceship_burn.wallet_address,\n            spaceship_mint.wallet_address,\n            spaceship_onchain.wallet_address,\n            spaceship_build_dismantle.wallet_address,\n            spaceship_part_open.wallet_address,\n            spaceship_part_burn.wallet_address,\n            spaceship_part_mint.wallet_address,\n            spaceship_part_scrap.wallet_address,\n            spaceship_part_onchain.wallet_address,\n            spaceship_part_build_dismantle.wallet_address,\n            sculpture_onchain.wallet_address) AS wallet_address\n    FROM lootbox_claim\n    FULL OUTER JOIN lootbox_open ON lootbox_open.wallet_address = lootbox_claim.wallet_address\n    FULL OUTER JOIN lootbox_mint ON lootbox_mint.wallet_address = lootbox_open.wallet_address\n    FULL OUTER JOIN lootbox_onchain ON lootbox_onchain.wallet_address = lootbox_mint.wallet_address\n    FULL OUTER JOIN lootbox_burn ON lootbox_burn.wallet_address = lootbox_onchain.wallet_address\n    FULL OUTER JOIN spaceship_burn ON spaceship_burn.wallet_address = lootbox_burn.wallet_address\n    FULL OUTER JOIN spaceship_mint ON spaceship_mint.wallet_address = spaceship_burn.wallet_address\n    FULL OUTER JOIN spaceship_onchain ON spaceship_onchain.wallet_address = spaceship_mint.wallet_address\n    FULL OUTER JOIN spaceship_build_dismantle ON spaceship_build_dismantle.wallet_address = spaceship_onchain.wallet_address\n    FULL OUTER JOIN spaceship_part_open ON spaceship_part_open.wallet_address = spaceship_build_dismantle.wallet_address\n    FULL OUTER JOIN spaceship_part_burn ON spaceship_part_burn.wallet_address = spaceship_part_open.wallet_address\n    FULL OUTER JOIN spaceship_part_mint ON spaceship_part_mint.wallet_address = spaceship_part_burn.wallet_address\n    FULL OUTER JOIN spaceship_part_scrap ON spaceship_part_scrap.wallet_address = spaceship_part_mint.wallet_address\n    FULL OUTER JOIN spaceship_part_onchain ON spaceship_part_onchain.wallet_address = spaceship_part_scrap.wallet_address\n    FULL OUTER JOIN spaceship_part_build_dismantle ON spaceship_part_build_dismantle.wallet_address = spaceship_part_onchain.wallet_address\n    FULL OUTER JOIN sculpture_onchain ON sculpture_onchain.wallet_address = spaceship_part_build_dismantle.wallet_address\n  )\n \n  SELECT\n    wallet_address,\n    SUM(IFNULL((lootbox_claimed_quantity - lootbox_opened_quantity - lootbox_minted_quantity + lootbox_burned_quantity),0)) AS lootbox_quantity,\n    SUM(IFNULL((spaceship_built_quantity - spaceship_dismantled_quantity - spaceship_minted_quantity + spaceship_burned_quantity),0)) AS spaceship_quantity,\n    SUM(IFNULL((spaceship_part_opened_quantity - spaceship_part_minted_quantity + spaceship_part_burned_quantity + spaceship_part_dismantled_quantity - spaceship_part_built_quantity - spaceship_part_scrap_quantity*2),0)) AS spaceship_part_quantity,\n    SUM(IFNULL(lootbox_onchain_quantity,0)) AS lootbox_onchain_quantity,\n    SUM(IFNULL(spaceship_onchain_quantity,0)) AS spaceship_onchain_quantity,\n    SUM(IFNULL(spaceship_part_onchain_quantity,0)) AS spaceship_part_onchain_quantity,\n    SUM(IFNULL(sculpture_onchain_quantity,0)) AS sculpture_onchain_quantity,\n\n  FROM joined_data\n  GROUP BY wallet_address",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_presentation`.`fct_sipher_other_token_owners`"
        },
        "model.dbt_sipher.fct_atherlabs_users_asset": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.dim_ather_user__all",
                    "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today",
                    "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d",
                    "model.dbt_sipher.fct_sipher_other_token_owners"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_presentation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_presentation",
            "fqn": [
                "dbt_sipher",
                "marts",
                "non_game_atherlabs",
                "fct_atherlabs_users_asset"
            ],
            "unique_id": "model.dbt_sipher.fct_atherlabs_users_asset",
            "raw_code": "{{- config(\n    materialized='incremental',\n    schema='sipher_presentation',\n)-}}\n\nWITH \n    dim_user AS\n  (SELECT\n    *\n  FROM {{ref('dim_ather_user__all')}})\n\n  ,data_atherlabs AS \n  (\n    SELECT DISTINCT\n      user_id AS ather_id,\n      LOWER(wallet_address) AS wallet_address,\n      email AS email,\n    FROM dim_user, UNNEST(email) AS email\n  )\n\n    ,data_token AS \n    (\n        SELECT \n            *\n        FROM {{ ref('stg_bq_public_ethereum__token_transfer_today')}}\n        UNION ALL \n        SELECT \n            *\n        FROM {{ ref('stg_bq_public_ethereum__token_transfer_last_15d')}}\n    )\n\n    ,token_pre_results AS \n    (\n        SELECT\n            from_address AS address,\n            token_address,\n            token_name,\n            -CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n        UNION ALL\n        SELECT\n            to_address AS address,\n            token_address,\n            token_name,\n            CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n    )\n  \n  ,token_results AS\n  (\n      SELECT\n        LOWER(address) AS wallet_address,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher inu\" THEN sipher_value\n            ELSE 0\n            END) AS INU_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher neko\" THEN sipher_value\n            ELSE 0\n            END) AS NEKO_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher token\" THEN sipher_value\n            ELSE 0\n            END) AS TOKEN_TOTAL\n    FROM token_pre_results\n    GROUP BY 1 \n  )\n\n  , other_token_results AS(\n    SELECT *\n    FROM {{ref('fct_sipher_other_token_owners')}}\n  )\n\n  SELECT\n    CURRENT_DATE() AS act_date,\n    ather_id,\n    email,\n    wallet_address,\n    INU_TOTAL,\n    NEKO_TOTAL,\n    (INU_TOTAL + NEKO_TOTAL) AS GENEIS_NFT_TOTAL,\n    TOKEN_TOTAL,\n\n    lootbox_quantity,\n    spaceship_quantity,\n    spaceship_part_quantity,\n    lootbox_onchain_quantity,\n    spaceship_onchain_quantity,\n    spaceship_part_onchain_quantity,\n    sculpture_onchain_quantity,\n    (lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS total_other_nft, \n    (lootbox_onchain_quantity + spaceship_onchain_quantity + spaceship_part_onchain_quantity + sculpture_onchain_quantity) AS total_other_onchain_nft, \n    (INU_TOTAL + NEKO_TOTAL + lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS TOTAL_NFT\n  FROM data_atherlabs\n  FULL OUTER JOIN token_results USING (wallet_address)\n  FULL OUTER JOIN other_token_results USING (wallet_address)\n  WHERE ather_id != 'nan'\n  ORDER BY ather_id DESC",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/non_game_atherlabs/fct_atherlabs_users_asset.sql",
            "original_file_path": "models/marts/non_game_atherlabs/fct_atherlabs_users_asset.sql",
            "name": "fct_atherlabs_users_asset",
            "alias": "fct_atherlabs_users_asset",
            "checksum": {
                "name": "sha256",
                "checksum": "4d4a86fb956347bdc6ca55d24f3e494cdf7d82f90f9b5a8db0e2be757e414294"
            },
            "tags": [],
            "refs": [
                [
                    "dim_ather_user__all"
                ],
                [
                    "stg_bq_public_ethereum__token_transfer_today"
                ],
                [
                    "stg_bq_public_ethereum__token_transfer_last_15d"
                ],
                [
                    "fct_sipher_other_token_owners"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/non_game_atherlabs/fct_atherlabs_users_asset.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "sipher_presentation"
            },
            "created_at": 1705293861.6840746,
            "compiled_code": "WITH \n    dim_user AS\n  (SELECT\n    *\n  FROM `sipher-data-testing`.`raw_aws_atherlabs`.`dim_ather_user__all`)\n\n  ,data_atherlabs AS \n  (\n    SELECT DISTINCT\n      user_id AS ather_id,\n      LOWER(wallet_address) AS wallet_address,\n      email AS email,\n    FROM dim_user, UNNEST(email) AS email\n  )\n\n    ,data_token AS \n    (\n        SELECT \n            *\n        FROM `sipher-data-testing`.`sipher_ethereum`.`stg_bq_public_ethereum__token_transfer_today`\n        UNION ALL \n        SELECT \n            *\n        FROM `sipher-data-testing`.`sipher_ethereum`.`stg_bq_public_ethereum__token_transfer_last_15d`\n    )\n\n    ,token_pre_results AS \n    (\n        SELECT\n            from_address AS address,\n            token_address,\n            token_name,\n            -CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n        UNION ALL\n        SELECT\n            to_address AS address,\n            token_address,\n            token_name,\n            CAST(sipher_value AS NUMERIC)  AS sipher_value\n        FROM data_token\n    )\n  \n  ,token_results AS\n  (\n      SELECT\n        LOWER(address) AS wallet_address,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher inu\" THEN sipher_value\n            ELSE 0\n            END) AS INU_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher neko\" THEN sipher_value\n            ELSE 0\n            END) AS NEKO_TOTAL,\n        SUM(CASE\n            WHEN LOWER(token_name) = \"sipher token\" THEN sipher_value\n            ELSE 0\n            END) AS TOKEN_TOTAL\n    FROM token_pre_results\n    GROUP BY 1 \n  )\n\n  , other_token_results AS(\n    SELECT *\n    FROM `sipher-data-testing`.`sipher_presentation`.`fct_sipher_other_token_owners`\n  )\n\n  SELECT\n    CURRENT_DATE() AS act_date,\n    ather_id,\n    email,\n    wallet_address,\n    INU_TOTAL,\n    NEKO_TOTAL,\n    (INU_TOTAL + NEKO_TOTAL) AS GENEIS_NFT_TOTAL,\n    TOKEN_TOTAL,\n\n    lootbox_quantity,\n    spaceship_quantity,\n    spaceship_part_quantity,\n    lootbox_onchain_quantity,\n    spaceship_onchain_quantity,\n    spaceship_part_onchain_quantity,\n    sculpture_onchain_quantity,\n    (lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS total_other_nft, \n    (lootbox_onchain_quantity + spaceship_onchain_quantity + spaceship_part_onchain_quantity + sculpture_onchain_quantity) AS total_other_onchain_nft, \n    (INU_TOTAL + NEKO_TOTAL + lootbox_quantity + spaceship_quantity + spaceship_part_quantity) AS TOTAL_NFT\n  FROM data_atherlabs\n  FULL OUTER JOIN token_results USING (wallet_address)\n  FULL OUTER JOIN other_token_results USING (wallet_address)\n  WHERE ather_id != 'nan'\n  ORDER BY ather_id DESC",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_presentation`.`fct_atherlabs_users_asset`"
        },
        "model.dbt_sipher.dim_hidden_atlas_player": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.int_sipher_odyssey_player_devices"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "hidden_atlas_core",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "hidden_atlas_core",
            "fqn": [
                "dbt_sipher",
                "marts",
                "hidden_atlas_core",
                "dim_hidden_atlas_player"
            ],
            "unique_id": "model.dbt_sipher.dim_hidden_atlas_player",
            "raw_code": "{{- config(\n  materialized='table',\n) -}}\n\nWITH devices AS (\n  SELECT\n    game_user_id,\n    ather_id,\n    ARRAY_AGG(STRUCT(\n      last_used_at,\n      advertising_ids,\n      vendor_ids,\n      user_pseudo_ids,\n      category,\n      mobile_brand_name,\n      mobile_model_name,\n      mobile_marketing_name,\n      mobile_os_hardware_model,\n      operating_system,\n      operating_system_version,\n      browser,\n      browser_version,\n      web_info_browser,\n      web_info_browser_version,\n      web_info_hostname\n    )) AS device\n  FROM {{ ref('int_sipher_odyssey_player_devices') }}\n  GROUP BY game_user_id, ather_id\n)\n\nSELECT * FROM devices",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/hidden_atlas_core/dim_hidden_atlas_player.sql",
            "original_file_path": "models/marts/hidden_atlas_core/dim_hidden_atlas_player.sql",
            "name": "dim_hidden_atlas_player",
            "alias": "dim_hidden_atlas_player",
            "checksum": {
                "name": "sha256",
                "checksum": "28c5dc3de4eed0d9c743cce50223c36a8d00549101adc33f3791151ce585846c"
            },
            "tags": [],
            "refs": [
                [
                    "int_sipher_odyssey_player_devices"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/hidden_atlas_core/dim_hidden_atlas_player.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "hidden_atlas_core",
                "materialized": "table"
            },
            "created_at": 1705293861.687743,
            "compiled_code": "WITH devices AS (\n  SELECT\n    game_user_id,\n    ather_id,\n    ARRAY_AGG(STRUCT(\n      last_used_at,\n      advertising_ids,\n      vendor_ids,\n      user_pseudo_ids,\n      category,\n      mobile_brand_name,\n      mobile_model_name,\n      mobile_marketing_name,\n      mobile_os_hardware_model,\n      operating_system,\n      operating_system_version,\n      browser,\n      browser_version,\n      web_info_browser,\n      web_info_browser_version,\n      web_info_hostname\n    )) AS device\n  FROM `sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_devices`\n  GROUP BY game_user_id, ather_id\n)\n\nSELECT * FROM devices",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`hidden_atlas_core`.`dim_hidden_atlas_player`"
        },
        "model.dbt_sipher.fct_aws_billing_all": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_aws__billing__raw_blockchain",
                    "model.dbt_sipher.stg_aws__billing__raw_g1",
                    "model.dbt_sipher.stg_aws__billing__raw_marketplace",
                    "model.dbt_sipher.stg_aws__billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_presentation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_presentation",
            "fqn": [
                "dbt_sipher",
                "marts",
                "aws_billing",
                "fct_aws_billing_all"
            ],
            "unique_id": "model.dbt_sipher.fct_aws_billing_all",
            "raw_code": "{{- config(\n    materialized='table',\n    schema='sipher_presentation',\n)-}}\n\n{% set stg_billing_tables = {\n    'blockchain': ref('stg_aws__billing__raw_blockchain'),\n    'g1': ref('stg_aws__billing__raw_g1'),\n    'marketplace': ref('stg_aws__billing__raw_marketplace'),\n    'game_production': ref('stg_aws__billing__raw_game_production'),\n    }\n%}\n\nWITH\n{% for billing_table in stg_billing_tables %}\n  {{ \",\" if not loop.first else \"\" }}extracted_date_month_{{billing_table}} AS(\n    SELECT\n      DISTINCT MAX(snapshot_date_tzutc) AS max_dt,\n      EXTRACT(MONTH FROM snapshot_date_tzutc) AS act_month\n    FROM {{ stg_billing_tables[billing_table] }}\n    GROUP BY 2\n  )\n\n  ,{{billing_table}} AS\n  (SELECT\n    bill_billing_period_start_date,\n    line_item_usage_start_date,\n    line_item_product_code,\n    SUM(CAST(line_item_unblended_cost AS NUMERIC)) AS line_item_unblended_cost,\n    SUM(CAST(line_item_blended_cost AS NUMERIC)) AS line_item_blended_cost,\n    line_item_line_item_description,\n    '{{billing_table}}' AS aws_account,\n    MAX(snapshot_date_tzutc) AS partition_date\n  FROM {{ stg_billing_tables[billing_table] }}\n  WHERE line_item_line_item_type = 'Usage'\n    AND snapshot_date_tzutc IN (SELECT max_dt FROM extracted_date_month_{{billing_table}})\n  GROUP BY 1,2,3,6\n  ORDER BY 2)\n\n{% endfor %}\n\n  SELECT * FROM marketplace\n  UNION ALL\n  SELECT * FROM g1\n  UNION ALL\n  SELECT * FROM blockchain",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/aws_billing/fct_aws_billing_all.sql",
            "original_file_path": "models/marts/aws_billing/fct_aws_billing_all.sql",
            "name": "fct_aws_billing_all",
            "alias": "fct_aws_billing_all",
            "checksum": {
                "name": "sha256",
                "checksum": "95094e304f0df156c00c9f504b76ecdc1c9e4ec9c82d6c5750cb9a654bab66ab"
            },
            "tags": [],
            "refs": [
                [
                    "stg_aws__billing__raw_blockchain"
                ],
                [
                    "stg_aws__billing__raw_g1"
                ],
                [
                    "stg_aws__billing__raw_marketplace"
                ],
                [
                    "stg_aws__billing__raw_game_production"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/aws_billing/fct_aws_billing_all.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "sipher_presentation"
            },
            "created_at": 1705293861.6982725,
            "compiled_code": "\n\nWITH\n\n  extracted_date_month_blockchain AS(\n    SELECT\n      DISTINCT MAX(snapshot_date_tzutc) AS max_dt,\n      EXTRACT(MONTH FROM snapshot_date_tzutc) AS act_month\n    FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_blockchain`\n    GROUP BY 2\n  )\n\n  ,blockchain AS\n  (SELECT\n    bill_billing_period_start_date,\n    line_item_usage_start_date,\n    line_item_product_code,\n    SUM(CAST(line_item_unblended_cost AS NUMERIC)) AS line_item_unblended_cost,\n    SUM(CAST(line_item_blended_cost AS NUMERIC)) AS line_item_blended_cost,\n    line_item_line_item_description,\n    'blockchain' AS aws_account,\n    MAX(snapshot_date_tzutc) AS partition_date\n  FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_blockchain`\n  WHERE line_item_line_item_type = 'Usage'\n    AND snapshot_date_tzutc IN (SELECT max_dt FROM extracted_date_month_blockchain)\n  GROUP BY 1,2,3,6\n  ORDER BY 2)\n\n\n  ,extracted_date_month_g1 AS(\n    SELECT\n      DISTINCT MAX(snapshot_date_tzutc) AS max_dt,\n      EXTRACT(MONTH FROM snapshot_date_tzutc) AS act_month\n    FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_g1`\n    GROUP BY 2\n  )\n\n  ,g1 AS\n  (SELECT\n    bill_billing_period_start_date,\n    line_item_usage_start_date,\n    line_item_product_code,\n    SUM(CAST(line_item_unblended_cost AS NUMERIC)) AS line_item_unblended_cost,\n    SUM(CAST(line_item_blended_cost AS NUMERIC)) AS line_item_blended_cost,\n    line_item_line_item_description,\n    'g1' AS aws_account,\n    MAX(snapshot_date_tzutc) AS partition_date\n  FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_g1`\n  WHERE line_item_line_item_type = 'Usage'\n    AND snapshot_date_tzutc IN (SELECT max_dt FROM extracted_date_month_g1)\n  GROUP BY 1,2,3,6\n  ORDER BY 2)\n\n\n  ,extracted_date_month_marketplace AS(\n    SELECT\n      DISTINCT MAX(snapshot_date_tzutc) AS max_dt,\n      EXTRACT(MONTH FROM snapshot_date_tzutc) AS act_month\n    FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_marketplace`\n    GROUP BY 2\n  )\n\n  ,marketplace AS\n  (SELECT\n    bill_billing_period_start_date,\n    line_item_usage_start_date,\n    line_item_product_code,\n    SUM(CAST(line_item_unblended_cost AS NUMERIC)) AS line_item_unblended_cost,\n    SUM(CAST(line_item_blended_cost AS NUMERIC)) AS line_item_blended_cost,\n    line_item_line_item_description,\n    'marketplace' AS aws_account,\n    MAX(snapshot_date_tzutc) AS partition_date\n  FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_marketplace`\n  WHERE line_item_line_item_type = 'Usage'\n    AND snapshot_date_tzutc IN (SELECT max_dt FROM extracted_date_month_marketplace)\n  GROUP BY 1,2,3,6\n  ORDER BY 2)\n\n\n  ,extracted_date_month_game_production AS(\n    SELECT\n      DISTINCT MAX(snapshot_date_tzutc) AS max_dt,\n      EXTRACT(MONTH FROM snapshot_date_tzutc) AS act_month\n    FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_game_production`\n    GROUP BY 2\n  )\n\n  ,game_production AS\n  (SELECT\n    bill_billing_period_start_date,\n    line_item_usage_start_date,\n    line_item_product_code,\n    SUM(CAST(line_item_unblended_cost AS NUMERIC)) AS line_item_unblended_cost,\n    SUM(CAST(line_item_blended_cost AS NUMERIC)) AS line_item_blended_cost,\n    line_item_line_item_description,\n    'game_production' AS aws_account,\n    MAX(snapshot_date_tzutc) AS partition_date\n  FROM `sipher-data-testing`.`raw_aws_billing_gcs`.`stg_aws__billing__raw_game_production`\n  WHERE line_item_line_item_type = 'Usage'\n    AND snapshot_date_tzutc IN (SELECT max_dt FROM extracted_date_month_game_production)\n  GROUP BY 1,2,3,6\n  ORDER BY 2)\n\n\n\n  SELECT * FROM marketplace\n  UNION ALL\n  SELECT * FROM g1\n  UNION ALL\n  SELECT * FROM blockchain",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_presentation`.`fct_aws_billing_all`"
        },
        "model.dbt_sipher.fct_tiktok_profile_stats_snapshot_daily": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_tiktok_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_tiktok_profile_stats_snapshot_daily"
            ],
            "unique_id": "model.dbt_sipher.fct_tiktok_profile_stats_snapshot_daily",
            "raw_code": "{{- config(\n  partition_by={\n    'field': 'snapshot_date_tzict',\n    'data_type': 'date',\n  },\n  materialized='table'\n) -}}\n\n\nSELECT\n  *\nFROM {{ ref('stg_tiktok_profile_stats') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_tiktok_profile_stats_snapshot_daily.sql",
            "original_file_path": "models/marts/social/fct_tiktok_profile_stats_snapshot_daily.sql",
            "name": "fct_tiktok_profile_stats_snapshot_daily",
            "alias": "fct_tiktok_profile_stats_snapshot_daily",
            "checksum": {
                "name": "sha256",
                "checksum": "77a70a0f359d0f8937fc3f3d0abbda64da9bd2882e4a7306a46f8946bbcf0871"
            },
            "tags": [],
            "refs": [
                [
                    "stg_tiktok_profile_stats"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_tiktok_profile_stats_snapshot_daily.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "materialized": "table"
            },
            "created_at": 1705293861.7028813,
            "compiled_code": "SELECT\n  *\nFROM `sipher-data-testing`.`staging_social`.`stg_tiktok_profile_stats`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_tiktok_profile_stats_snapshot_daily`"
        },
        "model.dbt_sipher.fct_youtube_contents": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_youtube_contents"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "published_date",
                    "data_type": "date",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_youtube_contents"
            ],
            "unique_id": "model.dbt_sipher.fct_youtube_contents",
            "raw_code": "{{- config(\n  materialized='table',\n  partition_by={\n      \"field\": \"published_date\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n},\n) -}}\n\n\nWITH data AS (\n    SELECT\n        latest_date_data\n        , channel_id\n        , channel_title\n        , video_id\n        , video_title\n        , published_at\n        , position\n        , content_details_duration\n        , creator_content_type\n        , video_description\n        , category_id\n        , total_views\n        , views\n        , red_views\n        , likes\n        , dislikes\n        , shares\n        , comments\n        , subscribers_gained\n        , subscribers_lost\n        , estimated_minutes_watched               AS est_minutes_watched\n        , estimated_red_minutes_watched           AS est_red_minutes_watched\n        , average_view_duration                   AS avg_view_duration\n        , average_view_percentage                 AS avg_view_percentage\n        , annotation_impressions\n        , annotation_clickable_impressions\n        , annotation_clicks\n        , annotation_click_through_rate\n        , annotation_closable_impressions\n        , annotation_closes\n        , annotation_close_rate\n        , card_impressions\n        , card_clicks\n        , card_click_rate\n        , card_teaser_impressions\n        , card_teaser_clicks\n        , card_teaser_click_rate\n        , videos_added_to_playlists\n        , videos_removed_from_playlists\n        , live_broadcast_content\n        , content_details_dimension AS dimension\n        , content_details_definition AS  definition\n        , content_details_caption AS  caption\n        , content_details_licensed_content AS  licensed_content\n        , content_details_projection AS  projection\n        , content_details_has_custom_thumbnail AS  has_custom_thumbnail\n        , status_upload_status AS upload_status\n        , status_privacy_status AS privacy_status\n        , status_license AS license\n        , status_embeddable AS embeddable\n        , status_public_stats_viewable AS public_stats_viewable\n        , status_made_for_kids AS made_for_kids\n        , status_self_declared_made_for_kids AS self_declared_made_for_kids\n    FROM\n        {{ ref('stg_youtube_contents') }}\n    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53\n)\n, contents AS (\n    SELECT\n        latest_date_data\n        , channel_id\n        , channel_title\n        , video_id\n        , video_title\n        , published_at\n        , DATE(published_at) AS published_date\n        , CONCAT('https://www.youtube.com/watch?v=', video_id) AS content_url\n        , position\n        , content_details_duration\n        , creator_content_type\n        , video_description\n        , category_id\n        , total_views\n        , views\n        , red_views\n        , likes\n        , dislikes \n        , shares\n        , comments\n        , subscribers_gained\n        , subscribers_lost\n        , (subscribers_gained - subscribers_lost) AS subscriber_getted\n        , est_minutes_watched\n        , est_red_minutes_watched\n        , avg_view_duration\n        , avg_view_percentage\n        , annotation_impressions\n        , annotation_clickable_impressions\n        , annotation_clicks\n        , annotation_click_through_rate\n        , annotation_closable_impressions\n        , annotation_closes\n        , annotation_close_rate\n        , card_impressions\n        , card_clicks\n        , card_click_rate\n        , card_teaser_impressions\n        , card_teaser_clicks\n        , card_teaser_click_rate\n        , videos_added_to_playlists\n        , videos_removed_from_playlists\n        , live_broadcast_content\n        , dimension\n        , definition\n        , caption\n        , licensed_content\n        , projection\n        , has_custom_thumbnail\n        , upload_status\n        , privacy_status\n        , license\n        , embeddable\n        , public_stats_viewable\n        , made_for_kids\n        , self_declared_made_for_kids\n    FROM\n        data\n)\n\nSELECT * FROM contents",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_youtube_contents.sql",
            "original_file_path": "models/marts/social/fct_youtube_contents.sql",
            "name": "fct_youtube_contents",
            "alias": "fct_youtube_contents",
            "checksum": {
                "name": "sha256",
                "checksum": "e9380acd3109153558fe7300ad05ba0c273c0713d69843476fe9f487e153d2f6"
            },
            "tags": [],
            "refs": [
                [
                    "stg_youtube_contents"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_youtube_contents.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "table",
                "partition_by": {
                    "field": "published_date",
                    "data_type": "date",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.7059999,
            "compiled_code": "WITH data AS (\n    SELECT\n        latest_date_data\n        , channel_id\n        , channel_title\n        , video_id\n        , video_title\n        , published_at\n        , position\n        , content_details_duration\n        , creator_content_type\n        , video_description\n        , category_id\n        , total_views\n        , views\n        , red_views\n        , likes\n        , dislikes\n        , shares\n        , comments\n        , subscribers_gained\n        , subscribers_lost\n        , estimated_minutes_watched               AS est_minutes_watched\n        , estimated_red_minutes_watched           AS est_red_minutes_watched\n        , average_view_duration                   AS avg_view_duration\n        , average_view_percentage                 AS avg_view_percentage\n        , annotation_impressions\n        , annotation_clickable_impressions\n        , annotation_clicks\n        , annotation_click_through_rate\n        , annotation_closable_impressions\n        , annotation_closes\n        , annotation_close_rate\n        , card_impressions\n        , card_clicks\n        , card_click_rate\n        , card_teaser_impressions\n        , card_teaser_clicks\n        , card_teaser_click_rate\n        , videos_added_to_playlists\n        , videos_removed_from_playlists\n        , live_broadcast_content\n        , content_details_dimension AS dimension\n        , content_details_definition AS  definition\n        , content_details_caption AS  caption\n        , content_details_licensed_content AS  licensed_content\n        , content_details_projection AS  projection\n        , content_details_has_custom_thumbnail AS  has_custom_thumbnail\n        , status_upload_status AS upload_status\n        , status_privacy_status AS privacy_status\n        , status_license AS license\n        , status_embeddable AS embeddable\n        , status_public_stats_viewable AS public_stats_viewable\n        , status_made_for_kids AS made_for_kids\n        , status_self_declared_made_for_kids AS self_declared_made_for_kids\n    FROM\n        `sipher-data-testing`.`staging_social`.`stg_youtube_contents`\n    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53\n)\n, contents AS (\n    SELECT\n        latest_date_data\n        , channel_id\n        , channel_title\n        , video_id\n        , video_title\n        , published_at\n        , DATE(published_at) AS published_date\n        , CONCAT('https://www.youtube.com/watch?v=', video_id) AS content_url\n        , position\n        , content_details_duration\n        , creator_content_type\n        , video_description\n        , category_id\n        , total_views\n        , views\n        , red_views\n        , likes\n        , dislikes \n        , shares\n        , comments\n        , subscribers_gained\n        , subscribers_lost\n        , (subscribers_gained - subscribers_lost) AS subscriber_getted\n        , est_minutes_watched\n        , est_red_minutes_watched\n        , avg_view_duration\n        , avg_view_percentage\n        , annotation_impressions\n        , annotation_clickable_impressions\n        , annotation_clicks\n        , annotation_click_through_rate\n        , annotation_closable_impressions\n        , annotation_closes\n        , annotation_close_rate\n        , card_impressions\n        , card_clicks\n        , card_click_rate\n        , card_teaser_impressions\n        , card_teaser_clicks\n        , card_teaser_click_rate\n        , videos_added_to_playlists\n        , videos_removed_from_playlists\n        , live_broadcast_content\n        , dimension\n        , definition\n        , caption\n        , licensed_content\n        , projection\n        , has_custom_thumbnail\n        , upload_status\n        , privacy_status\n        , license\n        , embeddable\n        , public_stats_viewable\n        , made_for_kids\n        , self_declared_made_for_kids\n    FROM\n        data\n)\n\nSELECT * FROM contents",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_youtube_contents`"
        },
        "model.dbt_sipher.dim_discord_profile": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_max_column_value"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_discord_profile_stats_snapshot",
                    "model.dbt_sipher.stg_discord_profile_stats_snapshot"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "name",
                    "description"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_discord_profile"
            ],
            "unique_id": "model.dbt_sipher.dim_discord_profile",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='id',\n  merge_update_columns = ['name', 'description'],\n) -}}\n\n{%- set date_filter = get_max_column_value(\n    table=ref('stg_discord_profile_stats_snapshot'),\n    column='snapshot_date_tzict'\n) -%}\n\nSELECT DISTINCT\n  id,\n  name,\n  profile_created_at,\n  description,\n  owner,\n  owner_id\nFROM {{ ref('stg_discord_profile_stats_snapshot') }}\nWHERE snapshot_date_tzict = '{{ date_filter }}'",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_discord_profile.sql",
            "original_file_path": "models/marts/social/dim_discord_profile.sql",
            "name": "dim_discord_profile",
            "alias": "dim_discord_profile",
            "checksum": {
                "name": "sha256",
                "checksum": "1b57983d0c25986cb62e596177aa45ca85c2fe6c9f49af67976fa1a1cb0ad196"
            },
            "tags": [],
            "refs": [
                [
                    "stg_discord_profile_stats_snapshot"
                ],
                [
                    "stg_discord_profile_stats_snapshot"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_discord_profile.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "incremental",
                "unique_key": "id",
                "merge_update_columns": [
                    "name",
                    "description"
                ]
            },
            "created_at": 1705293861.709769,
            "compiled_code": "SELECT DISTINCT\n  id,\n  name,\n  profile_created_at,\n  description,\n  owner,\n  owner_id\nFROM `sipher-data-testing`.`staging_social`.`stg_discord_profile_stats_snapshot`\nWHERE snapshot_date_tzict = '2023-05-30'",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_discord_profile`"
        },
        "model.dbt_sipher.fct_tiktok_video_stats_snapshot_daily": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_tiktok_video_comment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_tiktok_video_stats_snapshot_daily"
            ],
            "unique_id": "model.dbt_sipher.fct_tiktok_video_stats_snapshot_daily",
            "raw_code": "{{- config(\n  partition_by={\n    'field': 'snapshot_date_tzict',\n    'data_type': 'date',\n  },\n  materialized='table'\n) -}}\n\n\nSELECT\n  snapshot_date_tzict,\n  video_id,\n  MAX(comments_cnt) AS comments_cnt,\n  MAX(diggs_cnt) AS diggs_cnt,\n  MAX(download_cnt) AS download_cnt,\n  MAX(play_cnt) AS play_cnt,\n  MAX(forward_cnt) AS forward_cnt,\n  MAX(share_cnt) AS share_cnt,\nFROM {{ ref('stg_tiktok_video_comment') }}\nGROUP BY video_id, snapshot_date_tzict",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_tiktok_video_stats_snapshot_daily.sql",
            "original_file_path": "models/marts/social/fct_tiktok_video_stats_snapshot_daily.sql",
            "name": "fct_tiktok_video_stats_snapshot_daily",
            "alias": "fct_tiktok_video_stats_snapshot_daily",
            "checksum": {
                "name": "sha256",
                "checksum": "1296086c37aa8ab5f90620e7714f78e9692c687d091d25e4a5ec67bf6d7bdc35"
            },
            "tags": [],
            "refs": [
                [
                    "stg_tiktok_video_comment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_tiktok_video_stats_snapshot_daily.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "materialized": "table"
            },
            "created_at": 1705293861.7145076,
            "compiled_code": "SELECT\n  snapshot_date_tzict,\n  video_id,\n  MAX(comments_cnt) AS comments_cnt,\n  MAX(diggs_cnt) AS diggs_cnt,\n  MAX(download_cnt) AS download_cnt,\n  MAX(play_cnt) AS play_cnt,\n  MAX(forward_cnt) AS forward_cnt,\n  MAX(share_cnt) AS share_cnt,\nFROM `sipher-data-testing`.`staging_social`.`stg_tiktok_video_comment`\nGROUP BY video_id, snapshot_date_tzict",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_tiktok_video_stats_snapshot_daily`"
        },
        "model.dbt_sipher.fct_discord_profile_stats_snapshot_daily": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_discord_profile_stats_snapshot"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_discord_profile_stats_snapshot_daily"
            ],
            "unique_id": "model.dbt_sipher.fct_discord_profile_stats_snapshot_daily",
            "raw_code": "{{- config(\n  partition_by={\n    'field': 'snapshot_date_tzict',\n    'data_type': 'date',\n  },\n  materialized='table'\n) -}}\n\nSELECT\n  snapshot_date_tzict,\n  id,\n  member_count\nFROM {{ ref('stg_discord_profile_stats_snapshot') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_discord_profile_stats_snapshot_daily.sql",
            "original_file_path": "models/marts/social/fct_discord_profile_stats_snapshot_daily.sql",
            "name": "fct_discord_profile_stats_snapshot_daily",
            "alias": "fct_discord_profile_stats_snapshot_daily",
            "checksum": {
                "name": "sha256",
                "checksum": "8ef7009667a06943bb3f3de683fdb36af15bf9e94739db212023f7853770a3bf"
            },
            "tags": [],
            "refs": [
                [
                    "stg_discord_profile_stats_snapshot"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_discord_profile_stats_snapshot_daily.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "materialized": "table"
            },
            "created_at": 1705293861.7177498,
            "compiled_code": "SELECT\n  snapshot_date_tzict,\n  id,\n  member_count\nFROM `sipher-data-testing`.`staging_social`.`stg_discord_profile_stats_snapshot`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_discord_profile_stats_snapshot_daily`"
        },
        "model.dbt_sipher.dim_twitter_user_info": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_twitter_user_info_latest_snapshot"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_twitter_user_info"
            ],
            "unique_id": "model.dbt_sipher.dim_twitter_user_info",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='id',\n) -}}\n\nSELECT\n  id,\n  username,\n  name,\n  user_created_at,\n  description,\n  is_verified,\n  user_defined_location,\n  profile_image_url,\n  url,\n  cashtags,\n  hashtags,\n  mentions,\n  entities_urls,\n  urls,\n  is_protected,\n  pinned_tweet_id,\n  followers_cnt,\n  following_cnt,\n  listed_cnt,\n  tweet_cnt\nFROM {{ ref('stg_twitter_user_info_latest_snapshot') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_twitter_user_info.sql",
            "original_file_path": "models/marts/social/dim_twitter_user_info.sql",
            "name": "dim_twitter_user_info",
            "alias": "dim_twitter_user_info",
            "checksum": {
                "name": "sha256",
                "checksum": "0b671bf5651f53afe0fa3220544e4ac23878f89cbc58daa81db76093f023e496"
            },
            "tags": [],
            "refs": [
                [
                    "stg_twitter_user_info_latest_snapshot"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_twitter_user_info.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "incremental",
                "unique_key": "id"
            },
            "created_at": 1705293861.7208984,
            "compiled_code": "SELECT\n  id,\n  username,\n  name,\n  user_created_at,\n  description,\n  is_verified,\n  user_defined_location,\n  profile_image_url,\n  url,\n  cashtags,\n  hashtags,\n  mentions,\n  entities_urls,\n  urls,\n  is_protected,\n  pinned_tweet_id,\n  followers_cnt,\n  following_cnt,\n  listed_cnt,\n  tweet_cnt\nFROM `sipher-data-testing`.`staging_social`.`stg_twitter_user_info_latest_snapshot`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_twitter_user_info`"
        },
        "model.dbt_sipher.dim_tiktok_video": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_max_column_value"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_tiktok_video_comment",
                    "model.dbt_sipher.stg_tiktok_video_comment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "description",
                    "music"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_tiktok_video"
            ],
            "unique_id": "model.dbt_sipher.dim_tiktok_video",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='id',\n  merge_update_columns = ['description', 'music'],\n) -}}\n\n{%- set date_filter = get_max_column_value(\n    table=ref('stg_tiktok_video_comment'),\n    column='snapshot_date_tzict'\n) -%}\n\nSELECT\n  video_id AS id,\n  MAX(video_description) AS description,\n  MAX(video_music) AS music\nFROM {{ ref('stg_tiktok_video_comment') }}\nWHERE snapshot_date_tzict = '{{ date_filter }}'\nGROUP BY id",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_tiktok_video.sql",
            "original_file_path": "models/marts/social/dim_tiktok_video.sql",
            "name": "dim_tiktok_video",
            "alias": "dim_tiktok_video",
            "checksum": {
                "name": "sha256",
                "checksum": "be4bc28e7d403b3d31e05d298cde9e04621af5e705dd1734316e1a84c94e4f28"
            },
            "tags": [],
            "refs": [
                [
                    "stg_tiktok_video_comment"
                ],
                [
                    "stg_tiktok_video_comment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_tiktok_video.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "incremental",
                "unique_key": "id",
                "merge_update_columns": [
                    "description",
                    "music"
                ]
            },
            "created_at": 1705293861.7284214,
            "compiled_code": "SELECT\n  video_id AS id,\n  MAX(video_description) AS description,\n  MAX(video_music) AS music\nFROM `sipher-data-testing`.`staging_social`.`stg_tiktok_video_comment`\nWHERE snapshot_date_tzict = '2022-12-21'\nGROUP BY id",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_tiktok_video`"
        },
        "model.dbt_sipher.fct_twitter_profile_stats_snapshot_daily": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_twitter_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_twitter_profile_stats_snapshot_daily"
            ],
            "unique_id": "model.dbt_sipher.fct_twitter_profile_stats_snapshot_daily",
            "raw_code": "{{- config(\n  partition_by={\n    'field': 'snapshot_date_tzict',\n    'data_type': 'date',\n  },\n  materialized='table'\n) -}}\n\nSELECT\n  snapshot_date_tzict,\n  id,\n  followers_cnt,\n  following_cnt,\n  listed_cnt,\n  tweet_cnt\nFROM {{ ref('stg_twitter_profile_stats') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_twitter_profile_stats_snapshot_daily.sql",
            "original_file_path": "models/marts/social/fct_twitter_profile_stats_snapshot_daily.sql",
            "name": "fct_twitter_profile_stats_snapshot_daily",
            "alias": "fct_twitter_profile_stats_snapshot_daily",
            "checksum": {
                "name": "sha256",
                "checksum": "6ce50cfd6c98fe9eb08492c7a3de6e536f6fb720ce383bb34c8a5de374ce8564"
            },
            "tags": [],
            "refs": [
                [
                    "stg_twitter_profile_stats"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_twitter_profile_stats_snapshot_daily.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "materialized": "table"
            },
            "created_at": 1705293861.732195,
            "compiled_code": "SELECT\n  snapshot_date_tzict,\n  id,\n  followers_cnt,\n  following_cnt,\n  listed_cnt,\n  tweet_cnt\nFROM `sipher-data-testing`.`staging_social`.`stg_twitter_profile_stats`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_twitter_profile_stats_snapshot_daily`"
        },
        "model.dbt_sipher.fct_facebook_post_insights": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.dim_facebook_post",
                    "model.dbt_sipher.stg_facebook_page_feed",
                    "model.dbt_sipher.stg_facebook_post_comments",
                    "model.dbt_sipher.stg_facebook_post_insights"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "date_tzutc",
                    "data_type": "date",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_facebook_post_insights"
            ],
            "unique_id": "model.dbt_sipher.fct_facebook_post_insights",
            "raw_code": "{{- config(\n  materialized='table',\n  partition_by={\n      \"field\": \"date_tzutc\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n},\n) -}}\n\n{%- set metrics = [\n  'post_clicks'\n  , 'post_clicks_unique'\n  , 'post_engaged_fan'\n  , 'post_engaged_users'\n  , 'post_impressions'\n  , 'post_impressions_fan'\n  , 'post_impressions_fan_paid'\n  , 'post_impressions_fan_paid_unique'\n  , 'post_impressions_fan_unique'\n  , 'post_impressions_nonviral'\n  , 'post_impressions_nonviral_unique'\n  , 'post_impressions_organic'\n  , 'post_impressions_organic_unique'\n  , 'post_impressions_paid'\n  , 'post_impressions_paid_unique'\n  , 'post_impressions_unique'\n  , 'post_impressions_viral'\n  , 'post_impressions_viral_unique'\n  , 'post_negative_feedback'\n  , 'post_negative_feedback_unique'\n  , 'post_reactions_anger_total'\n  , 'post_reactions_haha_total'\n  , 'post_reactions_like_total'\n  , 'post_reactions_love_total'\n  , 'post_reactions_sorry_total'\n  , 'post_reactions_wow_total'\n] -%}\n\n\nWITH posts AS (\n    SELECT\n        post_id\n        , message\n        , post_url\n        , status_type\n        , privacy_description\n        , created_time\n        , latest_update_at\n    FROM\n        {{ ref('dim_facebook_post') }}\n)\n, post_shares AS (\n    SELECT\n        post_id\n        , MAX(COALESCE(shares, 0)) AS shares\n        , snapshot_date\n    FROM\n        {{ ref('stg_facebook_page_feed') }}\n    GROUP BY 1,3\n\n)\n, comments AS (\n    SELECT\n        post_id\n        , COUNT(DISTINCT message_id) AS comments\n        , snapshot_date\n    FROM\n        {{ ref('stg_facebook_post_comments') }}\n    GROUP BY 1,3\n)\n, post_ins AS (\n    SELECT\n        post_id\n        , period\n        ,{%- for metric in metrics -%}\n            COALESCE({{ metric }}, 0) AS {{ metric }},\n        {% endfor -%}\n        snapshot_date\n    FROM \n        {{ ref('stg_facebook_post_insights') }}\n)\n\n, final AS (\n    SELECT\n        pi.snapshot_date AS date_tzutc\n        , pi.post_id\n        , p.message\n        , p.post_url\n        , p.status_type\n        , p.privacy_description\n        , p.created_time AS post_created_at\n        , p.latest_update_at AS post_latest_update_at\n        , period\n        , COALESCE(ps.shares, 0) AS shares\n        , (post_reactions_anger_total \n            + post_reactions_haha_total \n            + post_reactions_like_total\n            + post_reactions_love_total\n            + post_reactions_sorry_total\n            + post_reactions_wow_total\n        ) AS reactions\n        , COALESCE(c.comments, 0) AS comments\n        , (post_reactions_like_total\n            + post_reactions_love_total\n            + post_reactions_wow_total\n            + post_reactions_haha_total\n            + post_reactions_sorry_total\n            + post_reactions_anger_total\n            + post_clicks\n            + COALESCE(c.comments, 0)\n            + COALESCE(ps.shares, 0)\n        ) AS post_engagement\n\n        , post_engaged_fan\n        , post_engaged_users\n        \n        , post_impressions\n        , post_impressions_unique AS post_reach\n        , post_impressions_organic_unique\n        , post_impressions_paid_unique\n        , post_impressions_organic\n        , post_impressions_paid\n        \n        , post_impressions_fan\n        , post_impressions_fan_paid\n        , post_impressions_fan_paid_unique\n        , post_impressions_fan_unique\n\n        , post_impressions_nonviral\n        , post_impressions_nonviral_unique\n        \n        , post_impressions_viral\n        , post_impressions_viral_unique\n\n        , post_negative_feedback\n        , post_negative_feedback_unique\n\n        , post_reactions_anger_total\n        , post_reactions_haha_total\n        , post_reactions_like_total\n        , post_reactions_love_total\n        , post_reactions_sorry_total\n        , post_reactions_wow_total\n\n        , post_clicks\n        , post_clicks_unique\n        \n    FROM \n        post_ins AS pi\n    LEFT JOIN posts p ON pi.post_id = p.post_id\n    LEFT JOIN post_shares ps ON pi.post_id = ps.post_id AND pi.snapshot_date = ps.snapshot_date\n    LEFT JOIN comments c ON pi.post_id = c.post_id AND pi.snapshot_date = c.snapshot_date\n\n    ORDER BY pi.snapshot_date\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_facebook_post_insights.sql",
            "original_file_path": "models/marts/social/fct_facebook_post_insights.sql",
            "name": "fct_facebook_post_insights",
            "alias": "fct_facebook_post_insights",
            "checksum": {
                "name": "sha256",
                "checksum": "e22a0cc69e9f087a501848456de7de9b7883e89f1b525899dc78138562662329"
            },
            "tags": [],
            "refs": [
                [
                    "dim_facebook_post"
                ],
                [
                    "stg_facebook_page_feed"
                ],
                [
                    "stg_facebook_post_comments"
                ],
                [
                    "stg_facebook_post_insights"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_facebook_post_insights.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "table",
                "partition_by": {
                    "field": "date_tzutc",
                    "data_type": "date",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.7352755,
            "compiled_code": "WITH posts AS (\n    SELECT\n        post_id\n        , message\n        , post_url\n        , status_type\n        , privacy_description\n        , created_time\n        , latest_update_at\n    FROM\n        `sipher-data-testing`.`mart_social`.`dim_facebook_post`\n)\n, post_shares AS (\n    SELECT\n        post_id\n        , MAX(COALESCE(shares, 0)) AS shares\n        , snapshot_date\n    FROM\n        `sipher-data-testing`.`staging_social`.`stg_facebook_page_feed`\n    GROUP BY 1,3\n\n)\n, comments AS (\n    SELECT\n        post_id\n        , COUNT(DISTINCT message_id) AS comments\n        , snapshot_date\n    FROM\n        `sipher-data-testing`.`staging_social`.`stg_facebook_post_comments`\n    GROUP BY 1,3\n)\n, post_ins AS (\n    SELECT\n        post_id\n        , period\n        ,COALESCE(post_clicks, 0) AS post_clicks,\n        COALESCE(post_clicks_unique, 0) AS post_clicks_unique,\n        COALESCE(post_engaged_fan, 0) AS post_engaged_fan,\n        COALESCE(post_engaged_users, 0) AS post_engaged_users,\n        COALESCE(post_impressions, 0) AS post_impressions,\n        COALESCE(post_impressions_fan, 0) AS post_impressions_fan,\n        COALESCE(post_impressions_fan_paid, 0) AS post_impressions_fan_paid,\n        COALESCE(post_impressions_fan_paid_unique, 0) AS post_impressions_fan_paid_unique,\n        COALESCE(post_impressions_fan_unique, 0) AS post_impressions_fan_unique,\n        COALESCE(post_impressions_nonviral, 0) AS post_impressions_nonviral,\n        COALESCE(post_impressions_nonviral_unique, 0) AS post_impressions_nonviral_unique,\n        COALESCE(post_impressions_organic, 0) AS post_impressions_organic,\n        COALESCE(post_impressions_organic_unique, 0) AS post_impressions_organic_unique,\n        COALESCE(post_impressions_paid, 0) AS post_impressions_paid,\n        COALESCE(post_impressions_paid_unique, 0) AS post_impressions_paid_unique,\n        COALESCE(post_impressions_unique, 0) AS post_impressions_unique,\n        COALESCE(post_impressions_viral, 0) AS post_impressions_viral,\n        COALESCE(post_impressions_viral_unique, 0) AS post_impressions_viral_unique,\n        COALESCE(post_negative_feedback, 0) AS post_negative_feedback,\n        COALESCE(post_negative_feedback_unique, 0) AS post_negative_feedback_unique,\n        COALESCE(post_reactions_anger_total, 0) AS post_reactions_anger_total,\n        COALESCE(post_reactions_haha_total, 0) AS post_reactions_haha_total,\n        COALESCE(post_reactions_like_total, 0) AS post_reactions_like_total,\n        COALESCE(post_reactions_love_total, 0) AS post_reactions_love_total,\n        COALESCE(post_reactions_sorry_total, 0) AS post_reactions_sorry_total,\n        COALESCE(post_reactions_wow_total, 0) AS post_reactions_wow_total,\n        snapshot_date\n    FROM \n        `sipher-data-testing`.`staging_social`.`stg_facebook_post_insights`\n)\n\n, final AS (\n    SELECT\n        pi.snapshot_date AS date_tzutc\n        , pi.post_id\n        , p.message\n        , p.post_url\n        , p.status_type\n        , p.privacy_description\n        , p.created_time AS post_created_at\n        , p.latest_update_at AS post_latest_update_at\n        , period\n        , COALESCE(ps.shares, 0) AS shares\n        , (post_reactions_anger_total \n            + post_reactions_haha_total \n            + post_reactions_like_total\n            + post_reactions_love_total\n            + post_reactions_sorry_total\n            + post_reactions_wow_total\n        ) AS reactions\n        , COALESCE(c.comments, 0) AS comments\n        , (post_reactions_like_total\n            + post_reactions_love_total\n            + post_reactions_wow_total\n            + post_reactions_haha_total\n            + post_reactions_sorry_total\n            + post_reactions_anger_total\n            + post_clicks\n            + COALESCE(c.comments, 0)\n            + COALESCE(ps.shares, 0)\n        ) AS post_engagement\n\n        , post_engaged_fan\n        , post_engaged_users\n        \n        , post_impressions\n        , post_impressions_unique AS post_reach\n        , post_impressions_organic_unique\n        , post_impressions_paid_unique\n        , post_impressions_organic\n        , post_impressions_paid\n        \n        , post_impressions_fan\n        , post_impressions_fan_paid\n        , post_impressions_fan_paid_unique\n        , post_impressions_fan_unique\n\n        , post_impressions_nonviral\n        , post_impressions_nonviral_unique\n        \n        , post_impressions_viral\n        , post_impressions_viral_unique\n\n        , post_negative_feedback\n        , post_negative_feedback_unique\n\n        , post_reactions_anger_total\n        , post_reactions_haha_total\n        , post_reactions_like_total\n        , post_reactions_love_total\n        , post_reactions_sorry_total\n        , post_reactions_wow_total\n\n        , post_clicks\n        , post_clicks_unique\n        \n    FROM \n        post_ins AS pi\n    LEFT JOIN posts p ON pi.post_id = p.post_id\n    LEFT JOIN post_shares ps ON pi.post_id = ps.post_id AND pi.snapshot_date = ps.snapshot_date\n    LEFT JOIN comments c ON pi.post_id = c.post_id AND pi.snapshot_date = c.snapshot_date\n\n    ORDER BY pi.snapshot_date\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_facebook_post_insights`"
        },
        "model.dbt_sipher.dim_facebook_post": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_facebook_page_feed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "post_id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "latest_update_at"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_facebook_post"
            ],
            "unique_id": "model.dbt_sipher.dim_facebook_post",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='post_id',\n  merge_update_columns=['latest_update_at']\n) -}}\n\nWITH posts AS (\n  SELECT\n    created_time\n    , post_id\n    , page_id\n    , MAX(updated_time) AS latest_update_at\n    , message\n    , permalink_url AS post_url\n    , author_id\n    , author_name\n    , full_picture_url\n    , instagram_eligibility\n    , is_eligible_for_promotion\n    , is_expired\n    , is_hidden\n    , is_instagram_eligible\n    , is_popular\n    , is_published\n    , is_spherical\n    , privacy_allow\n    , privacy_deny\n    , privacy_description\n    , privacy_friends\n    , privacy_value\n    , status_type\n    , subscribed\n    , promotable_id\n    , video_buying_eligibility\n    , properties_name\n    , properties_value\n  FROM \n    {{ ref('stg_facebook_page_feed') }}\n  GROUP BY 1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28\n)\n, fi AS (\n  SELECT \n    * \n    , ROW_NUMBER() OVER (PARTITION BY post_id ORDER BY post_id, latest_update_at) AS row_number\n  FROM posts\n)\n, final AS (\n  SELECT * EXCEPT(row_number)\n  FROM fi\n  WHERE row_number = 1\n  ORDER BY created_time\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_facebook_post.sql",
            "original_file_path": "models/marts/social/dim_facebook_post.sql",
            "name": "dim_facebook_post",
            "alias": "dim_facebook_post",
            "checksum": {
                "name": "sha256",
                "checksum": "305a27e7a01fff530f04aeb91f07a74745ca588207786d17dd84db61fbaa50e8"
            },
            "tags": [],
            "refs": [
                [
                    "stg_facebook_page_feed"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_facebook_post.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "incremental",
                "unique_key": "post_id",
                "merge_update_columns": [
                    "latest_update_at"
                ]
            },
            "created_at": 1705293861.7402425,
            "compiled_code": "WITH posts AS (\n  SELECT\n    created_time\n    , post_id\n    , page_id\n    , MAX(updated_time) AS latest_update_at\n    , message\n    , permalink_url AS post_url\n    , author_id\n    , author_name\n    , full_picture_url\n    , instagram_eligibility\n    , is_eligible_for_promotion\n    , is_expired\n    , is_hidden\n    , is_instagram_eligible\n    , is_popular\n    , is_published\n    , is_spherical\n    , privacy_allow\n    , privacy_deny\n    , privacy_description\n    , privacy_friends\n    , privacy_value\n    , status_type\n    , subscribed\n    , promotable_id\n    , video_buying_eligibility\n    , properties_name\n    , properties_value\n  FROM \n    `sipher-data-testing`.`staging_social`.`stg_facebook_page_feed`\n  GROUP BY 1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28\n)\n, fi AS (\n  SELECT \n    * \n    , ROW_NUMBER() OVER (PARTITION BY post_id ORDER BY post_id, latest_update_at) AS row_number\n  FROM posts\n)\n, final AS (\n  SELECT * EXCEPT(row_number)\n  FROM fi\n  WHERE row_number = 1\n  ORDER BY created_time\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_facebook_post`"
        },
        "model.dbt_sipher.dim_discord_user_info": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_discord_user_info_latest_snapshot"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "name",
                    "status",
                    "roles"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_discord_user_info"
            ],
            "unique_id": "model.dbt_sipher.dim_discord_user_info",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='id',\n  merge_update_columns = ['name', 'status', 'roles'],\n) -}}\n\n\nSELECT * FROM {{ ref('stg_discord_user_info_latest_snapshot') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_discord_user_info.sql",
            "original_file_path": "models/marts/social/dim_discord_user_info.sql",
            "name": "dim_discord_user_info",
            "alias": "dim_discord_user_info",
            "checksum": {
                "name": "sha256",
                "checksum": "0b381c29c9a8981fba730e2762b44a4b7cd1826caa3c138205460ffdf00c9825"
            },
            "tags": [],
            "refs": [
                [
                    "stg_discord_user_info_latest_snapshot"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_discord_user_info.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "incremental",
                "unique_key": "id",
                "merge_update_columns": [
                    "name",
                    "status",
                    "roles"
                ]
            },
            "created_at": 1705293861.743625,
            "compiled_code": "SELECT * FROM `sipher-data-testing`.`staging_social`.`stg_discord_user_info_latest_snapshot`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_discord_user_info`"
        },
        "model.dbt_sipher.dim_tiktok_user_info": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_tiktok_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "user_name",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "id",
                    "nickname",
                    "country_code"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_tiktok_user_info"
            ],
            "unique_id": "model.dbt_sipher.dim_tiktok_user_info",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='user_name',\n  merge_update_columns = ['id', 'nickname', 'country_code'],\n) -}}\n\n\nSELECT * FROM {{ ref('stg_tiktok_user_info') }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_tiktok_user_info.sql",
            "original_file_path": "models/marts/social/dim_tiktok_user_info.sql",
            "name": "dim_tiktok_user_info",
            "alias": "dim_tiktok_user_info",
            "checksum": {
                "name": "sha256",
                "checksum": "3fadb6ca61da99eedbef20b1d9644b8f8c1b980be7c9a97eea5e293c88705c41"
            },
            "tags": [],
            "refs": [
                [
                    "stg_tiktok_user_info"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_tiktok_user_info.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "incremental",
                "unique_key": "user_name",
                "merge_update_columns": [
                    "id",
                    "nickname",
                    "country_code"
                ]
            },
            "created_at": 1705293861.7475,
            "compiled_code": "SELECT * FROM `sipher-data-testing`.`staging_social`.`stg_tiktok_user_info`",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_tiktok_user_info`"
        },
        "model.dbt_sipher.dim_tiktok_video_comment": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_tiktok_video_comment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_tiktok_video_comment"
            ],
            "unique_id": "model.dbt_sipher.dim_tiktok_video_comment",
            "raw_code": "{{- config(\n  partition_by={\n    'field': 'snapshot_date_tzict',\n    'data_type': 'date',\n  },\n  materialized='table'\n) -}}\n\n\nSELECT\n  video_id,\n  comment_text,\n  comment_user_id,\n  snapshot_date_tzict\nFROM {{ ref('stg_tiktok_video_comment') }}\nWHERE comment_text IS NOT NULL",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_tiktok_video_comment.sql",
            "original_file_path": "models/marts/social/dim_tiktok_video_comment.sql",
            "name": "dim_tiktok_video_comment",
            "alias": "dim_tiktok_video_comment",
            "checksum": {
                "name": "sha256",
                "checksum": "2663af384ddc680df01c3ce28c03efc94b210cbaa79bd036e454202bb0376672"
            },
            "tags": [],
            "refs": [
                [
                    "stg_tiktok_video_comment"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_tiktok_video_comment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "partition_by": {
                    "field": "snapshot_date_tzict",
                    "data_type": "date"
                },
                "materialized": "table"
            },
            "created_at": 1705293861.7505841,
            "compiled_code": "SELECT\n  video_id,\n  comment_text,\n  comment_user_id,\n  snapshot_date_tzict\nFROM `sipher-data-testing`.`staging_social`.`stg_tiktok_video_comment`\nWHERE comment_text IS NOT NULL",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_tiktok_video_comment`"
        },
        "model.dbt_sipher.dim_youtube_contents": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_youtube_contents"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "video_id",
                    "data_type": "STRING"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_youtube_contents"
            ],
            "unique_id": "model.dbt_sipher.dim_youtube_contents",
            "raw_code": "{{- config(\n  materialized='table',\n  partition_by={\n    'field': 'video_id',\n    'data_type': 'STRING',\n  },\n) -}}\n\nwith draft AS (\n  SELECT\n    channel_id\n    , channel_title\n    , video_id\n    , CONCAT('https://www.youtube.com/watch?v=', video_id) AS content_url\n    , video_title\n    , video_description\n    , published_at\n    , DATE(published_at) AS published_date\n    , position\n    , content_details_duration AS duration\n    , creator_content_type \n    , category_id\n    , live_broadcast_content\n    , content_details_dimension\n    , content_details_definition\n    , content_details_caption\n    , content_details_licensed_content\n    , content_details_projection\n    , content_details_has_custom_thumbnail\n    , status_privacy_status\n    , status_license\n    , status_embeddable\n    , status_public_stats_viewable\n    , status_made_for_kids\n  FROM\n    {{ ref('stg_youtube_contents') }}\n  GROUP BY 1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\n)\n, dim AS (\n  SELECT \n  *, ROW_NUMBER() OVER (PARTITION BY video_id ORDER BY position, creator_content_type NULLS LAST) AS row_number\n  FROM draft\n)\n\nSELECT * EXCEPT(row_number) \nFROM dim \nWHERE row_number = 1\nORDER BY position",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_youtube_contents.sql",
            "original_file_path": "models/marts/social/dim_youtube_contents.sql",
            "name": "dim_youtube_contents",
            "alias": "dim_youtube_contents",
            "checksum": {
                "name": "sha256",
                "checksum": "b72fe000d7ba3ecf05f29356d71683f0f9ad45b1f30e81a8b38e117f07537b4c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_youtube_contents"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_youtube_contents.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "table",
                "partition_by": {
                    "field": "video_id",
                    "data_type": "STRING"
                }
            },
            "created_at": 1705293861.7538264,
            "compiled_code": "with draft AS (\n  SELECT\n    channel_id\n    , channel_title\n    , video_id\n    , CONCAT('https://www.youtube.com/watch?v=', video_id) AS content_url\n    , video_title\n    , video_description\n    , published_at\n    , DATE(published_at) AS published_date\n    , position\n    , content_details_duration AS duration\n    , creator_content_type \n    , category_id\n    , live_broadcast_content\n    , content_details_dimension\n    , content_details_definition\n    , content_details_caption\n    , content_details_licensed_content\n    , content_details_projection\n    , content_details_has_custom_thumbnail\n    , status_privacy_status\n    , status_license\n    , status_embeddable\n    , status_public_stats_viewable\n    , status_made_for_kids\n  FROM\n    `sipher-data-testing`.`staging_social`.`stg_youtube_contents`\n  GROUP BY 1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\n)\n, dim AS (\n  SELECT \n  *, ROW_NUMBER() OVER (PARTITION BY video_id ORDER BY position, creator_content_type NULLS LAST) AS row_number\n  FROM draft\n)\n\nSELECT * EXCEPT(row_number) \nFROM dim \nWHERE row_number = 1\nORDER BY position",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_youtube_contents`"
        },
        "model.dbt_sipher.fct_facebook_page": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_facebook_page_overall",
                    "model.dbt_sipher.stg_facebook_page_insights"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "end_time_insights",
                    "data_type": "date",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_facebook_page"
            ],
            "unique_id": "model.dbt_sipher.fct_facebook_page",
            "raw_code": "{{- config(\n  materialized='table',\n  partition_by={\n      \"field\": \"end_time_insights\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n},\n) -}}\n\n{%- set metrics = [\n    'page_actions_post_reactions_like_total',\n    \"page_actions_post_reactions_love_total\",\n    \"page_actions_post_reactions_wow_total\",\n    \"page_actions_post_reactions_haha_total\",\n    \"page_actions_post_reactions_sorry_total\",\n    \"page_actions_post_reactions_anger_total\",\n    \"page_consumptions\",\n    \"page_consumptions_unique\",\n    \"page_consumptions_by_other_clicks\",\n    \"page_consumptions_by_other_clicks_unique\",\n    \"page_consumptions_by_photo_view\",\n    \"page_consumptions_by_photo_view_unique\",\n    \"page_content_activity\",\n    \"page_content_activity_by_fan\",\n    \"page_content_activity_by_fan_unique\",\n    \"page_content_activity_by_page_post\",\n    \"page_content_activity_by_page_post_unique\",\n    \"page_content_activity_by_other\",\n    \"page_content_activity_by_other_unique\",\n    \"page_engaged_users\",\n    \"page_fans\",\n    \"page_fan_adds_total\",\n    \"page_fan_adds_paid\",\n    \"page_fan_adds_unpaid\",\n    \"page_fan_removes\",\n    \"page_fan_removes_unique\",\n    \"page_impressions\",\n    \"page_impressions_by_page_post\",\n    \"page_impressions_by_page_post_unique\",\n    \"page_impressions_by_checkin\",\n    \"page_impressions_by_checkin_unique\",\n    \"page_impressions_nonviral\",\n    \"page_impressions_nonviral_unique\",\n    \"page_impressions_organic_unique_v2\",\n    \"page_impressions_organic_v2\",\n    \"page_impressions_paid\",\n    \"page_impressions_paid_unique\",\n    \"page_impressions_unique\",\n    \"page_impressions_viral\",\n    \"page_impressions_viral_unique\",\n    \"page_negative_feedback\",\n    \"page_places_checkin_total\",\n    \"page_places_checkin_total_unique\",\n    \"page_places_checkin_mobile\",\n    \"page_places_checkin_mobile_unique\",\n    \"page_positive_feedback_by_link\",\n    \"page_positive_feedback_by_link_unique\",\n    \"page_positive_feedback_by_like\",\n    \"page_positive_feedback_by_like_unique\",\n    \"page_positive_feedback_by_comment\",\n    \"page_positive_feedback_by_comment_unique\",\n    \"page_positive_feedback_by_other\",\n    \"page_positive_feedback_by_other_unique\",\n    \"page_post_engagements\",\n    \"page_posts_impressions\",\n    \"page_posts_impressions_nonviral\",\n    \"page_posts_impressions_nonviral_unique\",\n    \"page_posts_impressions_organic\",\n    \"page_posts_impressions_organic_unique\",\n    \"page_posts_impressions_paid\",\n    \"page_posts_impressions_paid_unique\",\n    \"page_posts_impressions_unique\",\n    \"page_posts_impressions_viral\",\n    \"page_posts_impressions_viral_unique\",\n    \"page_posts_served_impressions_organic_unique\",\n    \"page_video_complete_views_30s\",\n    \"page_video_complete_views_30s_autoplayed\",\n    \"page_video_complete_views_30s_click_to_play\",\n    \"page_video_complete_views_30s_organic\",\n    \"page_video_complete_views_30s_paid\",\n    \"page_video_complete_views_30s_repeat_views\",\n    \"page_video_complete_views_30s_unique\",\n    \"page_video_repeat_views\",\n    \"page_video_view_time\",\n    \"page_video_views\",\n    \"page_video_views_10s\",\n    \"page_video_views_10s_autoplayed\",\n    \"page_video_views_10s_click_to_play\",\n    \"page_video_views_10s_organic\",\n    \"page_video_views_10s_paid\",\n    \"page_video_views_10s_repeat\",\n    \"page_video_views_10s_unique\",\n    \"page_video_views_autoplayed\",\n    \"page_video_views_by_page_uploaded\",\n    \"page_video_views_by_page_uploaded_from_crossposts\",\n    \"page_video_views_by_page_uploaded_from_shares\",\n    \"page_video_views_by_page_hosted_crosspost\",\n    \"page_video_views_by_page_hosted_share\",\n    \"page_video_views_by_page_owned\",\n    \"page_video_views_click_to_play\",\n    \"page_video_views_organic\",\n    \"page_video_views_paid\",\n    \"page_video_views_unique\",\n    \"page_views_logged_in_total\",\n    \"page_views_logged_in_unique\",\n    \"page_views_total\",\n    \"page_views_by_internal_referer_logged_in_unique_other\",\n    \"page_views_by_internal_referer_logged_in_unique_none\",\n    \"page_views_by_internal_referer_logged_in_unique_search\",\n    \"page_views_by_profile_tab_logged_in_unique_photos\",\n    \"page_views_by_profile_tab_logged_in_unique_home\",\n    \"page_views_by_profile_tab_logged_in_unique_about\",\n    \"page_views_by_profile_tab_total_photos\",\n    \"page_views_by_profile_tab_total_home\",\n    \"page_views_by_profile_tab_total_about\",\n    \"page_views_by_site_logged_in_unique_other\",\n    \"page_views_by_site_logged_in_unique_mobile\",\n    \"page_views_by_site_logged_in_unique_www\",\n] -%}\n\nWITH pg_over AS (\n    SELECT\n        page_id\n        , page_name\n        , username\n        , followers_count\n        , category\n        , link\n        , snapshot_date\n    FROM\n       {{ ref('stg_facebook_page_overall') }} \n)\n,page_ins AS (\n    SELECT\n        CAST(end_time AS DATE) AS end_time_insights\n        , end_time\n        , page_id\n        , period\n        , {% for metric in metrics %}\n            COALESCE({{ metric }}, 0) AS {{ metric }},\n        {% endfor -%}\n        snapshot_date\n    FROM\n        {{ ref('stg_facebook_page_insights') }} \n)\n, final AS (\n    SELECT\n        pi.end_time_insights\n        , po.page_id\n        , po.page_name\n        , po.username\n        , po.followers_count\n        , po.category\n        , po.link\n        , {% for metric in metrics %}\n            pi.{{ metric }},\n        {% endfor -%}\n    FROM\n        page_ins pi\n    LEFT JOIN pg_over po ON pi.end_time_insights = po.snapshot_date AND pi.page_id = po.page_id\n)\n\nSELECT * FROM final",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_facebook_page.sql",
            "original_file_path": "models/marts/social/fct_facebook_page.sql",
            "name": "fct_facebook_page",
            "alias": "fct_facebook_page",
            "checksum": {
                "name": "sha256",
                "checksum": "9e7a14aed43e7552eb06d7204e253176a410dbfaab9ebbb3d9928738fbc0153c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_facebook_page_overall"
                ],
                [
                    "stg_facebook_page_insights"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_facebook_page.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "table",
                "partition_by": {
                    "field": "end_time_insights",
                    "data_type": "date",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.7573915,
            "compiled_code": "WITH pg_over AS (\n    SELECT\n        page_id\n        , page_name\n        , username\n        , followers_count\n        , category\n        , link\n        , snapshot_date\n    FROM\n       `sipher-data-testing`.`staging_social`.`stg_facebook_page_overall` \n)\n,page_ins AS (\n    SELECT\n        CAST(end_time AS DATE) AS end_time_insights\n        , end_time\n        , page_id\n        , period\n        , \n            COALESCE(page_actions_post_reactions_like_total, 0) AS page_actions_post_reactions_like_total,\n        \n            COALESCE(page_actions_post_reactions_love_total, 0) AS page_actions_post_reactions_love_total,\n        \n            COALESCE(page_actions_post_reactions_wow_total, 0) AS page_actions_post_reactions_wow_total,\n        \n            COALESCE(page_actions_post_reactions_haha_total, 0) AS page_actions_post_reactions_haha_total,\n        \n            COALESCE(page_actions_post_reactions_sorry_total, 0) AS page_actions_post_reactions_sorry_total,\n        \n            COALESCE(page_actions_post_reactions_anger_total, 0) AS page_actions_post_reactions_anger_total,\n        \n            COALESCE(page_consumptions, 0) AS page_consumptions,\n        \n            COALESCE(page_consumptions_unique, 0) AS page_consumptions_unique,\n        \n            COALESCE(page_consumptions_by_other_clicks, 0) AS page_consumptions_by_other_clicks,\n        \n            COALESCE(page_consumptions_by_other_clicks_unique, 0) AS page_consumptions_by_other_clicks_unique,\n        \n            COALESCE(page_consumptions_by_photo_view, 0) AS page_consumptions_by_photo_view,\n        \n            COALESCE(page_consumptions_by_photo_view_unique, 0) AS page_consumptions_by_photo_view_unique,\n        \n            COALESCE(page_content_activity, 0) AS page_content_activity,\n        \n            COALESCE(page_content_activity_by_fan, 0) AS page_content_activity_by_fan,\n        \n            COALESCE(page_content_activity_by_fan_unique, 0) AS page_content_activity_by_fan_unique,\n        \n            COALESCE(page_content_activity_by_page_post, 0) AS page_content_activity_by_page_post,\n        \n            COALESCE(page_content_activity_by_page_post_unique, 0) AS page_content_activity_by_page_post_unique,\n        \n            COALESCE(page_content_activity_by_other, 0) AS page_content_activity_by_other,\n        \n            COALESCE(page_content_activity_by_other_unique, 0) AS page_content_activity_by_other_unique,\n        \n            COALESCE(page_engaged_users, 0) AS page_engaged_users,\n        \n            COALESCE(page_fans, 0) AS page_fans,\n        \n            COALESCE(page_fan_adds_total, 0) AS page_fan_adds_total,\n        \n            COALESCE(page_fan_adds_paid, 0) AS page_fan_adds_paid,\n        \n            COALESCE(page_fan_adds_unpaid, 0) AS page_fan_adds_unpaid,\n        \n            COALESCE(page_fan_removes, 0) AS page_fan_removes,\n        \n            COALESCE(page_fan_removes_unique, 0) AS page_fan_removes_unique,\n        \n            COALESCE(page_impressions, 0) AS page_impressions,\n        \n            COALESCE(page_impressions_by_page_post, 0) AS page_impressions_by_page_post,\n        \n            COALESCE(page_impressions_by_page_post_unique, 0) AS page_impressions_by_page_post_unique,\n        \n            COALESCE(page_impressions_by_checkin, 0) AS page_impressions_by_checkin,\n        \n            COALESCE(page_impressions_by_checkin_unique, 0) AS page_impressions_by_checkin_unique,\n        \n            COALESCE(page_impressions_nonviral, 0) AS page_impressions_nonviral,\n        \n            COALESCE(page_impressions_nonviral_unique, 0) AS page_impressions_nonviral_unique,\n        \n            COALESCE(page_impressions_organic_unique_v2, 0) AS page_impressions_organic_unique_v2,\n        \n            COALESCE(page_impressions_organic_v2, 0) AS page_impressions_organic_v2,\n        \n            COALESCE(page_impressions_paid, 0) AS page_impressions_paid,\n        \n            COALESCE(page_impressions_paid_unique, 0) AS page_impressions_paid_unique,\n        \n            COALESCE(page_impressions_unique, 0) AS page_impressions_unique,\n        \n            COALESCE(page_impressions_viral, 0) AS page_impressions_viral,\n        \n            COALESCE(page_impressions_viral_unique, 0) AS page_impressions_viral_unique,\n        \n            COALESCE(page_negative_feedback, 0) AS page_negative_feedback,\n        \n            COALESCE(page_places_checkin_total, 0) AS page_places_checkin_total,\n        \n            COALESCE(page_places_checkin_total_unique, 0) AS page_places_checkin_total_unique,\n        \n            COALESCE(page_places_checkin_mobile, 0) AS page_places_checkin_mobile,\n        \n            COALESCE(page_places_checkin_mobile_unique, 0) AS page_places_checkin_mobile_unique,\n        \n            COALESCE(page_positive_feedback_by_link, 0) AS page_positive_feedback_by_link,\n        \n            COALESCE(page_positive_feedback_by_link_unique, 0) AS page_positive_feedback_by_link_unique,\n        \n            COALESCE(page_positive_feedback_by_like, 0) AS page_positive_feedback_by_like,\n        \n            COALESCE(page_positive_feedback_by_like_unique, 0) AS page_positive_feedback_by_like_unique,\n        \n            COALESCE(page_positive_feedback_by_comment, 0) AS page_positive_feedback_by_comment,\n        \n            COALESCE(page_positive_feedback_by_comment_unique, 0) AS page_positive_feedback_by_comment_unique,\n        \n            COALESCE(page_positive_feedback_by_other, 0) AS page_positive_feedback_by_other,\n        \n            COALESCE(page_positive_feedback_by_other_unique, 0) AS page_positive_feedback_by_other_unique,\n        \n            COALESCE(page_post_engagements, 0) AS page_post_engagements,\n        \n            COALESCE(page_posts_impressions, 0) AS page_posts_impressions,\n        \n            COALESCE(page_posts_impressions_nonviral, 0) AS page_posts_impressions_nonviral,\n        \n            COALESCE(page_posts_impressions_nonviral_unique, 0) AS page_posts_impressions_nonviral_unique,\n        \n            COALESCE(page_posts_impressions_organic, 0) AS page_posts_impressions_organic,\n        \n            COALESCE(page_posts_impressions_organic_unique, 0) AS page_posts_impressions_organic_unique,\n        \n            COALESCE(page_posts_impressions_paid, 0) AS page_posts_impressions_paid,\n        \n            COALESCE(page_posts_impressions_paid_unique, 0) AS page_posts_impressions_paid_unique,\n        \n            COALESCE(page_posts_impressions_unique, 0) AS page_posts_impressions_unique,\n        \n            COALESCE(page_posts_impressions_viral, 0) AS page_posts_impressions_viral,\n        \n            COALESCE(page_posts_impressions_viral_unique, 0) AS page_posts_impressions_viral_unique,\n        \n            COALESCE(page_posts_served_impressions_organic_unique, 0) AS page_posts_served_impressions_organic_unique,\n        \n            COALESCE(page_video_complete_views_30s, 0) AS page_video_complete_views_30s,\n        \n            COALESCE(page_video_complete_views_30s_autoplayed, 0) AS page_video_complete_views_30s_autoplayed,\n        \n            COALESCE(page_video_complete_views_30s_click_to_play, 0) AS page_video_complete_views_30s_click_to_play,\n        \n            COALESCE(page_video_complete_views_30s_organic, 0) AS page_video_complete_views_30s_organic,\n        \n            COALESCE(page_video_complete_views_30s_paid, 0) AS page_video_complete_views_30s_paid,\n        \n            COALESCE(page_video_complete_views_30s_repeat_views, 0) AS page_video_complete_views_30s_repeat_views,\n        \n            COALESCE(page_video_complete_views_30s_unique, 0) AS page_video_complete_views_30s_unique,\n        \n            COALESCE(page_video_repeat_views, 0) AS page_video_repeat_views,\n        \n            COALESCE(page_video_view_time, 0) AS page_video_view_time,\n        \n            COALESCE(page_video_views, 0) AS page_video_views,\n        \n            COALESCE(page_video_views_10s, 0) AS page_video_views_10s,\n        \n            COALESCE(page_video_views_10s_autoplayed, 0) AS page_video_views_10s_autoplayed,\n        \n            COALESCE(page_video_views_10s_click_to_play, 0) AS page_video_views_10s_click_to_play,\n        \n            COALESCE(page_video_views_10s_organic, 0) AS page_video_views_10s_organic,\n        \n            COALESCE(page_video_views_10s_paid, 0) AS page_video_views_10s_paid,\n        \n            COALESCE(page_video_views_10s_repeat, 0) AS page_video_views_10s_repeat,\n        \n            COALESCE(page_video_views_10s_unique, 0) AS page_video_views_10s_unique,\n        \n            COALESCE(page_video_views_autoplayed, 0) AS page_video_views_autoplayed,\n        \n            COALESCE(page_video_views_by_page_uploaded, 0) AS page_video_views_by_page_uploaded,\n        \n            COALESCE(page_video_views_by_page_uploaded_from_crossposts, 0) AS page_video_views_by_page_uploaded_from_crossposts,\n        \n            COALESCE(page_video_views_by_page_uploaded_from_shares, 0) AS page_video_views_by_page_uploaded_from_shares,\n        \n            COALESCE(page_video_views_by_page_hosted_crosspost, 0) AS page_video_views_by_page_hosted_crosspost,\n        \n            COALESCE(page_video_views_by_page_hosted_share, 0) AS page_video_views_by_page_hosted_share,\n        \n            COALESCE(page_video_views_by_page_owned, 0) AS page_video_views_by_page_owned,\n        \n            COALESCE(page_video_views_click_to_play, 0) AS page_video_views_click_to_play,\n        \n            COALESCE(page_video_views_organic, 0) AS page_video_views_organic,\n        \n            COALESCE(page_video_views_paid, 0) AS page_video_views_paid,\n        \n            COALESCE(page_video_views_unique, 0) AS page_video_views_unique,\n        \n            COALESCE(page_views_logged_in_total, 0) AS page_views_logged_in_total,\n        \n            COALESCE(page_views_logged_in_unique, 0) AS page_views_logged_in_unique,\n        \n            COALESCE(page_views_total, 0) AS page_views_total,\n        \n            COALESCE(page_views_by_internal_referer_logged_in_unique_other, 0) AS page_views_by_internal_referer_logged_in_unique_other,\n        \n            COALESCE(page_views_by_internal_referer_logged_in_unique_none, 0) AS page_views_by_internal_referer_logged_in_unique_none,\n        \n            COALESCE(page_views_by_internal_referer_logged_in_unique_search, 0) AS page_views_by_internal_referer_logged_in_unique_search,\n        \n            COALESCE(page_views_by_profile_tab_logged_in_unique_photos, 0) AS page_views_by_profile_tab_logged_in_unique_photos,\n        \n            COALESCE(page_views_by_profile_tab_logged_in_unique_home, 0) AS page_views_by_profile_tab_logged_in_unique_home,\n        \n            COALESCE(page_views_by_profile_tab_logged_in_unique_about, 0) AS page_views_by_profile_tab_logged_in_unique_about,\n        \n            COALESCE(page_views_by_profile_tab_total_photos, 0) AS page_views_by_profile_tab_total_photos,\n        \n            COALESCE(page_views_by_profile_tab_total_home, 0) AS page_views_by_profile_tab_total_home,\n        \n            COALESCE(page_views_by_profile_tab_total_about, 0) AS page_views_by_profile_tab_total_about,\n        \n            COALESCE(page_views_by_site_logged_in_unique_other, 0) AS page_views_by_site_logged_in_unique_other,\n        \n            COALESCE(page_views_by_site_logged_in_unique_mobile, 0) AS page_views_by_site_logged_in_unique_mobile,\n        \n            COALESCE(page_views_by_site_logged_in_unique_www, 0) AS page_views_by_site_logged_in_unique_www,\n        snapshot_date\n    FROM\n        `sipher-data-testing`.`staging_social`.`stg_facebook_page_insights` \n)\n, final AS (\n    SELECT\n        pi.end_time_insights\n        , po.page_id\n        , po.page_name\n        , po.username\n        , po.followers_count\n        , po.category\n        , po.link\n        , \n            pi.page_actions_post_reactions_like_total,\n        \n            pi.page_actions_post_reactions_love_total,\n        \n            pi.page_actions_post_reactions_wow_total,\n        \n            pi.page_actions_post_reactions_haha_total,\n        \n            pi.page_actions_post_reactions_sorry_total,\n        \n            pi.page_actions_post_reactions_anger_total,\n        \n            pi.page_consumptions,\n        \n            pi.page_consumptions_unique,\n        \n            pi.page_consumptions_by_other_clicks,\n        \n            pi.page_consumptions_by_other_clicks_unique,\n        \n            pi.page_consumptions_by_photo_view,\n        \n            pi.page_consumptions_by_photo_view_unique,\n        \n            pi.page_content_activity,\n        \n            pi.page_content_activity_by_fan,\n        \n            pi.page_content_activity_by_fan_unique,\n        \n            pi.page_content_activity_by_page_post,\n        \n            pi.page_content_activity_by_page_post_unique,\n        \n            pi.page_content_activity_by_other,\n        \n            pi.page_content_activity_by_other_unique,\n        \n            pi.page_engaged_users,\n        \n            pi.page_fans,\n        \n            pi.page_fan_adds_total,\n        \n            pi.page_fan_adds_paid,\n        \n            pi.page_fan_adds_unpaid,\n        \n            pi.page_fan_removes,\n        \n            pi.page_fan_removes_unique,\n        \n            pi.page_impressions,\n        \n            pi.page_impressions_by_page_post,\n        \n            pi.page_impressions_by_page_post_unique,\n        \n            pi.page_impressions_by_checkin,\n        \n            pi.page_impressions_by_checkin_unique,\n        \n            pi.page_impressions_nonviral,\n        \n            pi.page_impressions_nonviral_unique,\n        \n            pi.page_impressions_organic_unique_v2,\n        \n            pi.page_impressions_organic_v2,\n        \n            pi.page_impressions_paid,\n        \n            pi.page_impressions_paid_unique,\n        \n            pi.page_impressions_unique,\n        \n            pi.page_impressions_viral,\n        \n            pi.page_impressions_viral_unique,\n        \n            pi.page_negative_feedback,\n        \n            pi.page_places_checkin_total,\n        \n            pi.page_places_checkin_total_unique,\n        \n            pi.page_places_checkin_mobile,\n        \n            pi.page_places_checkin_mobile_unique,\n        \n            pi.page_positive_feedback_by_link,\n        \n            pi.page_positive_feedback_by_link_unique,\n        \n            pi.page_positive_feedback_by_like,\n        \n            pi.page_positive_feedback_by_like_unique,\n        \n            pi.page_positive_feedback_by_comment,\n        \n            pi.page_positive_feedback_by_comment_unique,\n        \n            pi.page_positive_feedback_by_other,\n        \n            pi.page_positive_feedback_by_other_unique,\n        \n            pi.page_post_engagements,\n        \n            pi.page_posts_impressions,\n        \n            pi.page_posts_impressions_nonviral,\n        \n            pi.page_posts_impressions_nonviral_unique,\n        \n            pi.page_posts_impressions_organic,\n        \n            pi.page_posts_impressions_organic_unique,\n        \n            pi.page_posts_impressions_paid,\n        \n            pi.page_posts_impressions_paid_unique,\n        \n            pi.page_posts_impressions_unique,\n        \n            pi.page_posts_impressions_viral,\n        \n            pi.page_posts_impressions_viral_unique,\n        \n            pi.page_posts_served_impressions_organic_unique,\n        \n            pi.page_video_complete_views_30s,\n        \n            pi.page_video_complete_views_30s_autoplayed,\n        \n            pi.page_video_complete_views_30s_click_to_play,\n        \n            pi.page_video_complete_views_30s_organic,\n        \n            pi.page_video_complete_views_30s_paid,\n        \n            pi.page_video_complete_views_30s_repeat_views,\n        \n            pi.page_video_complete_views_30s_unique,\n        \n            pi.page_video_repeat_views,\n        \n            pi.page_video_view_time,\n        \n            pi.page_video_views,\n        \n            pi.page_video_views_10s,\n        \n            pi.page_video_views_10s_autoplayed,\n        \n            pi.page_video_views_10s_click_to_play,\n        \n            pi.page_video_views_10s_organic,\n        \n            pi.page_video_views_10s_paid,\n        \n            pi.page_video_views_10s_repeat,\n        \n            pi.page_video_views_10s_unique,\n        \n            pi.page_video_views_autoplayed,\n        \n            pi.page_video_views_by_page_uploaded,\n        \n            pi.page_video_views_by_page_uploaded_from_crossposts,\n        \n            pi.page_video_views_by_page_uploaded_from_shares,\n        \n            pi.page_video_views_by_page_hosted_crosspost,\n        \n            pi.page_video_views_by_page_hosted_share,\n        \n            pi.page_video_views_by_page_owned,\n        \n            pi.page_video_views_click_to_play,\n        \n            pi.page_video_views_organic,\n        \n            pi.page_video_views_paid,\n        \n            pi.page_video_views_unique,\n        \n            pi.page_views_logged_in_total,\n        \n            pi.page_views_logged_in_unique,\n        \n            pi.page_views_total,\n        \n            pi.page_views_by_internal_referer_logged_in_unique_other,\n        \n            pi.page_views_by_internal_referer_logged_in_unique_none,\n        \n            pi.page_views_by_internal_referer_logged_in_unique_search,\n        \n            pi.page_views_by_profile_tab_logged_in_unique_photos,\n        \n            pi.page_views_by_profile_tab_logged_in_unique_home,\n        \n            pi.page_views_by_profile_tab_logged_in_unique_about,\n        \n            pi.page_views_by_profile_tab_total_photos,\n        \n            pi.page_views_by_profile_tab_total_home,\n        \n            pi.page_views_by_profile_tab_total_about,\n        \n            pi.page_views_by_site_logged_in_unique_other,\n        \n            pi.page_views_by_site_logged_in_unique_mobile,\n        \n            pi.page_views_by_site_logged_in_unique_www,\n        FROM\n        page_ins pi\n    LEFT JOIN pg_over po ON pi.end_time_insights = po.snapshot_date AND pi.page_id = po.page_id\n)\n\nSELECT * FROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_facebook_page`"
        },
        "model.dbt_sipher.fct_youtube_channel": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_youtube_overview"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition_by": {
                    "field": "date_tzutc",
                    "data_type": "date",
                    "granularity": "day"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "fct_youtube_channel"
            ],
            "unique_id": "model.dbt_sipher.fct_youtube_channel",
            "raw_code": "{{- config(\n  materialized='table',\n  partition_by={\n      \"field\": \"date_tzutc\",\n      \"data_type\": \"date\",\n      \"granularity\": \"day\"\n},\n) -}}\n\nWITH ov AS (\nSELECT\n    date_tzutc\n    , channel_id\n    , channel_name\n    , description\n    , custom_url\n    , published_at\n    , privacy_status\n    , long_uploads_status\n    , made_for_kids\n    , self_declared_made_for_kids\n    , view_count\n    , subscriber_count\n    , hidden_subscriber_count\n    , subscribers_gained\n    , subscribers_lost\n    , (subscribers_gained - subscribers_lost) AS subscriber_getted\n    , video_count\n    , views\n    , likes\n    , dislikes\n    , shares\n    , est_minutes_watched\n    , avg_view_duration\n    , avg_view_percentage\n    , annotation_click_through_rate\n    , annotation_close_rate\n    , annotation_impressions\nFROM\n    {{ ref('stg_youtube_overview') }}\n)\n\nSELECT * FROM ov",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/fct_youtube_channel.sql",
            "original_file_path": "models/marts/social/fct_youtube_channel.sql",
            "name": "fct_youtube_channel",
            "alias": "fct_youtube_channel",
            "checksum": {
                "name": "sha256",
                "checksum": "797c88c480ffa507562727e24520355efbe82312f1cd6a564fe8035abd412ee2"
            },
            "tags": [],
            "refs": [
                [
                    "stg_youtube_overview"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/fct_youtube_channel.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "table",
                "partition_by": {
                    "field": "date_tzutc",
                    "data_type": "date",
                    "granularity": "day"
                }
            },
            "created_at": 1705293861.7637353,
            "compiled_code": "WITH ov AS (\nSELECT\n    date_tzutc\n    , channel_id\n    , channel_name\n    , description\n    , custom_url\n    , published_at\n    , privacy_status\n    , long_uploads_status\n    , made_for_kids\n    , self_declared_made_for_kids\n    , view_count\n    , subscriber_count\n    , hidden_subscriber_count\n    , subscribers_gained\n    , subscribers_lost\n    , (subscribers_gained - subscribers_lost) AS subscriber_getted\n    , video_count\n    , views\n    , likes\n    , dislikes\n    , shares\n    , est_minutes_watched\n    , avg_view_duration\n    , avg_view_percentage\n    , annotation_click_through_rate\n    , annotation_close_rate\n    , annotation_impressions\nFROM\n    `sipher-data-testing`.`staging_social`.`stg_youtube_overview`\n)\n\nSELECT * FROM ov",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`fct_youtube_channel`"
        },
        "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance",
                    "model.dbt_sipher.int_user_current_inventory_balance"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_inventory",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_inventory",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_inventory",
                "fct_sipher_odyssey_user_current_inventory_balance"
            ],
            "unique_id": "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "raw_code": "{{- config(\n  materialized ='view',\n) -}}\n\nWITH character AS(\n  SELECT \n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    int.item_sub_type AS item_type,\n    dim.item_name AS item_sub_type,\n    dim.race AS race,\n    int.rarity AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character` dim\n  ON dim.item_id = int.item_sub_type AND dim.item_category = int.item_type\n  WHERE int.item_type = 'Character'\n  ORDER BY item_sub_type, instance_id\n)\n\n, blueprint AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_name AS item_type,\n    dim.item_type AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    COALESCE(int.rarity, dim.rarity) AS rarity,\n    COALESCE(int.tier, CAST(dim.tier AS INT64)) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_blueprint` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_blueprint` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Blueprint', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_shards AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_shards` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_shards` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Shards', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_cores AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_cores` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_cores` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Cores', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, character_exp AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    CAST(NULL AS INT64) AS ps,\n    CAST(NULL AS STRING) AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character_exp` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character_exp` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('CharacterExp', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, rarity_core AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('RarityCore', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, currency AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_currency` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_currency` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'ConsumableItem')\n  ORDER BY item_type DESC\n)\n\n, capsule AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_capsule` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'Capsule')\n  ORDER BY item_type DESC\n)\n\n-- , banner_capsule AS(\n--   SELECT\n--     int.user_id,\n--     int.instance_id,\n--     int.item_code,\n--     int.item_type AS item_category,\n--     dim.item_category AS item_type,\n--     int.item_sub_type AS item_sub_type,\n--     CAST(NULL AS STRING)  AS race,\n--     CAST(NULL AS STRING) AS rarity,\n--     CAST(NULL AS INT64) AS tier,\n    -- int.level,\n--     int.ps AS ps,\n--     int.boost AS boost,\n--     int.updated_balance,\n--     int.updated_balance_date,\n--     int.updated_balance_timestamp,\n--   FROM {{ ref('int_user_current_inventory_balance') }} int\n--   LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_banner_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_meta_banner_capsule` dim\n--   ON dim.item_id = int.instance_id \n--   WHERE int.item_type IN ('Currency', 'Capsule')\n--   ORDER BY item_type DESC\n-- )\n\n, software AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_software` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_software` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Software')\n  ORDER BY item_type DESC\n)\n\n, weapon AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    dim.weapon_subtype AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Weapon')\n  ORDER BY item_type DESC\n)\n\n, weapon_part AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    COALESCE(int.item_sub_type, dim.part_type) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Part')\n  ORDER BY item_type DESC\n)\n\n, gear AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    COALESCE(int.item_sub_type, dim.gear_type) AS item_sub_type,\n    dim.race AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_current_inventory_balance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_gear` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_gear` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Gear')\n  ORDER BY item_type DESC\n)\n\n, union_data AS(\n  SELECT * FROM character\n  UNION ALL\n  SELECT * FROM blueprint WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_shards WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_cores WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM character_exp WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM rarity_core WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM currency WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM capsule WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM software\n  UNION ALL\n  SELECT * FROM weapon\n  UNION ALL\n  SELECT * FROM weapon_part\n  UNION ALL\n  SELECT * FROM gear\n)\n\n\nSELECT *\nFROM union_data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_inventory/fct_sipher_odyssey_user_current_inventory_balance.sql",
            "original_file_path": "models/marts/sipher_odyssey_inventory/fct_sipher_odyssey_user_current_inventory_balance.sql",
            "name": "fct_sipher_odyssey_user_current_inventory_balance",
            "alias": "fct_sipher_odyssey_user_current_inventory_balance",
            "checksum": {
                "name": "sha256",
                "checksum": "c0a248b868a337ddb493efdd2f2fe46ee63e0fd02f1a875d07c2062ccc2f44cc"
            },
            "tags": [],
            "refs": [
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ],
                [
                    "int_user_current_inventory_balance"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_inventory/fct_sipher_odyssey_user_current_inventory_balance.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_inventory",
                "materialized": "view"
            },
            "created_at": 1705293861.768058,
            "compiled_code": "WITH character AS(\n  SELECT \n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    int.item_sub_type AS item_type,\n    dim.item_name AS item_sub_type,\n    dim.race AS race,\n    int.rarity AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character` dim\n  ON dim.item_id = int.item_sub_type AND dim.item_category = int.item_type\n  WHERE int.item_type = 'Character'\n  ORDER BY item_sub_type, instance_id\n)\n\n, blueprint AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_name AS item_type,\n    dim.item_type AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    COALESCE(int.rarity, dim.rarity) AS rarity,\n    COALESCE(int.tier, CAST(dim.tier AS INT64)) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_blueprint` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_blueprint` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Blueprint', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_shards AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_shards` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_shards` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Shards', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_cores AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_cores` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_cores` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Cores', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, character_exp AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    CAST(NULL AS INT64) AS ps,\n    CAST(NULL AS STRING) AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character_exp` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character_exp` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('CharacterExp', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, rarity_core AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('RarityCore', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, currency AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_currency` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_currency` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'ConsumableItem')\n  ORDER BY item_type DESC\n)\n\n, capsule AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_capsule` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'Capsule')\n  ORDER BY item_type DESC\n)\n\n-- , banner_capsule AS(\n--   SELECT\n--     int.user_id,\n--     int.instance_id,\n--     int.item_code,\n--     int.item_type AS item_category,\n--     dim.item_category AS item_type,\n--     int.item_sub_type AS item_sub_type,\n--     CAST(NULL AS STRING)  AS race,\n--     CAST(NULL AS STRING) AS rarity,\n--     CAST(NULL AS INT64) AS tier,\n    -- int.level,\n--     int.ps AS ps,\n--     int.boost AS boost,\n--     int.updated_balance,\n--     int.updated_balance_date,\n--     int.updated_balance_timestamp,\n--   FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n--   LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_banner_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_meta_banner_capsule` dim\n--   ON dim.item_id = int.instance_id \n--   WHERE int.item_type IN ('Currency', 'Capsule')\n--   ORDER BY item_type DESC\n-- )\n\n, software AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_software` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_software` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Software')\n  ORDER BY item_type DESC\n)\n\n, weapon AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    dim.weapon_subtype AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Weapon')\n  ORDER BY item_type DESC\n)\n\n, weapon_part AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    COALESCE(int.item_sub_type, dim.part_type) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Part')\n  ORDER BY item_type DESC\n)\n\n, gear AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    COALESCE(int.item_sub_type, dim.gear_type) AS item_sub_type,\n    dim.race AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_gear` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_gear` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Gear')\n  ORDER BY item_type DESC\n)\n\n, union_data AS(\n  SELECT * FROM character\n  UNION ALL\n  SELECT * FROM blueprint WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_shards WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_cores WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM character_exp WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM rarity_core WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM currency WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM capsule WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM software\n  UNION ALL\n  SELECT * FROM weapon\n  UNION ALL\n  SELECT * FROM weapon_part\n  UNION ALL\n  SELECT * FROM gear\n)\n\n\nSELECT *\nFROM union_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_inventory`.`fct_sipher_odyssey_user_current_inventory_balance`"
        },
        "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_airflow_macros.ds"
                ],
                "nodes": [
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
                    "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_inventory",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "cluster_by": [
                    "user_id",
                    "item_category"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_inventory",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_inventory",
                "fct_sipher_odyssey_user_latest_inventory_balance"
            ],
            "unique_id": "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "raw_code": "{{- config(\n  materialized ='table',\n  cluster_by = ['user_id', 'item_category']\n) -}}\n\nWITH character AS(\n  SELECT \n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    int.item_sub_type AS item_type,\n    dim.item_name AS item_sub_type,\n    dim.race AS race,\n    int.rarity AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character` dim\n  ON dim.item_id = int.item_sub_type AND dim.item_category = int.item_type\n  WHERE int.item_type = 'Character'\n  ORDER BY item_sub_type, instance_id\n)\n\n, blueprint AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_name AS item_type,\n    dim.item_type AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    COALESCE(int.rarity, dim.rarity) AS rarity,\n    COALESCE(int.tier, CAST(dim.tier AS INT64)) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_blueprint` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_blueprint` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Blueprint', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_shards AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_shards` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_shards` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Shards', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_cores AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_cores` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_cores` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Cores', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, character_exp AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    CAST(NULL AS INT64) AS ps,\n    CAST(NULL AS STRING) AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character_exp` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character_exp` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('CharacterExp', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, rarity_core AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('RarityCore', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, currency AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_currency` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_currency` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'ConsumableItem')\n  ORDER BY item_type DESC\n)\n\n, capsule AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_capsule` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'Capsule')\n  ORDER BY item_type DESC\n)\n\n-- , banner_capsule AS(\n--   SELECT\n--     int.user_id,\n--     int.instance_id,\n--     int.item_code,\n--     int.item_type AS item_category,\n--     dim.item_category AS item_type,\n--     int.item_sub_type AS item_sub_type,\n--     CAST(NULL AS STRING)  AS race,\n--     CAST(NULL AS STRING) AS rarity,\n--     CAST(NULL AS INT64) AS tier,\n    -- int.level,\n--     int.ps AS ps,\n--     int.boost AS boost,\n--     int.updated_balance,\n--     int.updated_balance_date,\n--     int.updated_balance_timestamp,\n--   FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n--   LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_banner_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_meta_banner_capsule` dim\n--   ON dim.item_id = int.instance_id \n--   WHERE int.item_type IN ('Currency', 'Capsule')\n--   ORDER BY item_type DESC\n-- )\n\n, software AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_software` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_software` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Software')\n  ORDER BY item_type DESC\n)\n\n, weapon AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    dim.weapon_subtype AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Weapon')\n  ORDER BY item_type DESC\n)\n\n, weapon_part AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    COALESCE(int.item_sub_type, dim.part_type) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Part')\n  ORDER BY item_type DESC\n)\n\n, gear AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    COALESCE(int.item_sub_type, dim.gear_type) AS item_sub_type,\n    dim.race AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM {{ ref('int_user_inventory_balance_latest_update_by_instance') }} int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_gear` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_gear` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Gear')\n  ORDER BY item_type DESC\n)\n\n, union_data AS(\n  SELECT * FROM character\n  UNION ALL\n  SELECT * FROM blueprint WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_shards WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_cores WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM character_exp WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM rarity_core WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM currency WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM capsule WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM software\n  UNION ALL\n  SELECT * FROM weapon\n  UNION ALL\n  SELECT * FROM weapon_part\n  UNION ALL\n  SELECT * FROM gear\n)\n\n\nSELECT *,\nDATE('{{ var(\"ds\")}}') AS snapshot_date\n-- '{{ dbt_airflow_macros.ds(timezone=\"UTC\") }}' AS snapshot_date\nFROM union_data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_inventory/fct_sipher_odyssey_user_latest_inventory_balance.sql",
            "original_file_path": "models/marts/sipher_odyssey_inventory/fct_sipher_odyssey_user_latest_inventory_balance.sql",
            "name": "fct_sipher_odyssey_user_latest_inventory_balance",
            "alias": "fct_sipher_odyssey_user_latest_inventory_balance",
            "checksum": {
                "name": "sha256",
                "checksum": "48ecb47427a9a07521acbf6be902355b39dab76a1deb199b621a4057c29a885b"
            },
            "tags": [],
            "refs": [
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ],
                [
                    "int_user_inventory_balance_latest_update_by_instance"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_inventory/fct_sipher_odyssey_user_latest_inventory_balance.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_inventory",
                "materialized": "table",
                "cluster_by": [
                    "user_id",
                    "item_category"
                ]
            },
            "created_at": 1705293861.773303,
            "compiled_code": "WITH character AS(\n  SELECT \n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    int.item_sub_type AS item_type,\n    dim.item_name AS item_sub_type,\n    dim.race AS race,\n    int.rarity AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character` dim\n  ON dim.item_id = int.item_sub_type AND dim.item_category = int.item_type\n  WHERE int.item_type = 'Character'\n  ORDER BY item_sub_type, instance_id\n)\n\n, blueprint AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_name AS item_type,\n    dim.item_type AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    COALESCE(int.rarity, dim.rarity) AS rarity,\n    COALESCE(int.tier, CAST(dim.tier AS INT64)) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_blueprint` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_blueprint` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Blueprint', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_shards AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_shards` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_shards` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Shards', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, em_cores AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    dim.race AS race,\n    CAST(NULL AS STRING) AS rarity,\n    int.tier AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_em_cores` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_em_cores` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('EM Cores', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, character_exp AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING) AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    CAST(NULL AS INT64) AS ps,\n    CAST(NULL AS STRING) AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_character_exp` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_character_exp` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('CharacterExp', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, rarity_core AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_rarity_core` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('RarityCore', 'Currency')\n  ORDER BY item_type DESC\n)\n\n, currency AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    CAST(NULL AS STRING) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_currency` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_currency` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'ConsumableItem')\n  ORDER BY item_type DESC\n)\n\n, capsule AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    CAST(NULL AS STRING) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_capsule` dim\n  ON dim.item_id = int.instance_id \n  WHERE int.item_type IN ('Currency', 'Capsule')\n  ORDER BY item_type DESC\n)\n\n-- , banner_capsule AS(\n--   SELECT\n--     int.user_id,\n--     int.instance_id,\n--     int.item_code,\n--     int.item_type AS item_category,\n--     dim.item_category AS item_type,\n--     int.item_sub_type AS item_sub_type,\n--     CAST(NULL AS STRING)  AS race,\n--     CAST(NULL AS STRING) AS rarity,\n--     CAST(NULL AS INT64) AS tier,\n    -- int.level,\n--     int.ps AS ps,\n--     int.boost AS boost,\n--     int.updated_balance,\n--     int.updated_balance_date,\n--     int.updated_balance_timestamp,\n--   FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n--   LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_banner_capsule` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_meta_banner_capsule` dim\n--   ON dim.item_id = int.instance_id \n--   WHERE int.item_type IN ('Currency', 'Capsule')\n--   ORDER BY item_type DESC\n-- )\n\n, software AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    int.item_sub_type AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    CAST(NULL AS INT64) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_software` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_software` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Software')\n  ORDER BY item_type DESC\n)\n\n, weapon AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    dim.weapon_subtype AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Weapon')\n  ORDER BY item_type DESC\n)\n\n, weapon_part AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.weapon_type AS item_type,\n    COALESCE(int.item_sub_type, dim.part_type) AS item_sub_type,\n    CAST(NULL AS STRING)  AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_weapon_part` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Part')\n  ORDER BY item_type DESC\n)\n\n, gear AS(\n  SELECT\n    int.user_id,\n    int.instance_id,\n    int.item_code,\n    int.item_type AS item_category,\n    dim.item_category AS item_type,\n    COALESCE(int.item_sub_type, dim.gear_type) AS item_sub_type,\n    dim.race AS race,\n    COALESCE(dim.rarity, int.rarity) AS rarity,\n    COALESCE(CAST(dim.tier AS INT64), int.tier) AS tier,\n    int.level,\n    int.ps AS ps,\n    int.boost AS boost,\n    int.updated_balance,\n    int.updated_balance_date,\n    int.updated_balance_timestamp,\n  FROM `sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance` int\n  LEFT JOIN `sipher-data-platform.reporting_game_meta.dim_sipher_meta_gear` dim\n--   LEFT JOIN `sipher-data-testing.reporting_game_meta.dim_sipher_meta_gear` dim\n  ON dim.item_id = int.item_code \n  WHERE int.item_type IN ('Gear')\n  ORDER BY item_type DESC\n)\n\n, union_data AS(\n  SELECT * FROM character\n  UNION ALL\n  SELECT * FROM blueprint WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_shards WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM em_cores WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM character_exp WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM rarity_core WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM currency WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM capsule WHERE item_type IS NOT NULL\n  UNION ALL\n  SELECT * FROM software\n  UNION ALL\n  SELECT * FROM weapon\n  UNION ALL\n  SELECT * FROM weapon_part\n  UNION ALL\n  SELECT * FROM gear\n)\n\n\nSELECT *,\nDATE('') AS snapshot_date\n-- '2024-01-19' AS snapshot_date\nFROM union_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_inventory`.`fct_sipher_odyssey_user_latest_inventory_balance`"
        },
        "model.dbt_sipher.int_user_current_inventory_balance": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update",
                    "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update_today"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_inventory",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_inventory",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_inventory",
                "intermediate",
                "int_user_current_inventory_balance"
            ],
            "unique_id": "model.dbt_sipher.int_user_current_inventory_balance",
            "raw_code": "{{- config(\n  materialized='view'\n) -}}\n\nWITH staging_inventory_balance AS(\n  SELECT * FROM {{ ref('stg_sipher_server__raw_inventory_balancing_update') }}\n  UNION ALL\n  SELECT * FROM {{ ref('stg_sipher_server__raw_inventory_balancing_update_today') }}\n)\n\n, instance_last_update_ts AS(\n  SELECT\n    user_id,\n    instance_id,\n    MAX(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM staging_inventory_balance\n  -- WHERE updated_balance_date <= '2023-12-25'\n  -- WHERE updated_balance_date BETWEEN DATE_ADD('2023-12-26', INTERVAL -3 DAY) AND '2023-12-26'\n  GROUP BY user_id, instance_id\n)\n\n, instance_all_data_raw AS(\n  SELECT DISTINCT\n    user_id,\n    instance_id,\n    item_code,\n    item_type,\n    item_sub_type,\n    rarity,\n    MAX(tier) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS tier,\n    MAX(level) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS level,\n    MAX(ps) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS ps,\n    boost,\n    MAX(updated_balance) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS updated_balance,\n    updated_balance_date,\n    updated_balance_timestamp\n  FROM staging_inventory_balance \n  -- WHERE updated_balance_date <= '2023-12-25'\n  -- WHERE updated_balance_date BETWEEN DATE_ADD('2023-12-26', INTERVAL -3 DAY) AND '2023-12-26'\n  ORDER BY item_type, instance_id\n  )\n\n, instance_all_data AS(\n  SELECT DISTINCT *\n  FROM instance_all_data_raw\n)\n\n  SELECT DISTINCT\n    instance_all_data.* EXCEPT(updated_balance_timestamp),\n    TIMESTAMP_MICROS(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM instance_all_data\n  INNER JOIN instance_last_update_ts USING(instance_id, updated_balance_timestamp, user_id)\n  -- ORDER BY updated_balance_timestamp\n\n--This model is capture the latest inventory balance update of each user updated on airflow - this does not includes historical balance",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_inventory/intermediate/int_user_current_inventory_balance.sql",
            "original_file_path": "models/marts/sipher_odyssey_inventory/intermediate/int_user_current_inventory_balance.sql",
            "name": "int_user_current_inventory_balance",
            "alias": "int_user_current_inventory_balance",
            "checksum": {
                "name": "sha256",
                "checksum": "6d456ff73bdbd983861a5e49c7d05ce77ef074fb32caece41e8dd420968ca88b"
            },
            "tags": [],
            "refs": [
                [
                    "stg_sipher_server__raw_inventory_balancing_update"
                ],
                [
                    "stg_sipher_server__raw_inventory_balancing_update_today"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_inventory/intermediate/int_user_current_inventory_balance.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_inventory",
                "materialized": "view"
            },
            "created_at": 1705293861.7792027,
            "compiled_code": "WITH staging_inventory_balance AS(\n  SELECT * FROM `sipher-data-testing`.`staging_sipher_server`.`stg_sipher_server__raw_inventory_balancing_update`\n  UNION ALL\n  SELECT * FROM `sipher-data-testing`.`staging_sipher_server`.`stg_sipher_server__raw_inventory_balancing_update_today`\n)\n\n, instance_last_update_ts AS(\n  SELECT\n    user_id,\n    instance_id,\n    MAX(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM staging_inventory_balance\n  -- WHERE updated_balance_date <= '2023-12-25'\n  -- WHERE updated_balance_date BETWEEN DATE_ADD('2023-12-26', INTERVAL -3 DAY) AND '2023-12-26'\n  GROUP BY user_id, instance_id\n)\n\n, instance_all_data_raw AS(\n  SELECT DISTINCT\n    user_id,\n    instance_id,\n    item_code,\n    item_type,\n    item_sub_type,\n    rarity,\n    MAX(tier) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS tier,\n    MAX(level) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS level,\n    MAX(ps) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS ps,\n    boost,\n    MAX(updated_balance) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS updated_balance,\n    updated_balance_date,\n    updated_balance_timestamp\n  FROM staging_inventory_balance \n  -- WHERE updated_balance_date <= '2023-12-25'\n  -- WHERE updated_balance_date BETWEEN DATE_ADD('2023-12-26', INTERVAL -3 DAY) AND '2023-12-26'\n  ORDER BY item_type, instance_id\n  )\n\n, instance_all_data AS(\n  SELECT DISTINCT *\n  FROM instance_all_data_raw\n)\n\n  SELECT DISTINCT\n    instance_all_data.* EXCEPT(updated_balance_timestamp),\n    TIMESTAMP_MICROS(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM instance_all_data\n  INNER JOIN instance_last_update_ts USING(instance_id, updated_balance_timestamp, user_id)\n  -- ORDER BY updated_balance_timestamp\n\n--This model is capture the latest inventory balance update of each user updated on airflow - this does not includes historical balance",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_current_inventory_balance`"
        },
        "model.dbt_sipher.int_user_inventory_balance_new_update_by_day": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_inventory",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": [
                    "user_id",
                    "instance_id",
                    "updated_balance_timestamp",
                    "updated_balance_date"
                ],
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "cluster_by": [
                    "user_id"
                ],
                "partition_by": {
                    "field": "updated_balance_date",
                    "data_type": "date"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_inventory",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_inventory",
                "intermediate",
                "int_user_inventory_balance_new_update_by_day"
            ],
            "unique_id": "model.dbt_sipher.int_user_inventory_balance_new_update_by_day",
            "raw_code": "{{- config(\n  materialized ='incremental',\n  unique_key = ['user_id', 'instance_id', 'updated_balance_timestamp', 'updated_balance_date'],\n  partition_by={'field': 'updated_balance_date', 'data_type': 'date'},\n  cluster_by=['user_id'],\n) -}}\n\nWITH \ninstance_all_data_raw AS(\n  SELECT DISTINCT\n    user_id,\n    instance_id,\n    item_code,\n    item_type,\n    item_sub_type,\n    rarity,\n    MAX(tier) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS tier,\n    MAX(level) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS level,\n    MAX(ps) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS ps,\n    boost,\n    MAX(updated_balance) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS updated_balance,\n    updated_balance_date,\n    updated_balance_timestamp\n  FROM {{ ref('stg_sipher_server__raw_inventory_balancing_update') }} \n  -- WHERE updated_balance_date <= '2023-12-25'\n  WHERE updated_balance_date BETWEEN DATE_ADD('{{ var(\"ds\")}}', INTERVAL -3 DAY) AND '{{ var(\"ds\")}}'\n  ORDER BY item_type, instance_id\n  )\n\n, instance_all_data AS(\n  SELECT DISTINCT *\n  FROM instance_all_data_raw\n)\n\n  SELECT \n    instance_all_data.* EXCEPT(updated_balance_timestamp),\n    TIMESTAMP_MICROS(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM instance_all_data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_inventory/intermediate/int_user_inventory_balance_new_update_by_day.sql",
            "original_file_path": "models/marts/sipher_odyssey_inventory/intermediate/int_user_inventory_balance_new_update_by_day.sql",
            "name": "int_user_inventory_balance_new_update_by_day",
            "alias": "int_user_inventory_balance_new_update_by_day",
            "checksum": {
                "name": "sha256",
                "checksum": "e66166f7aa5c43737f41a9c714eeda61313284ad3aa1e86affaa8ec01180b4bd"
            },
            "tags": [],
            "refs": [
                [
                    "stg_sipher_server__raw_inventory_balancing_update"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_inventory/intermediate/int_user_inventory_balance_new_update_by_day.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_inventory",
                "materialized": "incremental",
                "unique_key": [
                    "user_id",
                    "instance_id",
                    "updated_balance_timestamp",
                    "updated_balance_date"
                ],
                "partition_by": {
                    "field": "updated_balance_date",
                    "data_type": "date"
                },
                "cluster_by": [
                    "user_id"
                ]
            },
            "created_at": 1705293861.7824252,
            "compiled_code": "WITH \ninstance_all_data_raw AS(\n  SELECT DISTINCT\n    user_id,\n    instance_id,\n    item_code,\n    item_type,\n    item_sub_type,\n    rarity,\n    MAX(tier) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS tier,\n    MAX(level) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS level,\n    MAX(ps) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS ps,\n    boost,\n    MAX(updated_balance) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp, updated_balance_date) AS updated_balance,\n    updated_balance_date,\n    updated_balance_timestamp\n  FROM `sipher-data-testing`.`staging_sipher_server`.`stg_sipher_server__raw_inventory_balancing_update` \n  -- WHERE updated_balance_date <= '2023-12-25'\n  WHERE updated_balance_date BETWEEN DATE_ADD('', INTERVAL -3 DAY) AND ''\n  ORDER BY item_type, instance_id\n  )\n\n, instance_all_data AS(\n  SELECT DISTINCT *\n  FROM instance_all_data_raw\n)\n\n  SELECT \n    instance_all_data.* EXCEPT(updated_balance_timestamp),\n    TIMESTAMP_MICROS(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM instance_all_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_new_update_by_day`"
        },
        "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update",
                    "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_inventory",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": "merge",
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": [
                    "user_id",
                    "instance_id",
                    "updated_balance_timestamp"
                ],
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "cluster_by": [
                    "user_id",
                    "instance_id"
                ],
                "merge_update_columns": [
                    "updated_balance",
                    "updated_balance_timestamp"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_inventory",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_inventory",
                "intermediate",
                "int_user_inventory_balance_latest_update_by_instance"
            ],
            "unique_id": "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "raw_code": "{{- config(\n  materialized ='incremental',\n  incremental_strategy = 'merge',\n  unique_key = ['user_id', 'instance_id','updated_balance_timestamp'],\n  cluster_by = ['user_id', 'instance_id'],\n  merge_update_columns = [\n    'updated_balance',\n    'updated_balance_timestamp'\n  ]\n) -}}\n\nWITH \ninstance_last_update_ts AS(\n  SELECT\n    user_id,\n    instance_id,\n    MAX(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM {{ ref('stg_sipher_server__raw_inventory_balancing_update') }}\n  -- WHERE updated_balance_date <= '2023-12-25'\n  WHERE updated_balance_date BETWEEN DATE_ADD('{{ var(\"ds\")}}', INTERVAL -3 DAY) AND '{{ var(\"ds\")}}'\n  GROUP BY 1,2\n)\n\n, instance_all_data_raw AS(\n  SELECT DISTINCT\n    user_id,\n    instance_id,\n    item_code,\n    item_type,\n    item_sub_type,\n    rarity,\n    MAX(tier) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS tier,\n    MAX(level) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS level,\n    MAX(ps) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS ps,\n    boost,\n    MAX(updated_balance) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS updated_balance,\n    updated_balance_date,\n    updated_balance_timestamp\n  FROM {{ ref('stg_sipher_server__raw_inventory_balancing_update') }} \n  -- WHERE updated_balance_date <= '2023-12-25'\n  WHERE updated_balance_date BETWEEN DATE_ADD('{{ var(\"ds\")}}', INTERVAL -3 DAY) AND '{{ var(\"ds\")}}'\n  )\n\n, instance_all_data AS(\n  SELECT DISTINCT *\n  FROM instance_all_data_raw\n)\n\n  SELECT DISTINCT\n    instance_all_data.* EXCEPT(updated_balance_timestamp),\n    TIMESTAMP_MICROS(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM instance_all_data\n  INNER JOIN instance_last_update_ts USING(instance_id, updated_balance_timestamp, user_id)\n  -- ORDER BY updated_balance_timestamp\n\n--This model is capture the latest inventory balance update of each user updated on airflow - this does not includes historical balance",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_inventory/intermediate/int_user_inventory_balance_latest_update_by_instance.sql",
            "original_file_path": "models/marts/sipher_odyssey_inventory/intermediate/int_user_inventory_balance_latest_update_by_instance.sql",
            "name": "int_user_inventory_balance_latest_update_by_instance",
            "alias": "int_user_inventory_balance_latest_update_by_instance",
            "checksum": {
                "name": "sha256",
                "checksum": "fe8d30e94817ac5859b0943705268c7b9c959110a0cf0dc3b69a28116e45f6a5"
            },
            "tags": [],
            "refs": [
                [
                    "stg_sipher_server__raw_inventory_balancing_update"
                ],
                [
                    "stg_sipher_server__raw_inventory_balancing_update"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_inventory/intermediate/int_user_inventory_balance_latest_update_by_instance.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_inventory",
                "materialized": "incremental",
                "incremental_strategy": "merge",
                "unique_key": [
                    "user_id",
                    "instance_id",
                    "updated_balance_timestamp"
                ],
                "cluster_by": [
                    "user_id",
                    "instance_id"
                ],
                "merge_update_columns": [
                    "updated_balance",
                    "updated_balance_timestamp"
                ]
            },
            "created_at": 1705293861.7871025,
            "compiled_code": "WITH \ninstance_last_update_ts AS(\n  SELECT\n    user_id,\n    instance_id,\n    MAX(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM `sipher-data-testing`.`staging_sipher_server`.`stg_sipher_server__raw_inventory_balancing_update`\n  -- WHERE updated_balance_date <= '2023-12-25'\n  WHERE updated_balance_date BETWEEN DATE_ADD('', INTERVAL -3 DAY) AND ''\n  GROUP BY 1,2\n)\n\n, instance_all_data_raw AS(\n  SELECT DISTINCT\n    user_id,\n    instance_id,\n    item_code,\n    item_type,\n    item_sub_type,\n    rarity,\n    MAX(tier) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS tier,\n    MAX(level) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS level,\n    MAX(ps) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS ps,\n    boost,\n    MAX(updated_balance) OVER (PARTITION BY user_id, instance_id, updated_balance_timestamp) AS updated_balance,\n    updated_balance_date,\n    updated_balance_timestamp\n  FROM `sipher-data-testing`.`staging_sipher_server`.`stg_sipher_server__raw_inventory_balancing_update` \n  -- WHERE updated_balance_date <= '2023-12-25'\n  WHERE updated_balance_date BETWEEN DATE_ADD('', INTERVAL -3 DAY) AND ''\n  )\n\n, instance_all_data AS(\n  SELECT DISTINCT *\n  FROM instance_all_data_raw\n)\n\n  SELECT DISTINCT\n    instance_all_data.* EXCEPT(updated_balance_timestamp),\n    TIMESTAMP_MICROS(updated_balance_timestamp) AS updated_balance_timestamp\n  FROM instance_all_data\n  INNER JOIN instance_last_update_ts USING(instance_id, updated_balance_timestamp, user_id)\n  -- ORDER BY updated_balance_timestamp\n\n--This model is capture the latest inventory balance update of each user updated on airflow - this does not includes historical balance",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_inventory`.`int_user_inventory_balance_latest_update_by_instance`"
        },
        "model.dbt_sipher.mart_level_design_dungeon": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.mart_level_design_gameplay",
                    "model.dbt_sipher.mart_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_level_design",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_level_design",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "mart_level_design_dungeon"
            ],
            "unique_id": "model.dbt_sipher.mart_level_design_dungeon",
            "raw_code": "{{- config(\n    materialized='table',\n)-}}\n\nWITH raw AS\n(\n\tSELECT DISTINCT \n        user_id\n        ,day0_date_tzutc\n        ,email\n        ,dungeon_id_difficulty\n        ,timestamp_micros(gameplay_start_event_timestamp) gameplay_start_event_timestamp\n        ,gameplay_time_played\n        ,gameplay_status\n        ,DENSE_RANK() OVER (PARTITION BY user_id,dungeon_id_difficulty ORDER BY gameplay_start_event_timestamp) AS dungeon_start_cnt\n\tFROM {{ ref('mart_level_design_gameplay') }}\n\tWHERE true \n) \n\n, dungeon_win  AS\n(\n\tSELECT DISTINCT \n        user_id\n        ,dungeon_id_difficulty\n        ,dungeon_start_cnt\n        ,gameplay_start_event_timestamp,day0_date_tzutc\n        ,DENSE_RANK() OVER (PARTITION BY user_id,dungeon_id_difficulty ORDER BY gameplay_start_event_timestamp) AS dungeon_win_cnt\n\tFROM raw\n\tWHERE gameplay_status = 'SUCCESS' \n) \n\n, sum_time_played_to_wintb AS\n(\n\tSELECT \n        a.user_id\n        ,a.dungeon_id_difficulty\n        ,SUM(b.gameplay_time_played) AS sum_time_played_to_win\n\tFROM dungeon_win a\n\tLEFT JOIN raw b\n\t    ON a.user_id = b.user_id AND a.dungeon_win_cnt = 1 AND a.dungeon_start_cnt >= b.dungeon_start_cnt AND a.dungeon_id_difficulty = b.dungeon_id_difficulty\n\tWHERE a.dungeon_win_cnt = 1\n\tGROUP BY 1,2\n)\n\n,attempts_to_wintb AS \n(\n\tSELECT\n        user_id\n        ,dungeon_id_difficulty\n        ,dungeon_start_cnt\n \tFROM dungeon_win\n\tWHERE dungeon_win_cnt = 1\n)\n\n,day_diff_win AS \n(\n\tSELECT\n        a.user_id\n        ,a.dungeon_id_difficulty\n        ,DATE_DIFF(DATE(gameplay_start_event_timestamp ), day0_date_tzutc, DAY) AS day_diff\n \tFROM dungeon_win a\n \tWHERE a.dungeon_win_cnt = 1\n \n)\n\n, ordered_dungeon AS\n(\n\tSELECT\n        user_id\n        ,day0_date_tzutc\n        ,email\n        ,dungeon_id_difficulty\n\tFROM raw\n\tWHERE dungeon_start_cnt = 1 \n)\n\n\n, buildtb AS \n(\n    SELECT DISTINCT\n        build,\n        user_id  \n    FROM {{ ref('mart_level_design_gameplay') }}\n)\n\n\nSELECT DISTINCT\n    a.*\n    ,c.sum_time_played_to_win\n    ,c1.dungeon_start_cnt as attempts_to_win\n    ,d.day_diff,\n    ew.Date_Added,ew.Group,\n    build\nFROM ordered_dungeon a\nLEFT JOIN sum_time_played_to_wintb c\n    ON c.user_id = a.user_id AND c.dungeon_id_difficulty = a.dungeon_id_difficulty\nLEFT JOIN attempts_to_wintb c1\n    ON c1.user_id = a.user_id AND c1.dungeon_id_difficulty = a.dungeon_id_difficulty\nLEFT JOIN day_diff_win d\n    ON d.user_id = a.user_id AND d.dungeon_id_difficulty = a.dungeon_id_difficulty\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew \n    ON a.email = ew.email\nLEFT JOIN  buildtb bn \n    ON a.user_id = bn.user_id\n WHERE a.user_id <> 'AAA20920'",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_level_design/mart_level_design_dungeon.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/mart_level_design_dungeon.sql",
            "name": "mart_level_design_dungeon",
            "alias": "mart_level_design_dungeon",
            "checksum": {
                "name": "sha256",
                "checksum": "ca916b70bb04398e5c3e36f61351eb2e1e6f454c3e90e01c0336852035ed86d0"
            },
            "tags": [],
            "refs": [
                [
                    "mart_level_design_gameplay"
                ],
                [
                    "mart_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/mart_level_design_dungeon.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_level_design",
                "materialized": "table"
            },
            "created_at": 1705293861.7914937,
            "compiled_code": "WITH raw AS\n(\n\tSELECT DISTINCT \n        user_id\n        ,day0_date_tzutc\n        ,email\n        ,dungeon_id_difficulty\n        ,timestamp_micros(gameplay_start_event_timestamp) gameplay_start_event_timestamp\n        ,gameplay_time_played\n        ,gameplay_status\n        ,DENSE_RANK() OVER (PARTITION BY user_id,dungeon_id_difficulty ORDER BY gameplay_start_event_timestamp) AS dungeon_start_cnt\n\tFROM `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`\n\tWHERE true \n) \n\n, dungeon_win  AS\n(\n\tSELECT DISTINCT \n        user_id\n        ,dungeon_id_difficulty\n        ,dungeon_start_cnt\n        ,gameplay_start_event_timestamp,day0_date_tzutc\n        ,DENSE_RANK() OVER (PARTITION BY user_id,dungeon_id_difficulty ORDER BY gameplay_start_event_timestamp) AS dungeon_win_cnt\n\tFROM raw\n\tWHERE gameplay_status = 'SUCCESS' \n) \n\n, sum_time_played_to_wintb AS\n(\n\tSELECT \n        a.user_id\n        ,a.dungeon_id_difficulty\n        ,SUM(b.gameplay_time_played) AS sum_time_played_to_win\n\tFROM dungeon_win a\n\tLEFT JOIN raw b\n\t    ON a.user_id = b.user_id AND a.dungeon_win_cnt = 1 AND a.dungeon_start_cnt >= b.dungeon_start_cnt AND a.dungeon_id_difficulty = b.dungeon_id_difficulty\n\tWHERE a.dungeon_win_cnt = 1\n\tGROUP BY 1,2\n)\n\n,attempts_to_wintb AS \n(\n\tSELECT\n        user_id\n        ,dungeon_id_difficulty\n        ,dungeon_start_cnt\n \tFROM dungeon_win\n\tWHERE dungeon_win_cnt = 1\n)\n\n,day_diff_win AS \n(\n\tSELECT\n        a.user_id\n        ,a.dungeon_id_difficulty\n        ,DATE_DIFF(DATE(gameplay_start_event_timestamp ), day0_date_tzutc, DAY) AS day_diff\n \tFROM dungeon_win a\n \tWHERE a.dungeon_win_cnt = 1\n \n)\n\n, ordered_dungeon AS\n(\n\tSELECT\n        user_id\n        ,day0_date_tzutc\n        ,email\n        ,dungeon_id_difficulty\n\tFROM raw\n\tWHERE dungeon_start_cnt = 1 \n)\n\n\n, buildtb AS \n(\n    SELECT DISTINCT\n        build,\n        user_id  \n    FROM `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`\n)\n\n\nSELECT DISTINCT\n    a.*\n    ,c.sum_time_played_to_win\n    ,c1.dungeon_start_cnt as attempts_to_win\n    ,d.day_diff,\n    ew.Date_Added,ew.Group,\n    build\nFROM ordered_dungeon a\nLEFT JOIN sum_time_played_to_wintb c\n    ON c.user_id = a.user_id AND c.dungeon_id_difficulty = a.dungeon_id_difficulty\nLEFT JOIN attempts_to_wintb c1\n    ON c1.user_id = a.user_id AND c1.dungeon_id_difficulty = a.dungeon_id_difficulty\nLEFT JOIN day_diff_win d\n    ON d.user_id = a.user_id AND d.dungeon_id_difficulty = a.dungeon_id_difficulty\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew \n    ON a.email = ew.email\nLEFT JOIN  buildtb bn \n    ON a.user_id = bn.user_id\n WHERE a.user_id <> 'AAA20920'",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_dungeon`"
        },
        "model.dbt_sipher.fct_level_design_lvl": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_event_params",
                    "macro.dbt_sipher.get_double_value_from_event_params"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d",
                    "model.dbt_sipher.int_sipher_odyssey_player_day0_version"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_level_design",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "cluster_by": [
                    "day_diff"
                ],
                "partition_by": {
                    "field": "day0_date_tzutc",
                    "data_type": "DATE"
                },
                "merge_update_columns": [
                    "user_id",
                    "session_id",
                    "level_start_level_count"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_level_design",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "fct_level_design_lvl"
            ],
            "unique_id": "model.dbt_sipher.fct_level_design_lvl",
            "raw_code": "{{- config(\n    materialized='incremental',\n\tmerge_update_columns = [\n    'user_id',\n    'session_id',\n\t'level_start_level_count'\n  ],\n\tpartition_by={\n\t\t'field': 'day0_date_tzutc',\n\t\t'data_type': 'DATE',\n\t},\n\tcluster_by=['day_diff']\t\n)-}}\n\n\nWITH raw AS\n(\n\tSELECT  *\n\tFROM {{ ref('stg_firebase__sipher_odyssey_events_14d') }}\n) \n\n, cohort_user AS\n(\n\tSELECT DISTINCT \n\t\tather_id\n\t\t,email\n\t\t,user_id\n\t\t,user_name\n\t\t,MIN(day0_date_tzutc) day0_date_tzutc\n\n\tFROM {{ ref('int_sipher_odyssey_player_day0_version') }}\n\tGROUP BY 1,2,3,4\n\n) \n\n, login_start_raw AS\n(\n\tSELECT DISTINCT \n\t\tuser_id\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"build_number\") }} AS build_number\n\t\t,app_info.version AS app_version \n\t\t,MIN (event_timestamp) AS current_build_timestamp\n\n\tFROM raw\n\tWHERE event_name = 'login_start'\n\tGROUP BY  user_id\n\t         ,event_name\n\t         ,build_number\n\t         ,app_version\n) \n\n, login_start AS\n(\n\tSELECT DISTINCT \n\t\tlogin_start_raw.user_id\n\t\t,ather_id\n\t\t,cohort.day0_date_tzutc AS day0_date_tzutc\n\t\t,event_name\n\t\t,build_number\n\t\t,app_version\n\t\t,email\t\t\t\t \n\t\t,user_name\n\t\t,current_build_timestamp\n\t\t,LEAD(current_build_timestamp,1) OVER (PARTITION BY login_start_raw.user_id ORDER BY current_build_timestamp) AS next_build_timestamp\n\n\tFROM login_start_raw\n\tJOIN cohort_user cohort\n\tON (login_start_raw.user_id = cohort.user_id)\n) \n\n, gameplay_start AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,COALESCE(raw.user_pseudo_id)                                          AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"session_id\") }} AS session_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"run_info\")}}, '$.dungeon_id' )) AS dungeon_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"run_info\")}}, '$.room_id' )) AS room_id\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"mode\") }}) AS mode\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"difficulty\") }}) AS difficulty\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"armor\")}}, '$.id' )) AS armor\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"armor\")}}, '$.PS' )) AS armor_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"head\")}}, '$.id' )) AS head\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"head\")}}, '$.PS' )) AS head_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"shoes\")}}, '$.id' )) AS shoes\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"shoes\")}}, '$.PS' )) AS shoes_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"legs\")}}, '$.id' )) AS legs\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"legs\")}}, '$.PS' )) AS legs_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gloves\")}}, '$.id' )) AS gloves\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gloves\")}}, '$.PS' )) AS gloves_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_1\")}}, '$.id' )) AS weapon1\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_1\")}}, '$.PS' )) AS weapon1_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_2\")}}, '$.id' )) AS weapon2\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_2\")}}, '$.PS' )) AS weapon2_PS\n\n\tFROM raw , UNNEST\n\t(event_params\n\t) AS ep\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_start')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, gameplay_end AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"session_id\") }} AS session_id\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"mode\") }}) AS mode\n\t\t,{{ get_double_value_from_event_params(key=\"player_amount\") }} AS player_amount\n\t\t,({{ get_double_value_from_event_params(key=\"player_remain\") }}) AS player_remain\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gameplay_result\")}}, '$.status' )) AS status\n\t\t,SPLIT(UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gameplay_result\")}}, '$.level_count' )), '/')[OFFSET(0)] AS level_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gameplay_result\")}}, '$.time_played' )) AS time_played\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.get_hit' )) AS get_hit\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.skill' )) AS skill_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.dash' )) AS dash_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.changeweapon' )) AS changeweapon_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.skill' )) AS skill\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.ranged' )) AS ranged\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.meele' )) AS meele\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.status_effect' )) AS status_effect\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.enemy' )) AS enemy\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.down' )) AS down\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.revive' )) AS revive\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.being_revived' )) AS being_revived\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.hp_loss' )) AS hp_loss\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.hp_pct' )) AS hp_pct\n\t\t\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_end')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, level_start AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"session_id\") }} AS session_id\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"mode\") }}) AS mode\n\t\t,CAST({{ get_double_value_from_event_params(key=\"level_count\") }}  AS INT64) AS level_count\n\t\t,{{ get_double_value_from_event_params(key=\"player_amount\") }} AS player_amount\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.PS' )) AS character_PS\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('level_start') \n) \n\n, level_end AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"session_id\") }} AS session_id\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"mode\") }}) AS mode\n\t\t,{{ get_double_value_from_event_params(key=\"player_amount\") }} AS player_amount\n\t\t,{{ get_double_value_from_event_params(key=\"player_remain\") }} AS player_remain\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"level_result\")}}, '$.status' )) AS status\n\t\t,SPLIT(UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"level_result\")}}, '$.level_count' )), '/')[OFFSET(0)] AS level_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"level_result\")}}, '$.time_played' )) AS time_played\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.get_hit' )) AS get_hit\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.skill' )) AS skill_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.dash' )) AS dash_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.changeweapon' )) AS changeweapon_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.skill' )) AS skill\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.ranged' )) AS ranged\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.meele' )) AS meele\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.status_effect' )) AS status_effect\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.enemy' )) AS enemy\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.down' )) AS down\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.revive' )) AS revive\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.being_revived' )) AS being_revived\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.hp_loss' )) AS hp_loss\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.hp_pct' )) AS hp_pct\n\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('level_end') \n) \n\n, boost_selection_choose AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"session_id\") }} AS session_id\n\t\t,CAST({{ get_string_value_from_event_params(key=\"level_index\") }} AS INT64) AS level_index\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"run_info\")}}, '$.dungeon_id' )) AS dungeon_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"run_info\")}}, '$.room_id' )) AS room_id\n\t\t,{{ get_string_value_from_event_params(key=\"mana_available\") }} AS mana_available\n\t\t,{{ get_string_value_from_event_params(key=\"mana_remain\") }} AS mana_remain\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"boost_id_1\") }}) AS boost_id_1\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"boost_id_2\") }}) AS boost_id_2\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"boost_id_3\") }}) AS boost_id_3\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select' )) AS boost_id_select\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"boost_id_unselect\")}}, '$.boost_id_unselect' )) AS boost_id_unselect\n\t\t,ARRAY_LENGTH(JSON_EXTRACT_ARRAY ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select' )) AS boost_used_count\n\t\t,UPPER(\n\t\t\tCASE \n\t\t\t\tWHEN ARRAY_LENGTH(JSON_EXTRACT_ARRAY ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select')) >= 1 \n\t\t\t\tTHEN (JSON_EXTRACT_ARRAY ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select'))[ORDINAL(1)] \n\t\t\tEND) AS boost_id_select_1\n\t\t,UPPER(\n\t\t\tCASE \n\t\t\t\tWHEN ARRAY_LENGTH(JSON_EXTRACT_ARRAY ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select')) >= 2 \n\t\t\t\tTHEN (JSON_EXTRACT_ARRAY ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select'))[ORDINAL(2)] \n\t\t\tEND) AS boost_id_select_2\n\t\t,UPPER(\n\t\t\tCASE \n\t\t\t\tWHEN ARRAY_LENGTH(JSON_EXTRACT_ARRAY ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select')) >= 3\n\t\t\t\tTHEN (JSON_EXTRACT_ARRAY ({{ get_string_value_from_event_params(key=\"boost_id_select\")}}, '$.boost_id_select'))[ORDINAL(3)] \n\t\t\tEND) AS boost_id_select_3\n\t\t\t\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name = 'boost_selection_choose' \n) \n\n, gameplay_final AS\n(\n\tSELECT DISTINCT \n\t\tgameplay_start.event_date                                                   \t\t  AS gameplay_start_event_date\n\t\t,gameplay_start.event_timestamp                                                       AS gameplay_start_event_timestamp\n\t\t,login_start.build_number                                                             AS build_number\n\t\t,login_start.app_version\n\t\t,login_start.email\n\t\t,gameplay_start.user_pseudo_id                                                        AS user_pseudo_id\n\t\t,COALESCE(gameplay_start.user_id,gameplay_end.user_id)                                AS user_id\n\t\t,COALESCE(gameplay_start.day0_date_tzutc,gameplay_end.day0_date_tzutc)                AS day0_date_tzutc\n\t\t,COALESCE(gameplay_start.day_diff,gameplay_end.day_diff)                              AS day_diff\n\t\t,gameplay_start.event_name                                                            AS gameplay_start_event_name\n\t\t,gameplay_start.session_id AS session_id \n\t\t,CASE \n\t\t\tWHEN CAST(login_start.build_number AS INT64) >= CAST(dim_dungeon.build_number AS INT64) AND login_start.app_version >= dim_dungeon.app_version \n\t\t\t\tTHEN UPPER(dim_dungeon.rename_dungeon_id) \n\t\t\t ELSE gameplay_start.dungeon_id \n\t\tEND \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AS dungeon_id\n\t\t,gameplay_start.room_id                                                               AS room_id\n\t\t,COALESCE(gameplay_start.mode,gameplay_end.mode)                                      AS mode\n\t\t,gameplay_start.difficulty                                                            AS difficulty\n\t\t,COALESCE(gameplay_start.race,gameplay_end.race)                                      AS race\n\t\t,COALESCE(gameplay_start.sub_race,gameplay_end.sub_race)                              AS sub_race\n\t\t,CAST(COALESCE(gameplay_start.character_level,gameplay_end.character_level) AS INT64) AS character_level\n\t\t,CAST(COALESCE(gameplay_start.character_PS,gameplay_end.character_PS) AS INT64) - CAST(gameplay_start.armor_PS AS INT64) - CAST(gameplay_start.head_PS AS INT64) - CAST(gameplay_start.shoes_PS AS INT64) - CAST(gameplay_start.legs_PS AS INT64) - CAST(gameplay_start.gloves_PS AS INT64) - CAST(gameplay_start.weapon1_PS AS INT64) - CAST(gameplay_start.weapon2_PS AS INT64) AS character_PS\n\t\t,gameplay_start.armor                                                                 AS armor\n\t\t,CAST(gameplay_start.armor_PS AS INT64)                                               AS armor_PS\n\t\t,gameplay_start.head                                                                  AS head\n\t\t,CAST(gameplay_start.head_PS AS INT64)                                                AS head_PS\n\t\t,gameplay_start.shoes                                                                 AS shoes\n\t\t,CAST(gameplay_start.shoes_PS AS INT64)                                               AS shoes_PS\n\t\t,gameplay_start.legs                                                                  AS legs\n\t\t,CAST(gameplay_start.legs_PS AS INT64)                                                AS legs_PS\n\t\t,gameplay_start.gloves                                                                AS gloves\n\t\t,CAST(gameplay_start.gloves_PS AS INT64)                                              AS gloves_PS\n\t\t,gameplay_start.weapon1                                                               AS weapon1\n\t\t,CAST(gameplay_start.weapon1_PS AS INT64)                                             AS weapon1_PS\n\t\t,gameplay_start.weapon2                                                               AS weapon2\n\t\t,CAST(gameplay_start.weapon2_PS AS INT64)                                             AS weapon2_PS\n\t\t,gameplay_end.event_date                                                              AS gameplay_end_event_date\n\t\t,gameplay_end.event_timestamp                                                         AS gameplay_end_event_timestamp\n\t\t,gameplay_end.event_name                                                              AS gameplay_end_event_name\n\t\t,CAST(gameplay_end.player_amount AS INT64)                                            AS gameplay_player_amount\n\t\t,CAST(gameplay_end.player_remain AS INT64)                                            AS gameplay_player_remain\n\t\t,COALESCE(gameplay_end.status,'UNDETECTED')                                           AS gameplay_status\n\t\t,CAST(COALESCE(NULLIF(gameplay_end.level_count,''),NULL) AS INT64)                    AS gameplay_level_count \n\t\t,CAST(gameplay_end.get_hit AS FLOAT64)                                              AS gameplay_get_hit\n\t\t,CAST(gameplay_end.time_played AS INT64)                                              AS gameplay_time_played\n\t\t,CAST(gameplay_end.skill_count AS INT64)                                              AS gameplay_skill_count\n\t\t,CAST(gameplay_end.dash_count AS INT64)                                               AS gameplay_dash_count\n\t\t,CAST(gameplay_end.changeweapon_count AS INT64)                                       AS gameplay_changeweapon_count\n\t\t,CAST(gameplay_end.skill  AS INT64)                                                   AS gameplay_skill\n\t\t,CAST(gameplay_end.ranged  AS INT64)                                                  AS gameplay_ranged\n\t\t,CAST(gameplay_end.meele   AS INT64)                                                  AS gameplay_meele\n\t\t,CAST(gameplay_end.status_effect   AS INT64)                                          AS gameplay_status_effect\n\t\t,CAST(gameplay_end.enemy AS INT64)                                                    AS gameplay_enemy\n\t\t,CAST(gameplay_end.down AS INT64)                                                     AS gameplay_down\n\t\t,CAST(gameplay_end.revive AS INT64)                                                   AS gameplay_revive\n\t\t,CAST(gameplay_end.being_revived AS INT64)                                            AS gameplay_being_revived\n\t\t,CAST(gameplay_end.hp_loss AS FLOAT64)                                                AS gameplay_hp_loss\n\t\t,CAST(gameplay_end.hp_pct AS FLOAT64)                                                 AS gameplay_hp_pct\n\tFROM gameplay_start\n\tLEFT JOIN gameplay_end\n\tON gameplay_start.session_id = gameplay_end.session_id AND gameplay_start.user_pseudo_id = gameplay_end.user_pseudo_id\n\tLEFT JOIN login_start\n\tON gameplay_start.user_id = login_start.user_id AND gameplay_start.event_timestamp > login_start.current_build_timestamp AND gameplay_start.event_timestamp < COALESCE(login_start.next_build_timestamp, 7258118400000000)\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon` dim_dungeon\n\tON UPPER(gameplay_start.dungeon_id) = UPPER(dim_dungeon.event_dungeon_id)\n\tWHERE gameplay_start.session_id IS NOT NULL \n) \n\n, level_final AS\n(\n\tSELECT DISTINCT \n\t\tlevel_start.event_date                                                   \t\t   AS level_start_event_date\n\t\t,level_start.event_timestamp                                                       AS level_start_event_timestamp\n\t\t,login_start.build_number                                                          AS build_number\n\t\t,login_start.app_version\n\t\t,login_start.email,\tuser_name\n\t\t,COALESCE(level_start.user_pseudo_id,level_end.user_pseudo_id)                     AS user_pseudo_id\n\t\t,COALESCE(level_start.user_id,level_end.user_id)                                   AS user_id\n\t\t,COALESCE(level_start.day0_date_tzutc,level_end.day0_date_tzutc)                   AS day0_date_tzutc\n\t\t,COALESCE(level_start.day_diff,level_end.day_diff)                                 AS day_diff\n\t\t,level_start.event_name                                                            AS level_start_event_name\n\t\t,COALESCE(level_start.session_id,level_end.session_id)                             AS session_id\n\t\t,COALESCE(level_start.mode,level_end.mode)                                         AS mode\n\t\t,CAST(level_start.level_count AS INT64)                                            AS level_start_level_count\n\t\t,level_start.player_amount                                                         AS level_start_player_amount\n\t\t,level_end.event_date AS level_end_event_date\n\t\t,level_end.event_name                                                              AS level_end_event_name\n\t\t,CAST(level_end.player_amount AS INT64)                                            AS level_end_player_amount\n\t\t,CAST(level_end.player_remain AS INT64)                                            AS level_end_player_remain\n\t\t,COALESCE(level_end.status,'UNDETECTED')                                           AS level_status\n\t\t,CAST(COALESCE(NULLIF(level_end.level_count,''),NULL) AS INT64)                             AS level_end_level_count\n\t\t,CAST(level_end.time_played AS INT64)                                              AS time_played\n\t\t,CAST(level_end.get_hit AS FLOAT64)                                              AS get_hit\n\t\t,CAST(level_end.skill_count AS INT64)                                              AS skill_count\n\t\t,CAST(level_end.dash_count AS INT64)                                               AS dash_count\n\t\t,CAST(level_end.changeweapon_count AS INT64)                                       AS changeweapon_count\n\t\t,CAST(level_end.skill  AS INT64)                                                   AS skill\n\t\t,CAST(level_end.ranged  AS INT64)                                                  AS ranged\n\t\t,CAST(level_end.meele  AS INT64)                                                   AS meele\n\t\t,CAST(level_end.status_effect AS INT64)                                            AS status_effect\n\t\t,CAST(level_end.enemy AS INT64)                                                    AS enemy\n\t\t,CAST(level_end.down AS INT64)                                                     AS down\n\t\t,CAST(level_end.revive AS INT64)                                                   AS revive\n\t\t,CAST(level_end.being_revived AS INT64)                                            AS being_revived\n\t\t,CAST(level_end.hp_loss AS FLOAT64)                                                AS hp_loss\n\t\t,CAST(level_end.hp_pct AS FLOAT64)                                                 AS hp_pct\n\t\t,CAST(boost_selection_choose.mana_available AS INT64)                              AS mana_available\n\t\t,CAST(boost_selection_choose.mana_remain AS INT64)                                 AS mana_remain\n\t\t,boost_selection_choose.boost_id_1                                                 AS boost_id_1\n\t\t,boost_selection_choose.boost_id_2                                                 AS boost_id_2\n\t\t,boost_selection_choose.boost_id_3                                                 AS boost_id_3\n\t\t,boost_selection_choose.boost_id_select                                            AS boost_id_select\n\t\t,boost_selection_choose.boost_id_unselect                                          AS boost_id_unselect\n\t\t,boost_selection_choose.boost_used_count                                           AS boost_used_count\n\t\t,boost_selection_choose.boost_id_select_1                                          AS boost_id_select_1\n\t\t,boost_selection_choose.boost_id_select_2                                          AS boost_id_select_2\n\t\t,boost_selection_choose.boost_id_select_3 \t\t\t\t\t\t\t\t\t\t   AS boost_id_select_3 \n\t\t,gameplay_final.gameplay_start_event_timestamp \t\t\t\t\t\t\t\t\t   AS gameplay_start_event_timestamp \n\t\t,gameplay_final.dungeon_id                                                         AS dungeon_id\n\t\t,gameplay_final.room_id                                                            AS room_id\n\t\t,gameplay_final.difficulty                                                         AS difficulty\n\t\t,gameplay_final.gameplay_status                                                    AS gameplay_status\t\t\n\t\t,COALESCE(gameplay_final.race,gameplay_final.race)                                 AS race\n\t\t,COALESCE(gameplay_final.sub_race,gameplay_final.sub_race)                         AS sub_race\n\t\t,COALESCE(gameplay_final.character_level,gameplay_final.character_level)  \t\t   AS character_level\n\t\t,gameplay_final.character_PS\n\t\t,gameplay_final.armor                                                              AS armor\n\t\t,gameplay_final.armor_PS                                             \t\t\t   AS armor_PS\n\t\t,gameplay_final.head                                                               AS head\n\t\t,gameplay_final.head_PS                                              \t\t\t   AS head_PS\n\t\t,gameplay_final.shoes                                                              AS shoes\n\t\t,gameplay_final.shoes_PS                                             \t\t\t   AS shoes_PS\n\t\t,gameplay_final.legs                                                               AS legs\n\t\t,gameplay_final.legs_PS                                              \t\t\t   AS legs_PS\n\t\t,gameplay_final.gloves                                                             AS gloves\n\t\t,gameplay_final.gloves_PS                                            \t\t\t   AS gloves_PS\n\t\t,gameplay_final.weapon1                                                            AS weapon1\n\t\t,gameplay_final.weapon1_PS                                           \t\t\t   AS weapon1_PS\n\t\t,gameplay_final.weapon2                                                            AS weapon2\n\t\t,gameplay_final.weapon2_PS                                           \t\t\t   AS weapon2_PS\n\tFROM level_start\n\tLEFT JOIN level_end\n\tON level_start.session_id = level_end.session_id AND level_start.user_pseudo_id = level_end.user_pseudo_id AND level_start.level_count = CAST(COALESCE(NULLIF(level_end.level_count,''),NULL) AS INT64) AND level_start.mode = level_end.mode\n\tLEFT JOIN gameplay_final\n\tON level_start.session_id = gameplay_final.session_id AND level_start.user_pseudo_id = gameplay_final.user_pseudo_id\n\tLEFT JOIN boost_selection_choose\n\tON level_start.session_id = boost_selection_choose.session_id AND level_start.user_pseudo_id = boost_selection_choose.user_pseudo_id AND level_start.level_count = boost_selection_choose.level_index \n\tLEFT JOIN login_start\n\tON level_start.user_id = login_start.user_id AND level_start.event_timestamp > login_start.current_build_timestamp AND level_start.event_timestamp < COALESCE(login_start.next_build_timestamp, 7258118400000000)\n)\nSELECT  *\nFROM level_final\nWHERE user_id >= 'AAA35167'\nAND build_number <> '1307281126'",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_level_design/fct_level_design_lvl.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/fct_level_design_lvl.sql",
            "name": "fct_level_design_lvl",
            "alias": "fct_level_design_lvl",
            "checksum": {
                "name": "sha256",
                "checksum": "95c136c58b6932d62b066b50500277c222f13ab4f8e9acc895ca32bbcdb236ec"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__sipher_odyssey_events_14d"
                ],
                [
                    "int_sipher_odyssey_player_day0_version"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/fct_level_design_lvl.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_level_design",
                "materialized": "incremental",
                "merge_update_columns": [
                    "user_id",
                    "session_id",
                    "level_start_level_count"
                ],
                "partition_by": {
                    "field": "day0_date_tzutc",
                    "data_type": "DATE"
                },
                "cluster_by": [
                    "day_diff"
                ]
            },
            "created_at": 1705293862.1800401,
            "compiled_code": "WITH raw AS\n(\n\tSELECT  *\n\tFROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_14d`\n) \n\n, cohort_user AS\n(\n\tSELECT DISTINCT \n\t\tather_id\n\t\t,email\n\t\t,user_id\n\t\t,user_name\n\t\t,MIN(day0_date_tzutc) day0_date_tzutc\n\n\tFROM `sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_day0_version`\n\tGROUP BY 1,2,3,4\n\n) \n\n, login_start_raw AS\n(\n\tSELECT DISTINCT \n\t\tuser_id\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"build_number\") AS build_number\n\t\t,app_info.version AS app_version \n\t\t,MIN (event_timestamp) AS current_build_timestamp\n\n\tFROM raw\n\tWHERE event_name = 'login_start'\n\tGROUP BY  user_id\n\t         ,event_name\n\t         ,build_number\n\t         ,app_version\n) \n\n, login_start AS\n(\n\tSELECT DISTINCT \n\t\tlogin_start_raw.user_id\n\t\t,ather_id\n\t\t,cohort.day0_date_tzutc AS day0_date_tzutc\n\t\t,event_name\n\t\t,build_number\n\t\t,app_version\n\t\t,email\t\t\t\t \n\t\t,user_name\n\t\t,current_build_timestamp\n\t\t,LEAD(current_build_timestamp,1) OVER (PARTITION BY login_start_raw.user_id ORDER BY current_build_timestamp) AS next_build_timestamp\n\n\tFROM login_start_raw\n\tJOIN cohort_user cohort\n\tON (login_start_raw.user_id = cohort.user_id)\n) \n\n, gameplay_start AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,COALESCE(raw.user_pseudo_id)                                          AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"session_id\") AS session_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"run_info\"), '$.dungeon_id' )) AS dungeon_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"run_info\"), '$.room_id' )) AS room_id\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mode\")) AS mode\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"difficulty\")) AS difficulty\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"armor\"), '$.id' )) AS armor\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"armor\"), '$.PS' )) AS armor_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"head\"), '$.id' )) AS head\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"head\"), '$.PS' )) AS head_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"shoes\"), '$.id' )) AS shoes\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"shoes\"), '$.PS' )) AS shoes_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"legs\"), '$.id' )) AS legs\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"legs\"), '$.PS' )) AS legs_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gloves\"), '$.id' )) AS gloves\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gloves\"), '$.PS' )) AS gloves_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_1\"), '$.id' )) AS weapon1\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_1\"), '$.PS' )) AS weapon1_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_2\"), '$.id' )) AS weapon2\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_2\"), '$.PS' )) AS weapon2_PS\n\n\tFROM raw , UNNEST\n\t(event_params\n\t) AS ep\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_start')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, gameplay_end AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"session_id\") AS session_id\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mode\")) AS mode\n\t\t,(SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_amount\") AS player_amount\n\t\t,((SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_remain\")) AS player_remain\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gameplay_result\"), '$.status' )) AS status\n\t\t,SPLIT(UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gameplay_result\"), '$.level_count' )), '/')[OFFSET(0)] AS level_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gameplay_result\"), '$.time_played' )) AS time_played\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.get_hit' )) AS get_hit\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.skill' )) AS skill_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.dash' )) AS dash_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.changeweapon' )) AS changeweapon_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.skill' )) AS skill\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.ranged' )) AS ranged\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.meele' )) AS meele\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.status_effect' )) AS status_effect\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.enemy' )) AS enemy\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.down' )) AS down\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.revive' )) AS revive\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.being_revived' )) AS being_revived\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.hp_loss' )) AS hp_loss\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.hp_pct' )) AS hp_pct\n\t\t\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_end')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, level_start AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"session_id\") AS session_id\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mode\")) AS mode\n\t\t,CAST((SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"level_count\")  AS INT64) AS level_count\n\t\t,(SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_amount\") AS player_amount\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.PS' )) AS character_PS\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('level_start') \n) \n\n, level_end AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"session_id\") AS session_id\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mode\")) AS mode\n\t\t,(SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_amount\") AS player_amount\n\t\t,(SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_remain\") AS player_remain\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"level_result\"), '$.status' )) AS status\n\t\t,SPLIT(UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"level_result\"), '$.level_count' )), '/')[OFFSET(0)] AS level_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"level_result\"), '$.time_played' )) AS time_played\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.get_hit' )) AS get_hit\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.skill' )) AS skill_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.dash' )) AS dash_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.changeweapon' )) AS changeweapon_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.skill' )) AS skill\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.ranged' )) AS ranged\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.meele' )) AS meele\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.status_effect' )) AS status_effect\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.enemy' )) AS enemy\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.down' )) AS down\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.revive' )) AS revive\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.being_revived' )) AS being_revived\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.hp_loss' )) AS hp_loss\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.hp_pct' )) AS hp_pct\n\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('level_end') \n) \n\n, boost_selection_choose AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,(raw.user_pseudo_id)                                                  AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"session_id\") AS session_id\n\t\t,CAST((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"level_index\") AS INT64) AS level_index\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"run_info\"), '$.dungeon_id' )) AS dungeon_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"run_info\"), '$.room_id' )) AS room_id\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mana_available\") AS mana_available\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mana_remain\") AS mana_remain\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_1\")) AS boost_id_1\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_2\")) AS boost_id_2\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_3\")) AS boost_id_3\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select' )) AS boost_id_select\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_unselect\"), '$.boost_id_unselect' )) AS boost_id_unselect\n\t\t,ARRAY_LENGTH(JSON_EXTRACT_ARRAY ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select' )) AS boost_used_count\n\t\t,UPPER(\n\t\t\tCASE \n\t\t\t\tWHEN ARRAY_LENGTH(JSON_EXTRACT_ARRAY ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select')) >= 1 \n\t\t\t\tTHEN (JSON_EXTRACT_ARRAY ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select'))[ORDINAL(1)] \n\t\t\tEND) AS boost_id_select_1\n\t\t,UPPER(\n\t\t\tCASE \n\t\t\t\tWHEN ARRAY_LENGTH(JSON_EXTRACT_ARRAY ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select')) >= 2 \n\t\t\t\tTHEN (JSON_EXTRACT_ARRAY ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select'))[ORDINAL(2)] \n\t\t\tEND) AS boost_id_select_2\n\t\t,UPPER(\n\t\t\tCASE \n\t\t\t\tWHEN ARRAY_LENGTH(JSON_EXTRACT_ARRAY ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select')) >= 3\n\t\t\t\tTHEN (JSON_EXTRACT_ARRAY ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"boost_id_select\"), '$.boost_id_select'))[ORDINAL(3)] \n\t\t\tEND) AS boost_id_select_3\n\t\t\t\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name = 'boost_selection_choose' \n) \n\n, gameplay_final AS\n(\n\tSELECT DISTINCT \n\t\tgameplay_start.event_date                                                   \t\t  AS gameplay_start_event_date\n\t\t,gameplay_start.event_timestamp                                                       AS gameplay_start_event_timestamp\n\t\t,login_start.build_number                                                             AS build_number\n\t\t,login_start.app_version\n\t\t,login_start.email\n\t\t,gameplay_start.user_pseudo_id                                                        AS user_pseudo_id\n\t\t,COALESCE(gameplay_start.user_id,gameplay_end.user_id)                                AS user_id\n\t\t,COALESCE(gameplay_start.day0_date_tzutc,gameplay_end.day0_date_tzutc)                AS day0_date_tzutc\n\t\t,COALESCE(gameplay_start.day_diff,gameplay_end.day_diff)                              AS day_diff\n\t\t,gameplay_start.event_name                                                            AS gameplay_start_event_name\n\t\t,gameplay_start.session_id AS session_id \n\t\t,CASE \n\t\t\tWHEN CAST(login_start.build_number AS INT64) >= CAST(dim_dungeon.build_number AS INT64) AND login_start.app_version >= dim_dungeon.app_version \n\t\t\t\tTHEN UPPER(dim_dungeon.rename_dungeon_id) \n\t\t\t ELSE gameplay_start.dungeon_id \n\t\tEND \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AS dungeon_id\n\t\t,gameplay_start.room_id                                                               AS room_id\n\t\t,COALESCE(gameplay_start.mode,gameplay_end.mode)                                      AS mode\n\t\t,gameplay_start.difficulty                                                            AS difficulty\n\t\t,COALESCE(gameplay_start.race,gameplay_end.race)                                      AS race\n\t\t,COALESCE(gameplay_start.sub_race,gameplay_end.sub_race)                              AS sub_race\n\t\t,CAST(COALESCE(gameplay_start.character_level,gameplay_end.character_level) AS INT64) AS character_level\n\t\t,CAST(COALESCE(gameplay_start.character_PS,gameplay_end.character_PS) AS INT64) - CAST(gameplay_start.armor_PS AS INT64) - CAST(gameplay_start.head_PS AS INT64) - CAST(gameplay_start.shoes_PS AS INT64) - CAST(gameplay_start.legs_PS AS INT64) - CAST(gameplay_start.gloves_PS AS INT64) - CAST(gameplay_start.weapon1_PS AS INT64) - CAST(gameplay_start.weapon2_PS AS INT64) AS character_PS\n\t\t,gameplay_start.armor                                                                 AS armor\n\t\t,CAST(gameplay_start.armor_PS AS INT64)                                               AS armor_PS\n\t\t,gameplay_start.head                                                                  AS head\n\t\t,CAST(gameplay_start.head_PS AS INT64)                                                AS head_PS\n\t\t,gameplay_start.shoes                                                                 AS shoes\n\t\t,CAST(gameplay_start.shoes_PS AS INT64)                                               AS shoes_PS\n\t\t,gameplay_start.legs                                                                  AS legs\n\t\t,CAST(gameplay_start.legs_PS AS INT64)                                                AS legs_PS\n\t\t,gameplay_start.gloves                                                                AS gloves\n\t\t,CAST(gameplay_start.gloves_PS AS INT64)                                              AS gloves_PS\n\t\t,gameplay_start.weapon1                                                               AS weapon1\n\t\t,CAST(gameplay_start.weapon1_PS AS INT64)                                             AS weapon1_PS\n\t\t,gameplay_start.weapon2                                                               AS weapon2\n\t\t,CAST(gameplay_start.weapon2_PS AS INT64)                                             AS weapon2_PS\n\t\t,gameplay_end.event_date                                                              AS gameplay_end_event_date\n\t\t,gameplay_end.event_timestamp                                                         AS gameplay_end_event_timestamp\n\t\t,gameplay_end.event_name                                                              AS gameplay_end_event_name\n\t\t,CAST(gameplay_end.player_amount AS INT64)                                            AS gameplay_player_amount\n\t\t,CAST(gameplay_end.player_remain AS INT64)                                            AS gameplay_player_remain\n\t\t,COALESCE(gameplay_end.status,'UNDETECTED')                                           AS gameplay_status\n\t\t,CAST(COALESCE(NULLIF(gameplay_end.level_count,''),NULL) AS INT64)                    AS gameplay_level_count \n\t\t,CAST(gameplay_end.get_hit AS FLOAT64)                                              AS gameplay_get_hit\n\t\t,CAST(gameplay_end.time_played AS INT64)                                              AS gameplay_time_played\n\t\t,CAST(gameplay_end.skill_count AS INT64)                                              AS gameplay_skill_count\n\t\t,CAST(gameplay_end.dash_count AS INT64)                                               AS gameplay_dash_count\n\t\t,CAST(gameplay_end.changeweapon_count AS INT64)                                       AS gameplay_changeweapon_count\n\t\t,CAST(gameplay_end.skill  AS INT64)                                                   AS gameplay_skill\n\t\t,CAST(gameplay_end.ranged  AS INT64)                                                  AS gameplay_ranged\n\t\t,CAST(gameplay_end.meele   AS INT64)                                                  AS gameplay_meele\n\t\t,CAST(gameplay_end.status_effect   AS INT64)                                          AS gameplay_status_effect\n\t\t,CAST(gameplay_end.enemy AS INT64)                                                    AS gameplay_enemy\n\t\t,CAST(gameplay_end.down AS INT64)                                                     AS gameplay_down\n\t\t,CAST(gameplay_end.revive AS INT64)                                                   AS gameplay_revive\n\t\t,CAST(gameplay_end.being_revived AS INT64)                                            AS gameplay_being_revived\n\t\t,CAST(gameplay_end.hp_loss AS FLOAT64)                                                AS gameplay_hp_loss\n\t\t,CAST(gameplay_end.hp_pct AS FLOAT64)                                                 AS gameplay_hp_pct\n\tFROM gameplay_start\n\tLEFT JOIN gameplay_end\n\tON gameplay_start.session_id = gameplay_end.session_id AND gameplay_start.user_pseudo_id = gameplay_end.user_pseudo_id\n\tLEFT JOIN login_start\n\tON gameplay_start.user_id = login_start.user_id AND gameplay_start.event_timestamp > login_start.current_build_timestamp AND gameplay_start.event_timestamp < COALESCE(login_start.next_build_timestamp, 7258118400000000)\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon` dim_dungeon\n\tON UPPER(gameplay_start.dungeon_id) = UPPER(dim_dungeon.event_dungeon_id)\n\tWHERE gameplay_start.session_id IS NOT NULL \n) \n\n, level_final AS\n(\n\tSELECT DISTINCT \n\t\tlevel_start.event_date                                                   \t\t   AS level_start_event_date\n\t\t,level_start.event_timestamp                                                       AS level_start_event_timestamp\n\t\t,login_start.build_number                                                          AS build_number\n\t\t,login_start.app_version\n\t\t,login_start.email,\tuser_name\n\t\t,COALESCE(level_start.user_pseudo_id,level_end.user_pseudo_id)                     AS user_pseudo_id\n\t\t,COALESCE(level_start.user_id,level_end.user_id)                                   AS user_id\n\t\t,COALESCE(level_start.day0_date_tzutc,level_end.day0_date_tzutc)                   AS day0_date_tzutc\n\t\t,COALESCE(level_start.day_diff,level_end.day_diff)                                 AS day_diff\n\t\t,level_start.event_name                                                            AS level_start_event_name\n\t\t,COALESCE(level_start.session_id,level_end.session_id)                             AS session_id\n\t\t,COALESCE(level_start.mode,level_end.mode)                                         AS mode\n\t\t,CAST(level_start.level_count AS INT64)                                            AS level_start_level_count\n\t\t,level_start.player_amount                                                         AS level_start_player_amount\n\t\t,level_end.event_date AS level_end_event_date\n\t\t,level_end.event_name                                                              AS level_end_event_name\n\t\t,CAST(level_end.player_amount AS INT64)                                            AS level_end_player_amount\n\t\t,CAST(level_end.player_remain AS INT64)                                            AS level_end_player_remain\n\t\t,COALESCE(level_end.status,'UNDETECTED')                                           AS level_status\n\t\t,CAST(COALESCE(NULLIF(level_end.level_count,''),NULL) AS INT64)                             AS level_end_level_count\n\t\t,CAST(level_end.time_played AS INT64)                                              AS time_played\n\t\t,CAST(level_end.get_hit AS FLOAT64)                                              AS get_hit\n\t\t,CAST(level_end.skill_count AS INT64)                                              AS skill_count\n\t\t,CAST(level_end.dash_count AS INT64)                                               AS dash_count\n\t\t,CAST(level_end.changeweapon_count AS INT64)                                       AS changeweapon_count\n\t\t,CAST(level_end.skill  AS INT64)                                                   AS skill\n\t\t,CAST(level_end.ranged  AS INT64)                                                  AS ranged\n\t\t,CAST(level_end.meele  AS INT64)                                                   AS meele\n\t\t,CAST(level_end.status_effect AS INT64)                                            AS status_effect\n\t\t,CAST(level_end.enemy AS INT64)                                                    AS enemy\n\t\t,CAST(level_end.down AS INT64)                                                     AS down\n\t\t,CAST(level_end.revive AS INT64)                                                   AS revive\n\t\t,CAST(level_end.being_revived AS INT64)                                            AS being_revived\n\t\t,CAST(level_end.hp_loss AS FLOAT64)                                                AS hp_loss\n\t\t,CAST(level_end.hp_pct AS FLOAT64)                                                 AS hp_pct\n\t\t,CAST(boost_selection_choose.mana_available AS INT64)                              AS mana_available\n\t\t,CAST(boost_selection_choose.mana_remain AS INT64)                                 AS mana_remain\n\t\t,boost_selection_choose.boost_id_1                                                 AS boost_id_1\n\t\t,boost_selection_choose.boost_id_2                                                 AS boost_id_2\n\t\t,boost_selection_choose.boost_id_3                                                 AS boost_id_3\n\t\t,boost_selection_choose.boost_id_select                                            AS boost_id_select\n\t\t,boost_selection_choose.boost_id_unselect                                          AS boost_id_unselect\n\t\t,boost_selection_choose.boost_used_count                                           AS boost_used_count\n\t\t,boost_selection_choose.boost_id_select_1                                          AS boost_id_select_1\n\t\t,boost_selection_choose.boost_id_select_2                                          AS boost_id_select_2\n\t\t,boost_selection_choose.boost_id_select_3 \t\t\t\t\t\t\t\t\t\t   AS boost_id_select_3 \n\t\t,gameplay_final.gameplay_start_event_timestamp \t\t\t\t\t\t\t\t\t   AS gameplay_start_event_timestamp \n\t\t,gameplay_final.dungeon_id                                                         AS dungeon_id\n\t\t,gameplay_final.room_id                                                            AS room_id\n\t\t,gameplay_final.difficulty                                                         AS difficulty\n\t\t,gameplay_final.gameplay_status                                                    AS gameplay_status\t\t\n\t\t,COALESCE(gameplay_final.race,gameplay_final.race)                                 AS race\n\t\t,COALESCE(gameplay_final.sub_race,gameplay_final.sub_race)                         AS sub_race\n\t\t,COALESCE(gameplay_final.character_level,gameplay_final.character_level)  \t\t   AS character_level\n\t\t,gameplay_final.character_PS\n\t\t,gameplay_final.armor                                                              AS armor\n\t\t,gameplay_final.armor_PS                                             \t\t\t   AS armor_PS\n\t\t,gameplay_final.head                                                               AS head\n\t\t,gameplay_final.head_PS                                              \t\t\t   AS head_PS\n\t\t,gameplay_final.shoes                                                              AS shoes\n\t\t,gameplay_final.shoes_PS                                             \t\t\t   AS shoes_PS\n\t\t,gameplay_final.legs                                                               AS legs\n\t\t,gameplay_final.legs_PS                                              \t\t\t   AS legs_PS\n\t\t,gameplay_final.gloves                                                             AS gloves\n\t\t,gameplay_final.gloves_PS                                            \t\t\t   AS gloves_PS\n\t\t,gameplay_final.weapon1                                                            AS weapon1\n\t\t,gameplay_final.weapon1_PS                                           \t\t\t   AS weapon1_PS\n\t\t,gameplay_final.weapon2                                                            AS weapon2\n\t\t,gameplay_final.weapon2_PS                                           \t\t\t   AS weapon2_PS\n\tFROM level_start\n\tLEFT JOIN level_end\n\tON level_start.session_id = level_end.session_id AND level_start.user_pseudo_id = level_end.user_pseudo_id AND level_start.level_count = CAST(COALESCE(NULLIF(level_end.level_count,''),NULL) AS INT64) AND level_start.mode = level_end.mode\n\tLEFT JOIN gameplay_final\n\tON level_start.session_id = gameplay_final.session_id AND level_start.user_pseudo_id = gameplay_final.user_pseudo_id\n\tLEFT JOIN boost_selection_choose\n\tON level_start.session_id = boost_selection_choose.session_id AND level_start.user_pseudo_id = boost_selection_choose.user_pseudo_id AND level_start.level_count = boost_selection_choose.level_index \n\tLEFT JOIN login_start\n\tON level_start.user_id = login_start.user_id AND level_start.event_timestamp > login_start.current_build_timestamp AND level_start.event_timestamp < COALESCE(login_start.next_build_timestamp, 7258118400000000)\n)\nSELECT  *\nFROM level_final\nWHERE user_id >= 'AAA35167'\nAND build_number <> '1307281126'",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl`"
        },
        "model.dbt_sipher.mart_level_design_lvl": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl",
                    "model.dbt_sipher.mart_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_level_design",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_level_design",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "mart_level_design_lvl"
            ],
            "unique_id": "model.dbt_sipher.mart_level_design_lvl",
            "raw_code": "{{- config(\n    materialized='table',\n)-}}\n\n\nWITH raw AS\n(\n\tSELECT DISTINCT \n\t\ta.*\n\t\t,UPPER(CONCAT(\n\t\t\n\t\tCASE \n\t\t\tWHEN  a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%') THEN dim_difficulty.rename\n\t\t\tELSE a.difficulty\n\t\tEND \n\t\t,'_'\n\t\t,\n\t\tCASE  \n\t\t\tWHEN a.dungeon_id  LIKE '%ENDLESS%' THEN 'ENDLESS'\n\t\t\tWHEN a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%') THEN CONCAT(dim_dungeon.rename,REPLACE(a.dungeon_id,CONCAT('DUNGEON_', dim_dungeon.original_name),''))\n\t\t\tELSE a.dungeon_id\n\t\tEND \n\t\t)) AS dungeon_id_difficulty\n\n\tFROM {{ ref('fct_level_design_lvl') }} a\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_dungeon ON a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%')\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_difficulty ON a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%')\n\n\tWHERE true \n) \n\n, rank_ AS\n(\n\tSELECT  \n\t\t*\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id ORDER BY gameplay_start_event_timestamp) AS dungeon_start_cnt\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id, gameplay_status ORDER BY gameplay_start_event_timestamp) AS dungeon_win_cnt\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id,level_start_level_count ORDER BY level_start_event_timestamp) AS dungeon_lvl_start_cnt\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id,level_start_level_count,level_status ORDER BY level_start_event_timestamp) AS dungeon_lvl_win_cnt\n\t\t,LAG(time_played) OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id, session_id ORDER BY level_start_event_timestamp) AS lag_time_played\n\n\tFROM raw\n)\n \n,final AS \n(\n\tSELECT  \n\t\tf.*except(time_played,lag_time_played ),\n\t\tf.time_played as cumulative_time_played,\n\t\tCOALESCE( f.time_played - lag_time_played,f.time_played)  as time_played,\n\tFROM rank_ f\n\tWHERE build_number <> '1307281126'\n)\n\n,buildtb AS \n(\n\tSELECT DISTINCT\n\t\tbuild,\n\t\tuser_id  \n\tFROM {{ ref('mart_level_design_gameplay')}} \n)\n\n\nSELECT DISTINCT \n\tf.*,\n\tbnc.pack_name, \n\tPARSE_DATE('%m/%d/%Y', ew.date_added) AS date_added,\n\tew.group AS group_,\n\tbn.build\n\nFROM final f \nLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_build_number_classification` bnc ON  f.build_number = bnc.build_number AND f.app_version = bnc.app_version\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew ON f.email = ew.email\nLEFT JOIN  buildtb bn ON f.user_id = bn.user_id\nORDER BY user_id, level_start_event_timestamp",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_level_design/mart_level_design_lvl.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/mart_level_design_lvl.sql",
            "name": "mart_level_design_lvl",
            "alias": "mart_level_design_lvl",
            "checksum": {
                "name": "sha256",
                "checksum": "65681cb1281bff224263fa46775b5787d8a89060c8d50300c560c7960b8cc08e"
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ],
                [
                    "mart_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/marts/sipher_odyssey_level_design/schema_mart_level_design_lvl.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/mart_level_design_lvl.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_level_design",
                "materialized": "table"
            },
            "created_at": 1705293862.15428,
            "compiled_code": "WITH raw AS\n(\n\tSELECT DISTINCT \n\t\ta.*\n\t\t,UPPER(CONCAT(\n\t\t\n\t\tCASE \n\t\t\tWHEN  a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%') THEN dim_difficulty.rename\n\t\t\tELSE a.difficulty\n\t\tEND \n\t\t,'_'\n\t\t,\n\t\tCASE  \n\t\t\tWHEN a.dungeon_id  LIKE '%ENDLESS%' THEN 'ENDLESS'\n\t\t\tWHEN a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%') THEN CONCAT(dim_dungeon.rename,REPLACE(a.dungeon_id,CONCAT('DUNGEON_', dim_dungeon.original_name),''))\n\t\t\tELSE a.dungeon_id\n\t\tEND \n\t\t)) AS dungeon_id_difficulty\n\n\tFROM `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl` a\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_dungeon ON a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%')\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_difficulty ON a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%')\n\n\tWHERE true \n) \n\n, rank_ AS\n(\n\tSELECT  \n\t\t*\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id ORDER BY gameplay_start_event_timestamp) AS dungeon_start_cnt\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id, gameplay_status ORDER BY gameplay_start_event_timestamp) AS dungeon_win_cnt\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id,level_start_level_count ORDER BY level_start_event_timestamp) AS dungeon_lvl_start_cnt\n\t\t,DENSE_RANK() OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id,level_start_level_count,level_status ORDER BY level_start_event_timestamp) AS dungeon_lvl_win_cnt\n\t\t,LAG(time_played) OVER (PARTITION BY user_id,mode,difficulty ,dungeon_id, session_id ORDER BY level_start_event_timestamp) AS lag_time_played\n\n\tFROM raw\n)\n \n,final AS \n(\n\tSELECT  \n\t\tf.*except(time_played,lag_time_played ),\n\t\tf.time_played as cumulative_time_played,\n\t\tCOALESCE( f.time_played - lag_time_played,f.time_played)  as time_played,\n\tFROM rank_ f\n\tWHERE build_number <> '1307281126'\n)\n\n,buildtb AS \n(\n\tSELECT DISTINCT\n\t\tbuild,\n\t\tuser_id  \n\tFROM `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay` \n)\n\n\nSELECT DISTINCT \n\tf.*,\n\tbnc.pack_name, \n\tPARSE_DATE('%m/%d/%Y', ew.date_added) AS date_added,\n\tew.group AS group_,\n\tbn.build\n\nFROM final f \nLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_build_number_classification` bnc ON  f.build_number = bnc.build_number AND f.app_version = bnc.app_version\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew ON f.email = ew.email\nLEFT JOIN  buildtb bn ON f.user_id = bn.user_id\nORDER BY user_id, level_start_event_timestamp",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_lvl`"
        },
        "model.dbt_sipher.fct_level_design_gameplay": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_event_params",
                    "macro.dbt_sipher.get_double_value_from_event_params"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d",
                    "model.dbt_sipher.int_sipher_odyssey_player_day0_version"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_level_design",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "cluster_by": [
                    "day_diff"
                ],
                "partition_by": {
                    "field": "day0_date_tzutc",
                    "data_type": "DATE"
                },
                "merge_update_columns": [
                    "user_id",
                    "session_id"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_level_design",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "fct_level_design_gameplay"
            ],
            "unique_id": "model.dbt_sipher.fct_level_design_gameplay",
            "raw_code": "{{- config(\n    materialized='incremental',\n\tmerge_update_columns = [\n    'user_id',\n    'session_id'\n  ],\n\tpartition_by={\n\t\t'field': 'day0_date_tzutc',\n\t\t'data_type': 'DATE',\n\t},\n\tcluster_by=['day_diff']\n  )-}}\n\nWITH raw AS\n(\n\tSELECT  *\n\tFROM {{ ref('stg_firebase__sipher_odyssey_events_14d') }}\n) \n\n, cohort_user AS\n(\n\tSELECT DISTINCT \n\t\tather_id\n\t\t,email\n\t\t,user_id\n\t\t,user_name\n\t\t,MIN(day0_date_tzutc) AS day0_date_tzutc\n\tFROM {{ ref('int_sipher_odyssey_player_day0_version') }}\n\tGROUP BY  1,2,3,4\n) \n\n, login_start_raw AS\n(\n\tSELECT DISTINCT \n\t\tuser_id\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"build_number\") }} AS build_number \n\t\t,app_info.version AS app_version\n\t\t,MIN (event_timestamp) AS current_build_timestamp\n\tFROM raw\n\tWHERE event_name = 'login_start'\n\tGROUP BY  user_id\n\t         ,event_name\n\t         ,build_number\n\t         ,app_version\n) \n\n, login_start AS\n(\n\tSELECT DISTINCT \n\t\tlogin_start_raw.user_id\n\t\t,ather_id\n\t\t,cohort.day0_date_tzutc                                                                                       AS day0_date_tzutc\n\t\t,event_name\n\t\t,build_number\n\t\t,app_version\n\t\t,email\n\t\t,user_name\n\t\t,current_build_timestamp\n\t\t,LEAD(current_build_timestamp,1) OVER (PARTITION BY login_start_raw.user_id ORDER BY current_build_timestamp) AS next_build_timestamp\n\tFROM login_start_raw\n\tJOIN cohort_user cohort\n\tON (login_start_raw.user_id = cohort.user_id)\n) \n\n, gameplay_start AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,COALESCE(raw.user_pseudo_id)                                          AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"session_id\") }} AS session_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"run_info\")}}, '$.dungeon_id' )) AS dungeon_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"run_info\")}}, '$.room_id' )) AS room_id\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"mode\") }}) AS mode\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"difficulty\") }}) AS difficulty\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"armor\")}}, '$.id' )) AS armor\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"armor\")}}, '$.PS' )) AS armor_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"head\")}}, '$.id' )) AS head\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"head\")}}, '$.PS' )) AS head_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"shoes\")}}, '$.id' )) AS shoes\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"shoes\")}}, '$.PS' )) AS shoes_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"legs\")}}, '$.id' )) AS legs\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"legs\")}}, '$.PS' )) AS legs_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gloves\")}}, '$.id' )) AS gloves\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gloves\")}}, '$.PS' )) AS gloves_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_1\")}}, '$.id' )) AS weapon1\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_1\")}}, '$.PS' )) AS weapon1_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_2\")}}, '$.id' )) AS weapon2\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"weapon_2\")}}, '$.PS' )) AS weapon2_PS\n\tFROM raw , UNNEST\n\t(event_params\n\t) AS ep\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_start')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, gameplay_end AS(\n\tSELECT  DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,COALESCE(raw.user_pseudo_id)                                          AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,{{ get_string_value_from_event_params(key=\"session_id\") }} AS session_id\n\t\t,UPPER({{ get_string_value_from_event_params(key=\"mode\") }}) AS mode\n\t\t,{{ get_double_value_from_event_params(key=\"player_amount\") }} AS player_amount\n\t\t,({{ get_double_value_from_event_params(key=\"player_remain\") }}) AS player_remain\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"player_character\")}}, '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gameplay_result\")}}, '$.status' )) AS status\n\t\t,SPLIT(UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gameplay_result\")}}, '$.level_count' )), '/')[OFFSET(0)] AS level_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"gameplay_result\")}}, '$.time_played' )) AS time_played\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.get_hit' )) AS get_hit\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.skill' )) AS skill_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.dash' )) AS dash_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"action_count\")}}, '$.changeweapon' )) AS changeweapon_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.skill' )) AS skill\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.ranged' )) AS ranged\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.meele' )) AS meele\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"damage_dealt\")}}, '$.status_effect' )) AS status_effect\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.enemy' )) AS enemy\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.down' )) AS down\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.revive' )) AS revive\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.being_revived' )) AS being_revived\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.hp_loss' )) AS hp_loss\n\t\t,UPPER(JSON_EXTRACT_SCALAR ({{ get_string_value_from_event_params(key=\"meta_count\")}}, '$.hp_pct' )) AS hp_pct\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_end')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, gameplay_final AS\n(\n\tSELECT  DISTINCT \n\t\tgameplay_start.event_date                                                   \t\t  AS gameplay_start_event_date\n\t\t,gameplay_start.event_timestamp                                                       AS gameplay_start_event_timestamp\n\t\t,login_start.build_number                                                             AS build_number\n\t\t,login_start.app_version\n\t\t,login_start.email\n\t\t,user_name\n\n\t\t,gameplay_start.user_pseudo_id                                                        AS user_pseudo_id\n\t\t,COALESCE(gameplay_start.user_id,gameplay_end.user_id)                                AS user_id\n\t\t,COALESCE(gameplay_start.day0_date_tzutc,gameplay_end.day0_date_tzutc)                AS day0_date_tzutc\n\t\t,COALESCE(gameplay_start.day_diff,gameplay_end.day_diff)                              AS day_diff\n\t\t,gameplay_start.event_name                                                            AS gameplay_start_event_name\n\t\t,gameplay_start.session_id                                                            AS session_id\n\t\t,CASE \n\t\t\tWHEN CAST(login_start.build_number AS INT64) >= CAST(dim_dungeon.build_number AS INT64)\n\t\t\t\tAND login_start.app_version >= dim_dungeon.app_version \n\t\t\tTHEN UPPER(dim_dungeon.rename_dungeon_id)  \n\t\t\tELSE gameplay_start.dungeon_id \n\t\tEND \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AS dungeon_id\n\t\t,gameplay_start.room_id                                                               AS room_id\n\t\t,COALESCE(gameplay_start.mode,gameplay_end.mode)                                      AS mode\n\t\t,gameplay_start.difficulty                                                            AS difficulty\n\t\t,COALESCE(gameplay_start.race,gameplay_end.race)                                      AS race\n\t\t,COALESCE(gameplay_start.sub_race,gameplay_end.sub_race)                              AS sub_race\n\t\t,CAST(COALESCE(gameplay_start.character_level,gameplay_end.character_level) AS INT64) AS character_level\n\t\t,CAST(COALESCE(gameplay_start.character_PS,gameplay_end.character_PS) AS INT64) - CAST(gameplay_start.armor_PS AS INT64) - CAST(gameplay_start.head_PS AS INT64) - CAST(gameplay_start.shoes_PS AS INT64) - CAST(gameplay_start.legs_PS AS INT64) - CAST(gameplay_start.gloves_PS AS INT64) - CAST(gameplay_start.weapon1_PS AS INT64) - CAST(gameplay_start.weapon2_PS AS INT64) AS character_PS\n\t\t,gameplay_start.armor                                                                 AS armor\n\t\t,CAST(gameplay_start.armor_PS AS INT64)                                               AS armor_PS\n\t\t,gameplay_start.head                                                                  AS head\n\t\t,CAST(gameplay_start.head_PS AS INT64)                                                AS head_PS\n\t\t,gameplay_start.shoes                                                                 AS shoes\n\t\t,CAST(gameplay_start.shoes_PS AS INT64)                                               AS shoes_PS\n\t\t,gameplay_start.legs                                                                  AS legs\n\t\t,CAST(gameplay_start.legs_PS AS INT64)                                                AS legs_PS\n\t\t,gameplay_start.gloves                                                                AS gloves\n\t\t,CAST(gameplay_start.gloves_PS AS INT64)                                              AS gloves_PS\n\t\t,gameplay_start.weapon1                                                               AS weapon1\n\t\t,CAST(gameplay_start.weapon1_PS AS INT64)                                             AS weapon1_PS\n\t\t,gameplay_start.weapon2                                                               AS weapon2\n\t\t,CAST(gameplay_start.weapon2_PS AS INT64)                                             AS weapon2_PS\n\t\t,gameplay_end.event_date                                                              AS gameplay_end_event_date\n\t\t,gameplay_end.event_timestamp                                                         AS gameplay_end_event_timestamp\n\t\t,gameplay_end.event_name                                                              AS gameplay_end_event_name\n\t\t,CAST(gameplay_end.player_amount AS INT64)                                            AS gameplay_player_amount\n\t\t,CAST(gameplay_end.player_remain AS INT64)                                            AS gameplay_player_remain\n\t\t,COALESCE(gameplay_end.status,'UNDETECTED')                                           AS gameplay_status\n\t\t,CAST(COALESCE(NULLIF(gameplay_end.level_count,''),NULL) AS INT64)                     AS gameplay_level_count \n\t\t,CAST(gameplay_end.time_played AS INT64)                                              AS gameplay_time_played\n\t\t,CAST(gameplay_end.get_hit AS FLOAT64)                                              AS gameplay_get_hit\n\t\t,CAST(gameplay_end.skill_count AS INT64)                                              AS gameplay_skill_count\n\t\t,CAST(gameplay_end.dash_count AS INT64)                                               AS gameplay_dash_count\n\t\t,CAST(gameplay_end.changeweapon_count AS INT64)                                       AS gameplay_changeweapon_count\n\t\t,CAST(gameplay_end.skill AS INT64)                                                    AS gameplay_skill\n\t\t,CAST(gameplay_end.ranged AS INT64)                                                   AS gameplay_ranged\n\t\t,CAST(gameplay_end.meele AS INT64)                                                    AS gameplay_meele\n\t\t,gameplay_end.status_effect                                                           AS gameplay_status_effect\n\t\t,CAST(gameplay_end.enemy AS INT64)                                                    AS gameplay_enemy\n\t\t,CAST(gameplay_end.down AS INT64)                                                     AS gameplay_down\n\t\t,CAST(gameplay_end.revive AS INT64)                                                   AS gameplay_revive\n\t\t,CAST(gameplay_end.being_revived AS INT64)                                            AS gameplay_being_revived\n\t\t,CAST(gameplay_end.hp_loss AS FLOAT64)                                                AS gameplay_hp_loss\n\t\t,CAST(gameplay_end.hp_pct AS FLOAT64)                                                 AS gameplay_hp_pct\n\tFROM gameplay_start\n\tLEFT JOIN gameplay_end\n\tON gameplay_start.session_id = gameplay_end.session_id AND gameplay_start.user_pseudo_id = gameplay_end.user_pseudo_id\n\tLEFT JOIN login_start\n\tON gameplay_start.user_id = login_start.user_id AND gameplay_start.event_timestamp > login_start.current_build_timestamp AND gameplay_start.event_timestamp < COALESCE(login_start.next_build_timestamp, 7258118400000000)\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon` dim_dungeon\n\tON UPPER(gameplay_start.dungeon_id) = UPPER(dim_dungeon.event_dungeon_id)\n\tWHERE gameplay_start.session_id IS NOT NULL \n)\n\n\nSELECT  *\nFROM gameplay_final\nwhere build_number <> '1307281126'",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_level_design/fct_level_design_gameplay.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/fct_level_design_gameplay.sql",
            "name": "fct_level_design_gameplay",
            "alias": "fct_level_design_gameplay",
            "checksum": {
                "name": "sha256",
                "checksum": "13ecd073671a1b64965cc84e516ef536cf181788d2cd51e3f00abf694c0a98f7"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__sipher_odyssey_events_14d"
                ],
                [
                    "int_sipher_odyssey_player_day0_version"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/fct_level_design_gameplay.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_level_design",
                "materialized": "incremental",
                "merge_update_columns": [
                    "user_id",
                    "session_id"
                ],
                "partition_by": {
                    "field": "day0_date_tzutc",
                    "data_type": "DATE"
                },
                "cluster_by": [
                    "day_diff"
                ]
            },
            "created_at": 1705293862.1659005,
            "compiled_code": "WITH raw AS\n(\n\tSELECT  *\n\tFROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_14d`\n) \n\n, cohort_user AS\n(\n\tSELECT DISTINCT \n\t\tather_id\n\t\t,email\n\t\t,user_id\n\t\t,user_name\n\t\t,MIN(day0_date_tzutc) AS day0_date_tzutc\n\tFROM `sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_day0_version`\n\tGROUP BY  1,2,3,4\n) \n\n, login_start_raw AS\n(\n\tSELECT DISTINCT \n\t\tuser_id\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"build_number\") AS build_number \n\t\t,app_info.version AS app_version\n\t\t,MIN (event_timestamp) AS current_build_timestamp\n\tFROM raw\n\tWHERE event_name = 'login_start'\n\tGROUP BY  user_id\n\t         ,event_name\n\t         ,build_number\n\t         ,app_version\n) \n\n, login_start AS\n(\n\tSELECT DISTINCT \n\t\tlogin_start_raw.user_id\n\t\t,ather_id\n\t\t,cohort.day0_date_tzutc                                                                                       AS day0_date_tzutc\n\t\t,event_name\n\t\t,build_number\n\t\t,app_version\n\t\t,email\n\t\t,user_name\n\t\t,current_build_timestamp\n\t\t,LEAD(current_build_timestamp,1) OVER (PARTITION BY login_start_raw.user_id ORDER BY current_build_timestamp) AS next_build_timestamp\n\tFROM login_start_raw\n\tJOIN cohort_user cohort\n\tON (login_start_raw.user_id = cohort.user_id)\n) \n\n, gameplay_start AS\n(\n\tSELECT DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,COALESCE(raw.user_pseudo_id)                                          AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"session_id\") AS session_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"run_info\"), '$.dungeon_id' )) AS dungeon_id\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"run_info\"), '$.room_id' )) AS room_id\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mode\")) AS mode\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"difficulty\")) AS difficulty\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"armor\"), '$.id' )) AS armor\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"armor\"), '$.PS' )) AS armor_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"head\"), '$.id' )) AS head\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"head\"), '$.PS' )) AS head_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"shoes\"), '$.id' )) AS shoes\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"shoes\"), '$.PS' )) AS shoes_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"legs\"), '$.id' )) AS legs\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"legs\"), '$.PS' )) AS legs_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gloves\"), '$.id' )) AS gloves\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gloves\"), '$.PS' )) AS gloves_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_1\"), '$.id' )) AS weapon1\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_1\"), '$.PS' )) AS weapon1_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_2\"), '$.id' )) AS weapon2\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"weapon_2\"), '$.PS' )) AS weapon2_PS\n\tFROM raw , UNNEST\n\t(event_params\n\t) AS ep\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_start')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, gameplay_end AS(\n\tSELECT  DISTINCT \n\t\tevent_date\n\t\t,event_timestamp\n\t\t,COALESCE(raw.user_pseudo_id)                                          AS user_pseudo_id\n\t\t,raw.user_id                                                           AS user_id\n\t\t,cohort.day0_date_tzutc                                                AS day0_date_tzutc\n\t\t,date_diff(PARSE_DATE('%Y%m%d',event_date),cohort.day0_date_tzutc,day) AS day_diff\n\t\t,event_name\n\t\t,(SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"session_id\") AS session_id\n\t\t,UPPER((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"mode\")) AS mode\n\t\t,(SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_amount\") AS player_amount\n\t\t,((SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_remain\")) AS player_remain\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.race' )) AS race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.sub_race' )) AS sub_race\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.level' )) AS character_level\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"player_character\"), '$.PS' )) AS character_PS\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gameplay_result\"), '$.status' )) AS status\n\t\t,SPLIT(UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gameplay_result\"), '$.level_count' )), '/')[OFFSET(0)] AS level_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"gameplay_result\"), '$.time_played' )) AS time_played\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.get_hit' )) AS get_hit\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.skill' )) AS skill_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.dash' )) AS dash_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"action_count\"), '$.changeweapon' )) AS changeweapon_count\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.skill' )) AS skill\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.ranged' )) AS ranged\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.meele' )) AS meele\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"damage_dealt\"), '$.status_effect' )) AS status_effect\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.enemy' )) AS enemy\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.down' )) AS down\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.revive' )) AS revive\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.being_revived' )) AS being_revived\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.hp_loss' )) AS hp_loss\n\t\t,UPPER(JSON_EXTRACT_SCALAR ((SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"meta_count\"), '$.hp_pct' )) AS hp_pct\n\tFROM raw\n\tJOIN cohort_user cohort\n\tON raw.user_id = cohort.user_id\n\tWHERE event_name IN ('gameplay_end')\n\tORDER BY event_date DESC, user_pseudo_id, event_timestamp \n) \n\n, gameplay_final AS\n(\n\tSELECT  DISTINCT \n\t\tgameplay_start.event_date                                                   \t\t  AS gameplay_start_event_date\n\t\t,gameplay_start.event_timestamp                                                       AS gameplay_start_event_timestamp\n\t\t,login_start.build_number                                                             AS build_number\n\t\t,login_start.app_version\n\t\t,login_start.email\n\t\t,user_name\n\n\t\t,gameplay_start.user_pseudo_id                                                        AS user_pseudo_id\n\t\t,COALESCE(gameplay_start.user_id,gameplay_end.user_id)                                AS user_id\n\t\t,COALESCE(gameplay_start.day0_date_tzutc,gameplay_end.day0_date_tzutc)                AS day0_date_tzutc\n\t\t,COALESCE(gameplay_start.day_diff,gameplay_end.day_diff)                              AS day_diff\n\t\t,gameplay_start.event_name                                                            AS gameplay_start_event_name\n\t\t,gameplay_start.session_id                                                            AS session_id\n\t\t,CASE \n\t\t\tWHEN CAST(login_start.build_number AS INT64) >= CAST(dim_dungeon.build_number AS INT64)\n\t\t\t\tAND login_start.app_version >= dim_dungeon.app_version \n\t\t\tTHEN UPPER(dim_dungeon.rename_dungeon_id)  \n\t\t\tELSE gameplay_start.dungeon_id \n\t\tEND \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  AS dungeon_id\n\t\t,gameplay_start.room_id                                                               AS room_id\n\t\t,COALESCE(gameplay_start.mode,gameplay_end.mode)                                      AS mode\n\t\t,gameplay_start.difficulty                                                            AS difficulty\n\t\t,COALESCE(gameplay_start.race,gameplay_end.race)                                      AS race\n\t\t,COALESCE(gameplay_start.sub_race,gameplay_end.sub_race)                              AS sub_race\n\t\t,CAST(COALESCE(gameplay_start.character_level,gameplay_end.character_level) AS INT64) AS character_level\n\t\t,CAST(COALESCE(gameplay_start.character_PS,gameplay_end.character_PS) AS INT64) - CAST(gameplay_start.armor_PS AS INT64) - CAST(gameplay_start.head_PS AS INT64) - CAST(gameplay_start.shoes_PS AS INT64) - CAST(gameplay_start.legs_PS AS INT64) - CAST(gameplay_start.gloves_PS AS INT64) - CAST(gameplay_start.weapon1_PS AS INT64) - CAST(gameplay_start.weapon2_PS AS INT64) AS character_PS\n\t\t,gameplay_start.armor                                                                 AS armor\n\t\t,CAST(gameplay_start.armor_PS AS INT64)                                               AS armor_PS\n\t\t,gameplay_start.head                                                                  AS head\n\t\t,CAST(gameplay_start.head_PS AS INT64)                                                AS head_PS\n\t\t,gameplay_start.shoes                                                                 AS shoes\n\t\t,CAST(gameplay_start.shoes_PS AS INT64)                                               AS shoes_PS\n\t\t,gameplay_start.legs                                                                  AS legs\n\t\t,CAST(gameplay_start.legs_PS AS INT64)                                                AS legs_PS\n\t\t,gameplay_start.gloves                                                                AS gloves\n\t\t,CAST(gameplay_start.gloves_PS AS INT64)                                              AS gloves_PS\n\t\t,gameplay_start.weapon1                                                               AS weapon1\n\t\t,CAST(gameplay_start.weapon1_PS AS INT64)                                             AS weapon1_PS\n\t\t,gameplay_start.weapon2                                                               AS weapon2\n\t\t,CAST(gameplay_start.weapon2_PS AS INT64)                                             AS weapon2_PS\n\t\t,gameplay_end.event_date                                                              AS gameplay_end_event_date\n\t\t,gameplay_end.event_timestamp                                                         AS gameplay_end_event_timestamp\n\t\t,gameplay_end.event_name                                                              AS gameplay_end_event_name\n\t\t,CAST(gameplay_end.player_amount AS INT64)                                            AS gameplay_player_amount\n\t\t,CAST(gameplay_end.player_remain AS INT64)                                            AS gameplay_player_remain\n\t\t,COALESCE(gameplay_end.status,'UNDETECTED')                                           AS gameplay_status\n\t\t,CAST(COALESCE(NULLIF(gameplay_end.level_count,''),NULL) AS INT64)                     AS gameplay_level_count \n\t\t,CAST(gameplay_end.time_played AS INT64)                                              AS gameplay_time_played\n\t\t,CAST(gameplay_end.get_hit AS FLOAT64)                                              AS gameplay_get_hit\n\t\t,CAST(gameplay_end.skill_count AS INT64)                                              AS gameplay_skill_count\n\t\t,CAST(gameplay_end.dash_count AS INT64)                                               AS gameplay_dash_count\n\t\t,CAST(gameplay_end.changeweapon_count AS INT64)                                       AS gameplay_changeweapon_count\n\t\t,CAST(gameplay_end.skill AS INT64)                                                    AS gameplay_skill\n\t\t,CAST(gameplay_end.ranged AS INT64)                                                   AS gameplay_ranged\n\t\t,CAST(gameplay_end.meele AS INT64)                                                    AS gameplay_meele\n\t\t,gameplay_end.status_effect                                                           AS gameplay_status_effect\n\t\t,CAST(gameplay_end.enemy AS INT64)                                                    AS gameplay_enemy\n\t\t,CAST(gameplay_end.down AS INT64)                                                     AS gameplay_down\n\t\t,CAST(gameplay_end.revive AS INT64)                                                   AS gameplay_revive\n\t\t,CAST(gameplay_end.being_revived AS INT64)                                            AS gameplay_being_revived\n\t\t,CAST(gameplay_end.hp_loss AS FLOAT64)                                                AS gameplay_hp_loss\n\t\t,CAST(gameplay_end.hp_pct AS FLOAT64)                                                 AS gameplay_hp_pct\n\tFROM gameplay_start\n\tLEFT JOIN gameplay_end\n\tON gameplay_start.session_id = gameplay_end.session_id AND gameplay_start.user_pseudo_id = gameplay_end.user_pseudo_id\n\tLEFT JOIN login_start\n\tON gameplay_start.user_id = login_start.user_id AND gameplay_start.event_timestamp > login_start.current_build_timestamp AND gameplay_start.event_timestamp < COALESCE(login_start.next_build_timestamp, 7258118400000000)\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon` dim_dungeon\n\tON UPPER(gameplay_start.dungeon_id) = UPPER(dim_dungeon.event_dungeon_id)\n\tWHERE gameplay_start.session_id IS NOT NULL \n)\n\n\nSELECT  *\nFROM gameplay_final\nwhere build_number <> '1307281126'",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_gameplay`"
        },
        "model.dbt_sipher.mart_level_design_gameplay": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl",
                    "model.dbt_sipher.fct_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_level_design",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_level_design",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "mart_level_design_gameplay"
            ],
            "unique_id": "model.dbt_sipher.mart_level_design_gameplay",
            "raw_code": "{{- config(\n    materialized='table',\n)-}}\n\n\nWITH max_lvl_reach AS\n(\n\tSELECT  \n\t\tuser_id\n\t\t,session_id\n\t\t,MAX(level_start_level_count) level_start_level_count\n\t\t,SUM(time_played)time_played\n\tFROM (\n\t\tSELECT DISTINCT \n\t\t\tuser_id\n\t       ,session_id\n\t       ,level_start_level_count\n\t\t   ,time_played\n\t\tFROM  {{ ref('fct_level_design_lvl') }}\n\t)\n\tWHERE true\n\tGROUP BY  1,2\n) \n\n, raw AS\n(\n\tSELECT DISTINCT \n\t\ta.* EXCEPT(gameplay_level_count,gameplay_time_played)\n\t    ,COALESCE(gameplay_level_count,level_start_level_count )gameplay_level_count\n\t\t,COALESCE(gameplay_time_played,time_played )gameplay_time_played\n\t\t,CAST(character_PS AS INT64) + CAST(armor_PS AS INT64) + CAST(head_PS AS INT64) + CAST(shoes_PS AS INT64)+ CAST(gloves_PS AS INT64) + CAST(weapon1_PS AS INT64) + CAST(weapon2_PS AS INT64) + CAST(legs_PS AS INT64) AS totalPS\n\t\t,UPPER(CONCAT(\n\t\tCASE \n\t\t\tWHEN  a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%') THEN dim_difficulty.rename\n\t\t\tELSE a.difficulty\n\t\tEND \n\t\t,'_'\n\t\t,\n\t\tCASE  \n\t\t\tWHEN a.dungeon_id  LIKE '%ENDLESS%' THEN 'ENDLESS'\n\t\t\tWHEN a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%') THEN CONCAT(dim_dungeon.rename,REPLACE(a.dungeon_id,CONCAT('DUNGEON_', dim_dungeon.original_name),''))\n\t\t\tELSE a.dungeon_id\n\t\tEND \n\t\t)) AS dungeon_id_difficulty\n\n\tFROM {{ ref('fct_level_design_gameplay') }} a\n\tLEFT JOIN max_lvl_reach ml\n\tON a.user_id = ml.user_id AND a.user_id = ml.user_id AND a.session_id = ml.session_id\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_dungeon\n\tON a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%')\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_difficulty\n\tON a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%')\n) \n\n, max_min_ps_date_diff AS\n(\n\tSELECT DISTINCT \n\t\tuser_id\n\t\t,day_diff\n\t\t,MAX(totalPS) maxtotalPS\n\t\t,MAX(gameplay_start_event_timestamp)max_gameplay_start_event_timestamp\n\t\t,MIN(totalPS) min_totalPS\n\t\t,MIN(gameplay_start_event_timestamp)min_gameplay_start_event_timestamp\n\tFROM raw\n\tGROUP BY 1,2\n)\n\n,final AS \n(\n\tSELECT DISTINCT \n\t\traw.*\n       ,m.maxtotalPS\n\t   ,min_.min_totalPS\n       ,DENSE_RANK() OVER (PARTITION BY raw.user_id,mode,difficulty ,dungeon_id ORDER BY gameplay_start_event_timestamp)                 AS dungeon_start_cnt\n       ,DENSE_RANK() OVER (PARTITION BY raw.user_id,mode,difficulty ,dungeon_id,gameplay_status ORDER BY gameplay_start_event_timestamp) AS dungeon_win_cnt\n\n\tFROM raw\n\tLEFT JOIN max_min_ps_date_diff m ON raw.user_id = m.user_id AND raw.day_diff = m.day_diff AND raw.gameplay_start_event_timestamp = m.max_gameplay_start_event_timestamp\n\tLEFT JOIN max_min_ps_date_diff min_ ON raw.user_id = min_.user_id AND raw.day_diff = min_.day_diff AND raw.gameplay_start_event_timestamp = min_.min_gameplay_start_event_timestamp\n)\n\n,only1buildnumber AS \n(\n\tSELECT DISTINCT \n\t\tuser_id \n\tFROM {{ this }}\n\tGROUP BY 1\n\tHAVING COUNT(DISTINCT build_number ) = 1\n)\n\n,user_old_bn AS \n(\n\tSELECT DISTINCT \n\t\ta.user_id\n\tFROM {{ this }} a \n\tLEFT JOIN (\n\t\tSELECT DISTINCT \n\t\t\tuser_id  \n\t\tFROM  {{ this }}\n\t\tWHERE build_number IN ('1309211827','1309202141')\n\t\t) b \n\t\tON a.user_id = b.user_id\n\tWHERE b.user_id IS NULL\n)\n\n\nSELECT DISTINCT \n\tf.*,\n\tbnc.pack_name,\n\tPARSE_DATE('%m/%d/%Y', ew.date_added) AS date_added,\n\tew.group AS group_,\n\tCASE \n\t\tWHEN day0_date_tzutc >= DATE('2023-08-01') AND bn.user_id IS NOT NULL AND f.build_number IN ('1309211827','1309202141') THEN 'new' \n\t\tWHEN day0_date_tzutc >= DATE('2023-08-01') AND obn.user_id IS NOT NULL THEN 'old' \n\tEND AS build\n\nFROM final f \nLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_build_number_classification` bnc ON  f.build_number = bnc.build_number AND f.app_version = bnc.app_version\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew ON f.email = ew.email\nLEFT JOIN  only1buildnumber bn ON f.user_id = bn.user_id\nLEFT JOIN  user_old_bn obn ON f.user_id = obn.user_id",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_level_design/mart_level_design_gameplay.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/mart_level_design_gameplay.sql",
            "name": "mart_level_design_gameplay",
            "alias": "mart_level_design_gameplay",
            "checksum": {
                "name": "sha256",
                "checksum": "b3c5cc3080b8389fc4d1a37165020c3bee19d3eba269bde6fc9608f111e90e15"
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ],
                [
                    "fct_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_sipher://models/marts/sipher_odyssey_level_design/schema_mart_level_design_gameplay.yml",
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/mart_level_design_gameplay.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_level_design",
                "materialized": "table"
            },
            "created_at": 1705293862.1590297,
            "compiled_code": "WITH max_lvl_reach AS\n(\n\tSELECT  \n\t\tuser_id\n\t\t,session_id\n\t\t,MAX(level_start_level_count) level_start_level_count\n\t\t,SUM(time_played)time_played\n\tFROM (\n\t\tSELECT DISTINCT \n\t\t\tuser_id\n\t       ,session_id\n\t       ,level_start_level_count\n\t\t   ,time_played\n\t\tFROM  `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl`\n\t)\n\tWHERE true\n\tGROUP BY  1,2\n) \n\n, raw AS\n(\n\tSELECT DISTINCT \n\t\ta.* EXCEPT(gameplay_level_count,gameplay_time_played)\n\t    ,COALESCE(gameplay_level_count,level_start_level_count )gameplay_level_count\n\t\t,COALESCE(gameplay_time_played,time_played )gameplay_time_played\n\t\t,CAST(character_PS AS INT64) + CAST(armor_PS AS INT64) + CAST(head_PS AS INT64) + CAST(shoes_PS AS INT64)+ CAST(gloves_PS AS INT64) + CAST(weapon1_PS AS INT64) + CAST(weapon2_PS AS INT64) + CAST(legs_PS AS INT64) AS totalPS\n\t\t,UPPER(CONCAT(\n\t\tCASE \n\t\t\tWHEN  a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%') THEN dim_difficulty.rename\n\t\t\tELSE a.difficulty\n\t\tEND \n\t\t,'_'\n\t\t,\n\t\tCASE  \n\t\t\tWHEN a.dungeon_id  LIKE '%ENDLESS%' THEN 'ENDLESS'\n\t\t\tWHEN a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%') THEN CONCAT(dim_dungeon.rename,REPLACE(a.dungeon_id,CONCAT('DUNGEON_', dim_dungeon.original_name),''))\n\t\t\tELSE a.dungeon_id\n\t\tEND \n\t\t)) AS dungeon_id_difficulty\n\n\tFROM `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_gameplay` a\n\tLEFT JOIN max_lvl_reach ml\n\tON a.user_id = ml.user_id AND a.user_id = ml.user_id AND a.session_id = ml.session_id\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_dungeon\n\tON a.dungeon_id  LIKE CONCAT('%', dim_dungeon.original_name,'%')\n\tLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_dungeon_difficulty` dim_difficulty\n\tON a.difficulty  LIKE CONCAT('%',dim_difficulty.original_name,'%')\n) \n\n, max_min_ps_date_diff AS\n(\n\tSELECT DISTINCT \n\t\tuser_id\n\t\t,day_diff\n\t\t,MAX(totalPS) maxtotalPS\n\t\t,MAX(gameplay_start_event_timestamp)max_gameplay_start_event_timestamp\n\t\t,MIN(totalPS) min_totalPS\n\t\t,MIN(gameplay_start_event_timestamp)min_gameplay_start_event_timestamp\n\tFROM raw\n\tGROUP BY 1,2\n)\n\n,final AS \n(\n\tSELECT DISTINCT \n\t\traw.*\n       ,m.maxtotalPS\n\t   ,min_.min_totalPS\n       ,DENSE_RANK() OVER (PARTITION BY raw.user_id,mode,difficulty ,dungeon_id ORDER BY gameplay_start_event_timestamp)                 AS dungeon_start_cnt\n       ,DENSE_RANK() OVER (PARTITION BY raw.user_id,mode,difficulty ,dungeon_id,gameplay_status ORDER BY gameplay_start_event_timestamp) AS dungeon_win_cnt\n\n\tFROM raw\n\tLEFT JOIN max_min_ps_date_diff m ON raw.user_id = m.user_id AND raw.day_diff = m.day_diff AND raw.gameplay_start_event_timestamp = m.max_gameplay_start_event_timestamp\n\tLEFT JOIN max_min_ps_date_diff min_ ON raw.user_id = min_.user_id AND raw.day_diff = min_.day_diff AND raw.gameplay_start_event_timestamp = min_.min_gameplay_start_event_timestamp\n)\n\n,only1buildnumber AS \n(\n\tSELECT DISTINCT \n\t\tuser_id \n\tFROM `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`\n\tGROUP BY 1\n\tHAVING COUNT(DISTINCT build_number ) = 1\n)\n\n,user_old_bn AS \n(\n\tSELECT DISTINCT \n\t\ta.user_id\n\tFROM `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay` a \n\tLEFT JOIN (\n\t\tSELECT DISTINCT \n\t\t\tuser_id  \n\t\tFROM  `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`\n\t\tWHERE build_number IN ('1309211827','1309202141')\n\t\t) b \n\t\tON a.user_id = b.user_id\n\tWHERE b.user_id IS NULL\n)\n\n\nSELECT DISTINCT \n\tf.*,\n\tbnc.pack_name,\n\tPARSE_DATE('%m/%d/%Y', ew.date_added) AS date_added,\n\tew.group AS group_,\n\tCASE \n\t\tWHEN day0_date_tzutc >= DATE('2023-08-01') AND bn.user_id IS NOT NULL AND f.build_number IN ('1309211827','1309202141') THEN 'new' \n\t\tWHEN day0_date_tzutc >= DATE('2023-08-01') AND obn.user_id IS NOT NULL THEN 'old' \n\tEND AS build\n\nFROM final f \nLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_build_number_classification` bnc ON  f.build_number = bnc.build_number AND f.app_version = bnc.app_version\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew ON f.email = ew.email\nLEFT JOIN  only1buildnumber bn ON f.user_id = bn.user_id\nLEFT JOIN  user_old_bn obn ON f.user_id = obn.user_id",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`"
        },
        "model.dbt_sipher.dim_sipher_odyssey_player": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.int_sipher_odyssey_player_devices"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_core",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_core",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_core",
                "dim_sipher_odyssey_player"
            ],
            "unique_id": "model.dbt_sipher.dim_sipher_odyssey_player",
            "raw_code": "{{- config(\n  materialized='table',\n) -}}\n\nWITH devices AS (\n  SELECT\n    game_user_id,\n    ather_id,\n    ARRAY_AGG(STRUCT(\n      last_used_at,\n      advertising_ids,\n      vendor_ids,\n      user_pseudo_ids,\n      category,\n      mobile_brand_name,\n      mobile_model_name,\n      mobile_marketing_name,\n      mobile_os_hardware_model,\n      operating_system,\n      operating_system_version,\n      browser,\n      browser_version,\n      web_info_browser,\n      web_info_browser_version,\n      web_info_hostname\n    )) AS device\n  FROM {{ ref('int_sipher_odyssey_player_devices') }}\n  GROUP BY game_user_id, ather_id\n)\n\nSELECT * FROM devices",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_core/dim_sipher_odyssey_player.sql",
            "original_file_path": "models/marts/sipher_odyssey_core/dim_sipher_odyssey_player.sql",
            "name": "dim_sipher_odyssey_player",
            "alias": "dim_sipher_odyssey_player",
            "checksum": {
                "name": "sha256",
                "checksum": "28c5dc3de4eed0d9c743cce50223c36a8d00549101adc33f3791151ce585846c"
            },
            "tags": [],
            "refs": [
                [
                    "int_sipher_odyssey_player_devices"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_core/dim_sipher_odyssey_player.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_core",
                "materialized": "table"
            },
            "created_at": 1705293861.841819,
            "compiled_code": "WITH devices AS (\n  SELECT\n    game_user_id,\n    ather_id,\n    ARRAY_AGG(STRUCT(\n      last_used_at,\n      advertising_ids,\n      vendor_ids,\n      user_pseudo_ids,\n      category,\n      mobile_brand_name,\n      mobile_model_name,\n      mobile_marketing_name,\n      mobile_os_hardware_model,\n      operating_system,\n      operating_system_version,\n      browser,\n      browser_version,\n      web_info_browser,\n      web_info_browser_version,\n      web_info_hostname\n    )) AS device\n  FROM `sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_devices`\n  GROUP BY game_user_id, ather_id\n)\n\nSELECT * FROM devices",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_core`.`dim_sipher_odyssey_player`"
        },
        "model.dbt_sipher.int_sipher_odyssey_player_day0_version": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_user_properties",
                    "macro.dbt_sipher.get_string_value_from_event_params"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
                    "model.dbt_sipher.stg_aws__ather_id__raw_cognito",
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_core",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "cluster_by": [
                    "user_id"
                ],
                "partition_by": {
                    "field": "day0_date_tzutc",
                    "data_type": "DATE"
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_core",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_core",
                "intermediate",
                "int_sipher_odyssey_player_day0_version"
            ],
            "unique_id": "model.dbt_sipher.int_sipher_odyssey_player_day0_version",
            "raw_code": "{{- config(\n  materialized='table',\n  partition_by={\n    'field':'day0_date_tzutc',\n    'data_type':'DATE',\n  },\n  cluster_by=['user_id']\n) -}}\n\n\nWITH\n  cohort_date AS \n  (\n    SELECT\n      DISTINCT\n      user_id,\n      user_pseudo_id,\n      MIN(event_timestamp) AS first_open_timestamp,\n      EXTRACT(DATE FROM TIMESTAMP_MICROS (MIN(event_timestamp) )) AS day0_date_tzutc\n    FROM\n      {{ ref('stg_firebase__sipher_odyssey_events_all_time') }}\n    WHERE event_name IN ('login_start')\n    GROUP BY 1,2\n  )\n\n  ,data_login AS (\n    SELECT\n      DISTINCT\n      {{ get_string_value_from_user_properties(key=\"ather_id\") }} AS ather_id,\n      {{ get_string_value_from_event_params(key=\"build_number\") }} AS build_number,\n      user_id,\n      user_pseudo_id,\n\n    FROM {{ ref('stg_firebase__sipher_odyssey_events_all_time') }}\n    WHERE event_name IN ('login_start')\n  )\n\n  ,user_email AS\n  (\n    SELECT\n      *\n    FROM {{ ref('stg_aws__ather_id__raw_cognito') }}\n\n  )\n\n  ,email_last_updated AS \n  (\n    SELECT\n      user_id AS ather_id,\n      MAX(user_last_modified_date) AS timestamp_date\n    FROM user_email\n    GROUP BY 1\n  )\n\n  ,email_unique AS \n  (\n    SELECT\n      DISTINCT\n      elu.*,\n      CASE\n          WHEN ue.email LIKE '%sipher.xyz%' THEN REPLACE(ue.email, 'sipher.xyz', 'atherlabs.com')\n          ELSE ue.email\n      END AS email\n      ,ue.name AS user_name\n    FROM email_last_updated AS elu\n    LEFT JOIN user_email AS ue \n        ON elu.ather_id = ue.user_id\n        AND elu.timestamp_date = ue.user_last_modified_date\n  )\n\n    ,join_data AS \n    (\n    SELECT\n      cd.first_open_timestamp,\n      cd.day0_date_tzutc,\n      lg.*,\n      SUBSTR(lg.user_id, 1, 3) AS prefix_user_id,\n      SUBSTR(lg.user_id, 4) AS suffix_user_id,\n      du.user_name AS user_name,\n      du.email AS email\n    FROM  data_login AS lg\n    LEFT JOIN email_unique AS du ON lg.ather_id = du.ather_id\n    LEFT JOIN cohort_date AS cd ON lg.user_pseudo_id = cd.user_pseudo_id AND lg.user_id = cd.user_id\n  )\n\n    ,pre_final AS(\n    SELECT\n        user_id,\n        ather_id,\n        MIN(day0_date_tzutc) AS day0_date_tzutc,\n        email,\n        SPLIT(email, '@')[OFFSET(0)] AS prefix_email,\n        SPLIT(email, '@')[OFFSET(1)] AS suffix_email,\n        user_name,\n        prefix_user_id,\n        CAST(suffix_user_id AS INT64) AS suffix_user_id,\n        MIN(build_number) AS first_build_number,\n        MAX(build_number) AS last_build_number,\n        MIN(first_open_timestamp) AS first_open_timestamp,\n    FROM join_data\n    WHERE\n        user_id IS NOT NULL\n    GROUP BY user_id, ather_id, email, prefix_user_id,suffix_user_id, user_name\n    )\n\n    ,company_list AS(\n    SELECT \n        *\n    FROM pre_final\n    WHERE\n        (prefix_email LIKE 'thuy.dang%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'anh.phan%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'tan.vo%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'tester%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'dunghoang%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'duong.cao%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'van.truong%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'thang.nguyenduy%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'dong.nguyenha%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'tai.pham%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'thanh.khuong%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'huy.vu%' AND suffix_email IN ('atherlabs.com'))\n    )\n    \n    ,final AS(\n    SELECT \n        *\n    FROM pre_final\n    WHERE (suffix_user_id BETWEEN 35163 AND 35175\n      OR suffix_user_id > 35192)\n      AND ather_id IS NOT NULL \n      AND user_id NOT IN ( SELECT DISTINCT user_id FROM company_list)\n    )\n\n    , user_first_open_data AS(\n      SELECT final.*\n      FROM final\n          LEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_cheating_users` b using(user_id)\n      WHERE b.user_id IS NULL\n    )\n\n    , login_start_raw AS(\n    SELECT DISTINCT \n      user_id,\n      event_name,\n      {{ get_string_value_from_event_params(key='build_number') }} AS build_number,\n      app_info.version AS app_version,\n      MIN (event_timestamp) AS current_build_timestamp\n    FROM {{ ref('stg_firebase__sipher_odyssey_events_all_time') }}\n    WHERE event_name = 'login_start'\n    GROUP BY user_id, event_name, build_number, app_version\n    )\n\n    , login_start AS\n    (\n    SELECT DISTINCT \n      login_start_raw.user_id\n      ,ather_id\n      ,cohort.day0_date_tzutc AS day0_date_tzutc\n      ,build_number\n      ,app_version\n      ,email\n      ,user_name\n      ,current_build_timestamp\n      ,LEAD(current_build_timestamp,1) OVER (PARTITION BY login_start_raw.user_id ORDER BY current_build_timestamp) AS next_build_timestamp\n    FROM login_start_raw\n    JOIN user_first_open_data cohort\n      ON (login_start_raw.user_id = cohort.user_id)\n  )\n\nSELECT DISTINCT \n  ls.*,\n  bnc.pack_name,\n  ew.Date_Added,\n  ew.group\nFROM login_start ls \nLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_build_number_classification` bnc ON  CAST(ls.build_number AS INT64) = CAST(bnc.build_number AS INT64) AND ls.app_version = bnc.app_version\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew ON ls.email = ew.email",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_day0_version.sql",
            "original_file_path": "models/marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_day0_version.sql",
            "name": "int_sipher_odyssey_player_day0_version",
            "alias": "int_sipher_odyssey_player_day0_version",
            "checksum": {
                "name": "sha256",
                "checksum": "a2ac9a2fdb4564fcd752e649392d0a67c4c57f9d02e398aaa5f40b373ba10f57"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__sipher_odyssey_events_all_time"
                ],
                [
                    "stg_firebase__sipher_odyssey_events_all_time"
                ],
                [
                    "stg_aws__ather_id__raw_cognito"
                ],
                [
                    "stg_firebase__sipher_odyssey_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_day0_version.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_core",
                "materialized": "table",
                "partition_by": {
                    "field": "day0_date_tzutc",
                    "data_type": "DATE"
                },
                "cluster_by": [
                    "user_id"
                ]
            },
            "created_at": 1705293861.8449733,
            "compiled_code": "WITH\n  cohort_date AS \n  (\n    SELECT\n      DISTINCT\n      user_id,\n      user_pseudo_id,\n      MIN(event_timestamp) AS first_open_timestamp,\n      EXTRACT(DATE FROM TIMESTAMP_MICROS (MIN(event_timestamp) )) AS day0_date_tzutc\n    FROM\n      `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`\n    WHERE event_name IN ('login_start')\n    GROUP BY 1,2\n  )\n\n  ,data_login AS (\n    SELECT\n      DISTINCT\n      (SELECT up.value.string_value FROM UNNEST(user_properties) AS up WHERE up.key = \"ather_id\") AS ather_id,\n      (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"build_number\") AS build_number,\n      user_id,\n      user_pseudo_id,\n\n    FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`\n    WHERE event_name IN ('login_start')\n  )\n\n  ,user_email AS\n  (\n    SELECT\n      *\n    FROM `sipher-data-testing`.`raw_aws_atherlabs`.`stg_aws__ather_id__raw_cognito`\n\n  )\n\n  ,email_last_updated AS \n  (\n    SELECT\n      user_id AS ather_id,\n      MAX(user_last_modified_date) AS timestamp_date\n    FROM user_email\n    GROUP BY 1\n  )\n\n  ,email_unique AS \n  (\n    SELECT\n      DISTINCT\n      elu.*,\n      CASE\n          WHEN ue.email LIKE '%sipher.xyz%' THEN REPLACE(ue.email, 'sipher.xyz', 'atherlabs.com')\n          ELSE ue.email\n      END AS email\n      ,ue.name AS user_name\n    FROM email_last_updated AS elu\n    LEFT JOIN user_email AS ue \n        ON elu.ather_id = ue.user_id\n        AND elu.timestamp_date = ue.user_last_modified_date\n  )\n\n    ,join_data AS \n    (\n    SELECT\n      cd.first_open_timestamp,\n      cd.day0_date_tzutc,\n      lg.*,\n      SUBSTR(lg.user_id, 1, 3) AS prefix_user_id,\n      SUBSTR(lg.user_id, 4) AS suffix_user_id,\n      du.user_name AS user_name,\n      du.email AS email\n    FROM  data_login AS lg\n    LEFT JOIN email_unique AS du ON lg.ather_id = du.ather_id\n    LEFT JOIN cohort_date AS cd ON lg.user_pseudo_id = cd.user_pseudo_id AND lg.user_id = cd.user_id\n  )\n\n    ,pre_final AS(\n    SELECT\n        user_id,\n        ather_id,\n        MIN(day0_date_tzutc) AS day0_date_tzutc,\n        email,\n        SPLIT(email, '@')[OFFSET(0)] AS prefix_email,\n        SPLIT(email, '@')[OFFSET(1)] AS suffix_email,\n        user_name,\n        prefix_user_id,\n        CAST(suffix_user_id AS INT64) AS suffix_user_id,\n        MIN(build_number) AS first_build_number,\n        MAX(build_number) AS last_build_number,\n        MIN(first_open_timestamp) AS first_open_timestamp,\n    FROM join_data\n    WHERE\n        user_id IS NOT NULL\n    GROUP BY user_id, ather_id, email, prefix_user_id,suffix_user_id, user_name\n    )\n\n    ,company_list AS(\n    SELECT \n        *\n    FROM pre_final\n    WHERE\n        (prefix_email LIKE 'thuy.dang%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'anh.phan%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'tan.vo%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'tester%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'dunghoang%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'duong.cao%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'van.truong%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'thang.nguyenduy%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'dong.nguyenha%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'tai.pham%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'thanh.khuong%' AND suffix_email IN ('atherlabs.com')) OR\n        (prefix_email LIKE 'huy.vu%' AND suffix_email IN ('atherlabs.com'))\n    )\n    \n    ,final AS(\n    SELECT \n        *\n    FROM pre_final\n    WHERE (suffix_user_id BETWEEN 35163 AND 35175\n      OR suffix_user_id > 35192)\n      AND ather_id IS NOT NULL \n      AND user_id NOT IN ( SELECT DISTINCT user_id FROM company_list)\n    )\n\n    , user_first_open_data AS(\n      SELECT final.*\n      FROM final\n          LEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_cheating_users` b using(user_id)\n      WHERE b.user_id IS NULL\n    )\n\n    , login_start_raw AS(\n    SELECT DISTINCT \n      user_id,\n      event_name,\n      (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"build_number\") AS build_number,\n      app_info.version AS app_version,\n      MIN (event_timestamp) AS current_build_timestamp\n    FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`\n    WHERE event_name = 'login_start'\n    GROUP BY user_id, event_name, build_number, app_version\n    )\n\n    , login_start AS\n    (\n    SELECT DISTINCT \n      login_start_raw.user_id\n      ,ather_id\n      ,cohort.day0_date_tzutc AS day0_date_tzutc\n      ,build_number\n      ,app_version\n      ,email\n      ,user_name\n      ,current_build_timestamp\n      ,LEAD(current_build_timestamp,1) OVER (PARTITION BY login_start_raw.user_id ORDER BY current_build_timestamp) AS next_build_timestamp\n    FROM login_start_raw\n    JOIN user_first_open_data cohort\n      ON (login_start_raw.user_id = cohort.user_id)\n  )\n\nSELECT DISTINCT \n  ls.*,\n  bnc.pack_name,\n  ew.Date_Added,\n  ew.group\nFROM login_start ls \nLEFT JOIN `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_build_number_classification` bnc ON  CAST(ls.build_number AS INT64) = CAST(bnc.build_number AS INT64) AND ls.app_version = bnc.app_version\nLEFT JOIN  `sipher-data-platform.sipher_odyssey_core.dim_sipher_odyssey_closed_alpha_whitelist_email` ew ON ls.email = ew.email",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_day0_version`"
        },
        "model.dbt_sipher.int_sipher_odyssey_player_country": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_user_properties"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_core",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "device_sk",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_core",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_core",
                "intermediate",
                "int_sipher_odyssey_player_country"
            ],
            "unique_id": "model.dbt_sipher.int_sipher_odyssey_player_country",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='device_sk'\n) -}}\n\nWITH raw AS (\n  SELECT\n    *,\n    {{ get_string_value_from_user_properties(key=\"ather_id\") }} AS ather_id,\n  FROM {{ ref('stg_firebase__sipher_odyssey_events_all_time') }}\n)\n,\ngeo AS (\n  SELECT \n    \n  FROM raw\n)",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_country.sql",
            "original_file_path": "models/marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_country.sql",
            "name": "int_sipher_odyssey_player_country",
            "alias": "int_sipher_odyssey_player_country",
            "checksum": {
                "name": "sha256",
                "checksum": "480443a618b0923c723cbbf527d59830af52945965dd3395dbbeb7d744091e57"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__sipher_odyssey_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_country.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_core",
                "materialized": "incremental",
                "unique_key": "device_sk"
            },
            "created_at": 1705293861.85098,
            "compiled_code": "WITH raw AS (\n  SELECT\n    *,\n    (SELECT up.value.string_value FROM UNNEST(user_properties) AS up WHERE up.key = \"ather_id\") AS ather_id,\n  FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`\n)\n,\ngeo AS (\n  SELECT \n    \n  FROM raw\n)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_country`"
        },
        "model.dbt_sipher.int_sipher_odyssey_player_devices": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_string_value_from_user_properties",
                    "macro.dbt_sipher.clean_advertising_id",
                    "macro.dbt_utils.generate_surrogate_key",
                    "macro.dbt.is_incremental",
                    "macro.dbt_sipher.load_metadata"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
                    "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_core",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "device_sk",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "advertising_ids",
                    "vendor_ids",
                    "user_pseudo_ids",
                    "last_used_at",
                    "operating_system_version",
                    "browser",
                    "browser_version",
                    "web_info_browser",
                    "web_info_browser_version",
                    "web_info_hostname"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_core",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_core",
                "intermediate",
                "int_sipher_odyssey_player_devices"
            ],
            "unique_id": "model.dbt_sipher.int_sipher_odyssey_player_devices",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='device_sk',\n  merge_update_columns = [\n    'advertising_ids',\n    'vendor_ids',\n    'user_pseudo_ids',\n    'last_used_at',\n    'operating_system_version',\n    'browser',\n    'browser_version',\n    'web_info_browser',\n    'web_info_browser_version',\n    'web_info_hostname'\n  ],\n) -}}\n\nWITH raw AS (\n  SELECT\n    *,\n    {{ get_string_value_from_user_properties(key=\"ather_id\") }} AS ather_id,\n    {{ clean_advertising_id() }} AS cleaned_advertising_id\n  FROM {{ ref('stg_firebase__sipher_odyssey_events_all_time') }}\n)\n\n,device_properties AS (\n  SELECT\n    cleaned_advertising_id AS advertising_id,\n    device.vendor_id,\n    user_pseudo_id,\n    {{ dbt_utils.generate_surrogate_key([\n      'device.category',\n      'device.mobile_model_name',\n      'device.mobile_marketing_name',\n      'device.mobile_os_hardware_model',\n      'device.operating_system'\n    ]) }} AS _device_model_key,\n    MAX(TIMESTAMP_MICROS(event_timestamp)) AS last_used_at,\n    MAX(device.mobile_brand_name) AS mobile_brand_name,\n    MAX(device.category) AS category,\n    MAX(device.mobile_model_name) AS mobile_model_name,\n    MAX(device.mobile_marketing_name) AS mobile_marketing_name,\n    MAX(device.mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(device.operating_system) AS operating_system,\n    MAX(device.operating_system_version) AS operating_system_version,\n    MAX(device.browser) AS browser,\n    MAX(device.browser_version) AS browser_version,\n    MAX(device.web_info.browser) AS web_info_browser,\n    MAX(device.web_info.browser_version) AS web_info_browser_version,\n    MAX(device.web_info.hostname) AS web_info_hostname,\n  FROM raw\n  GROUP BY advertising_id, vendor_id, user_pseudo_id, _device_model_key\n)\n\n,map_device_to_game_user_id AS (\n  SELECT\n    user_id AS game_user_id,\n    ather_id,\n    ARRAY_AGG(DISTINCT user_pseudo_id) AS user_pseudo_ids,\n  FROM raw\n  WHERE user_id IS NOT NULL\n  GROUP BY game_user_id, ather_id\n)\n\n,final AS (\n  SELECT\n    {{ dbt_utils.generate_surrogate_key([\n      'game_user_id',\n      'ather_id',\n      '_device_model_key'\n    ]) }} AS device_sk,\n    game_user_id,\n    ather_id,\n    _device_model_key,\n    ARRAY_AGG(DISTINCT advertising_id IGNORE NULLS) AS advertising_ids,\n    ARRAY_AGG(DISTINCT vendor_id IGNORE NULLS) AS vendor_ids,\n    ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n    MAX(last_used_at) AS last_used_at,\n    MAX(category) AS category,\n    MAX(mobile_brand_name) AS mobile_brand_name,\n    MAX(mobile_model_name) AS mobile_model_name,\n    MAX(mobile_marketing_name) AS mobile_marketing_name,\n    MAX(mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(operating_system) AS operating_system,\n    MAX(operating_system_version) AS operating_system_version,\n    MAX(browser) AS browser,\n    MAX(browser_version) AS browser_version,\n    MAX(web_info_browser) AS web_info_browser,\n    MAX(web_info_browser_version) AS web_info_browser_version,\n    MAX(web_info_hostname) AS web_info_hostname\n  FROM map_device_to_game_user_id, UNNEST(user_pseudo_ids) AS user_pseudo_id_map\n  LEFT JOIN device_properties ON device_properties.user_pseudo_id = user_pseudo_id_map\n  GROUP BY game_user_id, ather_id, _device_model_key\n)\n\n\n{% if is_incremental() -%}\n,current_ids_and_new_ids AS (\n  SELECT\n    device_sk,\n    advertising_id,\n    vendor_id,\n    user_pseudo_id\n  FROM {{ this }}\n  LEFT JOIN UNNEST(advertising_ids) AS advertising_id\n  LEFT JOIN UNNEST(vendor_ids) AS vendor_id\n  LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n\n  UNION DISTINCT\n\n  SELECT\n    device_sk,\n    advertising_id,\n    vendor_id,\n    user_pseudo_id\n  FROM final\n  LEFT JOIN UNNEST(advertising_ids) AS advertising_id\n  LEFT JOIN UNNEST(vendor_ids) AS vendor_id\n  LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n)\n\n,combined_id AS (\n  SELECT\n    device_sk,\n    ARRAY_AGG(DISTINCT advertising_id IGNORE NULLS) AS advertising_ids,\n    ARRAY_AGG(DISTINCT vendor_id IGNORE NULLS) AS vendor_ids,\n    ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n  FROM current_ids_and_new_ids\n  GROUP BY device_sk\n)\n\nSELECT\n  final.*\n  EXCEPT(_device_model_key)\n  REPLACE (\n    combined_id.advertising_ids AS advertising_ids,\n    combined_id.vendor_ids AS vendor_ids,\n    combined_id.user_pseudo_ids AS user_pseudo_ids\n  ),\n  {{ load_metadata(sources=[ref('stg_firebase__sipher_odyssey_events_all_time')]) }} AS load_metadata\nFROM final\nLEFT JOIN combined_id USING(device_sk)\n\n{%- else -%}\n\nSELECT\n  * EXCEPT(_device_model_key),\n  {{ load_metadata(sources=[ref('stg_firebase__sipher_odyssey_events_all_time')]) }} AS load_metadata\nFROM final\n\n{%- endif -%}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_devices.sql",
            "original_file_path": "models/marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_devices.sql",
            "name": "int_sipher_odyssey_player_devices",
            "alias": "int_sipher_odyssey_player_devices",
            "checksum": {
                "name": "sha256",
                "checksum": "2a24bd80530ea6d0f58ad96f17cb7ced66fa90f393d1178d4c71110e85149d90"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__sipher_odyssey_events_all_time"
                ],
                [
                    "stg_firebase__sipher_odyssey_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_core/intermediate/int_sipher_odyssey_player_devices.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_core",
                "materialized": "incremental",
                "unique_key": "device_sk",
                "merge_update_columns": [
                    "advertising_ids",
                    "vendor_ids",
                    "user_pseudo_ids",
                    "last_used_at",
                    "operating_system_version",
                    "browser",
                    "browser_version",
                    "web_info_browser",
                    "web_info_browser_version",
                    "web_info_hostname"
                ]
            },
            "created_at": 1705293861.85473,
            "compiled_code": "WITH raw AS (\n  SELECT\n    *,\n    (SELECT up.value.string_value FROM UNNEST(user_properties) AS up WHERE up.key = \"ather_id\") AS ather_id,\n    CASE WHEN device.advertising_id IN ('', '00000000-0000-0000-0000-000000000000') THEN NULL ELSE device.advertising_id END AS cleaned_advertising_id\n  FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`\n)\n\n,device_properties AS (\n  SELECT\n    cleaned_advertising_id AS advertising_id,\n    device.vendor_id,\n    user_pseudo_id,\n    to_hex(md5(cast(coalesce(cast(device.category as STRING), '') || '-' || coalesce(cast(device.mobile_model_name as STRING), '') || '-' || coalesce(cast(device.mobile_marketing_name as STRING), '') || '-' || coalesce(cast(device.mobile_os_hardware_model as STRING), '') || '-' || coalesce(cast(device.operating_system as STRING), '') as STRING))) AS _device_model_key,\n    MAX(TIMESTAMP_MICROS(event_timestamp)) AS last_used_at,\n    MAX(device.mobile_brand_name) AS mobile_brand_name,\n    MAX(device.category) AS category,\n    MAX(device.mobile_model_name) AS mobile_model_name,\n    MAX(device.mobile_marketing_name) AS mobile_marketing_name,\n    MAX(device.mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(device.operating_system) AS operating_system,\n    MAX(device.operating_system_version) AS operating_system_version,\n    MAX(device.browser) AS browser,\n    MAX(device.browser_version) AS browser_version,\n    MAX(device.web_info.browser) AS web_info_browser,\n    MAX(device.web_info.browser_version) AS web_info_browser_version,\n    MAX(device.web_info.hostname) AS web_info_hostname,\n  FROM raw\n  GROUP BY advertising_id, vendor_id, user_pseudo_id, _device_model_key\n)\n\n,map_device_to_game_user_id AS (\n  SELECT\n    user_id AS game_user_id,\n    ather_id,\n    ARRAY_AGG(DISTINCT user_pseudo_id) AS user_pseudo_ids,\n  FROM raw\n  WHERE user_id IS NOT NULL\n  GROUP BY game_user_id, ather_id\n)\n\n,final AS (\n  SELECT\n    to_hex(md5(cast(coalesce(cast(game_user_id as STRING), '') || '-' || coalesce(cast(ather_id as STRING), '') || '-' || coalesce(cast(_device_model_key as STRING), '') as STRING))) AS device_sk,\n    game_user_id,\n    ather_id,\n    _device_model_key,\n    ARRAY_AGG(DISTINCT advertising_id IGNORE NULLS) AS advertising_ids,\n    ARRAY_AGG(DISTINCT vendor_id IGNORE NULLS) AS vendor_ids,\n    ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n    MAX(last_used_at) AS last_used_at,\n    MAX(category) AS category,\n    MAX(mobile_brand_name) AS mobile_brand_name,\n    MAX(mobile_model_name) AS mobile_model_name,\n    MAX(mobile_marketing_name) AS mobile_marketing_name,\n    MAX(mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(operating_system) AS operating_system,\n    MAX(operating_system_version) AS operating_system_version,\n    MAX(browser) AS browser,\n    MAX(browser_version) AS browser_version,\n    MAX(web_info_browser) AS web_info_browser,\n    MAX(web_info_browser_version) AS web_info_browser_version,\n    MAX(web_info_hostname) AS web_info_hostname\n  FROM map_device_to_game_user_id, UNNEST(user_pseudo_ids) AS user_pseudo_id_map\n  LEFT JOIN device_properties ON device_properties.user_pseudo_id = user_pseudo_id_map\n  GROUP BY game_user_id, ather_id, _device_model_key\n)\n\n\n,current_ids_and_new_ids AS (\n  SELECT\n    device_sk,\n    advertising_id,\n    vendor_id,\n    user_pseudo_id\n  FROM `sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_devices`\n  LEFT JOIN UNNEST(advertising_ids) AS advertising_id\n  LEFT JOIN UNNEST(vendor_ids) AS vendor_id\n  LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n\n  UNION DISTINCT\n\n  SELECT\n    device_sk,\n    advertising_id,\n    vendor_id,\n    user_pseudo_id\n  FROM final\n  LEFT JOIN UNNEST(advertising_ids) AS advertising_id\n  LEFT JOIN UNNEST(vendor_ids) AS vendor_id\n  LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n)\n\n,combined_id AS (\n  SELECT\n    device_sk,\n    ARRAY_AGG(DISTINCT advertising_id IGNORE NULLS) AS advertising_ids,\n    ARRAY_AGG(DISTINCT vendor_id IGNORE NULLS) AS vendor_ids,\n    ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n  FROM current_ids_and_new_ids\n  GROUP BY device_sk\n)\n\nSELECT\n  final.*\n  EXCEPT(_device_model_key)\n  REPLACE (\n    combined_id.advertising_ids AS advertising_ids,\n    combined_id.vendor_ids AS vendor_ids,\n    combined_id.user_pseudo_ids AS user_pseudo_ids\n  ),\n  ARRAY[STRUCT(\n      CURRENT_TIMESTAMP() AS data_load_timestamp,\n      \"`sipher-data-testing`.`staging_firebase`.`stg_firebase__sipher_odyssey_events_all_time`\" AS data_sources\n    )] AS load_metadata\nFROM final\nLEFT JOIN combined_id USING(device_sk)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_core`.`int_sipher_odyssey_player_devices`"
        },
        "model.dbt_sipher.fct_sipher_staking_claimed_rewards": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staking_public_data",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "act_date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staking_public_data",
            "fqn": [
                "dbt_sipher",
                "marts",
                "staking_pool",
                "fct_sipher_staking_claimed_rewards"
            ],
            "unique_id": "model.dbt_sipher.fct_sipher_staking_claimed_rewards",
            "raw_code": "{{- config(\n    materialized='table',\n    partition='act_date'\n)-}}\n\nWITH claimed_tx_hash AS(\n    SELECT\n        DISTINCT transaction_hash\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n    WHERE DATE(block_timestamp) = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n    AND ( \n        LOWER(from_address) = '{{ var(\"escrowed_sipher_address\")}}'\n        OR LOWER(to_address) = '{{ var(\"escrowed_sipher_address\")}}'\n        OR LOWER(token_address) = '{{ var(\"escrowed_sipher_address\")}}' #claimed\n        )\n    )\n\n,filtered_claimed_tx AS(\n    SELECT\n        DATE(block_timestamp) AS act_date,\n        token_address,\n        CASE\n                WHEN LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\")}}' THEN 'SIPHER Token'\n                WHEN LOWER(token_address) = '{{ var(\"escrowed_sipher_address\")}}' THEN 'Escrowed SIPHER Token'\n                ELSE 'N/A'\n            END AS token_name,\n        CAST(value AS NUMERIC) AS sipher_value,\n        * EXCEPT(value, token_address)\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers`\n    WHERE transaction_hash IN (SELECT * FROM claimed_tx_hash)\n)\n\nSELECT * FROM filtered_claimed_tx",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/staking_pool/fct_sipher_staking_claimed_rewards.sql",
            "original_file_path": "models/marts/staking_pool/fct_sipher_staking_claimed_rewards.sql",
            "name": "fct_sipher_staking_claimed_rewards",
            "alias": "fct_sipher_staking_claimed_rewards",
            "checksum": {
                "name": "sha256",
                "checksum": "4db41df93da3ab2a3c846d5d22bd4c990ae52797aac808df9a54ed3a587fddea"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/staking_pool/fct_sipher_staking_claimed_rewards.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staking_public_data",
                "materialized": "table",
                "partition": "act_date"
            },
            "created_at": 1705293861.8622162,
            "compiled_code": "WITH claimed_tx_hash AS(\n    SELECT\n        DISTINCT transaction_hash\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n    WHERE DATE(block_timestamp) = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n    AND ( \n        LOWER(from_address) = '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9'\n        OR LOWER(to_address) = '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9'\n        OR LOWER(token_address) = '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9' #claimed\n        )\n    )\n\n,filtered_claimed_tx AS(\n    SELECT\n        DATE(block_timestamp) AS act_date,\n        token_address,\n        CASE\n                WHEN LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN 'SIPHER Token'\n                WHEN LOWER(token_address) = '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9' THEN 'Escrowed SIPHER Token'\n                ELSE 'N/A'\n            END AS token_name,\n        CAST(value AS NUMERIC) AS sipher_value,\n        * EXCEPT(value, token_address)\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers`\n    WHERE transaction_hash IN (SELECT * FROM claimed_tx_hash)\n)\n\nSELECT * FROM filtered_claimed_tx",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staking_public_data`.`fct_sipher_staking_claimed_rewards`"
        },
        "model.dbt_sipher.agg_staking_pool_transaction": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.fct_staking_pool_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staking_public_data",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "act_date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staking_public_data",
            "fqn": [
                "dbt_sipher",
                "marts",
                "staking_pool",
                "agg_staking_pool_transaction"
            ],
            "unique_id": "model.dbt_sipher.agg_staking_pool_transaction",
            "raw_code": "{{- config(\n    materialized='table',\n    partition='act_date'\n)-}}\n\n  SELECT\n    tx_type,\n    token_type,\n    pool_type,\n    transaction_hash,\n    from_address,\n    to_address,\n    hash_count,\n    DATE(block_timestamp) AS act_date,\n    SUM(CAST(value AS FLOAT64)*POWER(10,-18)) AS staked_value,\n  FROM {{ ref('fct_staking_pool_transaction')}}\n  GROUP BY 1,2,3,4,5,6,7,8",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/staking_pool/agg_staking_pool_transaction.sql",
            "original_file_path": "models/marts/staking_pool/agg_staking_pool_transaction.sql",
            "name": "agg_staking_pool_transaction",
            "alias": "agg_staking_pool_transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "11c088c73ca50a4b2b4f7294ac782cf2f647d9e28831e348020a37d723a3c21e"
            },
            "tags": [],
            "refs": [
                [
                    "fct_staking_pool_transaction"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/staking_pool/agg_staking_pool_transaction.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staking_public_data",
                "materialized": "table",
                "partition": "act_date"
            },
            "created_at": 1705293861.8661163,
            "compiled_code": "SELECT\n    tx_type,\n    token_type,\n    pool_type,\n    transaction_hash,\n    from_address,\n    to_address,\n    hash_count,\n    DATE(block_timestamp) AS act_date,\n    SUM(CAST(value AS FLOAT64)*POWER(10,-18)) AS staked_value,\n  FROM `sipher-data-testing`.`staking_public_data`.`fct_staking_pool_transaction`\n  GROUP BY 1,2,3,4,5,6,7,8",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staking_public_data`.`agg_staking_pool_transaction`"
        },
        "model.dbt_sipher.fct_staking_pool_transaction": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today",
                    "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staking_public_data",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staking_public_data",
            "fqn": [
                "dbt_sipher",
                "marts",
                "staking_pool",
                "fct_staking_pool_transaction"
            ],
            "unique_id": "model.dbt_sipher.fct_staking_pool_transaction",
            "raw_code": "{{- config(\n    materialized='incremental',\n)-}}\n\nWITH\n    data_token AS \n    (\n        SELECT \n            *\n        FROM {{ ref('stg_bq_public_ethereum__token_transfer_today')}}\n        UNION ALL \n        SELECT \n            *\n        FROM {{ ref('stg_bq_public_ethereum__token_transfer_last_15d')}}\n    )\n\n    ,data_single_side_deposit AS \n    (SELECT\n      *,\n      'deposit' AS tx_type,\n      '$Sipher' AS token_type,\n      'single_side' AS pool_type\n    FROM data_token\n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}'\n      AND LOWER(to_address) = '{{ var(\"staked_sipher_pool_address\")}}')\n      OR\n      (LOWER(from_address) = '{{ var(\"dummy_wallet_address\")}}'\n      AND LOWER(token_address) = '{{ var(\"staked_sipher_pool_address\")}}'))\n    )\n\n  ,data_single_side_withdraw AS \n    (SELECT\n      *,\n      'withdraw' AS tx_type,\n      '$Sipher' AS token_type,\n      'single_side' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}'\n      AND LOWER(from_address) = '{{ var(\"staked_sipher_pool_address\")}}')\n      OR\n      (LOWER(to_address) = '{{ var(\"dummy_wallet_address\")}}'\n      AND LOWER(token_address) = '{{ var(\"staked_sipher_pool_address\")}}'))\n    AND LOWER(to_address) != '{{ var(\"escrowed_sipher_address\")}}'\n    )\n\n  ,data_single_side_claim_rewards AS \n    (SELECT\n      *,\n      'rewards' AS tx_type,\n      '$Sipher' AS token_type,\n      'single_side' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}'\n      AND LOWER(from_address) = '{{ var(\"staked_sipher_pool_address\")}}'\n      AND LOWER(to_address) = '{{ var(\"escrowed_sipher_address\")}}')\n      OR\n      (LOWER(from_address) = '{{ var(\"dummy_wallet_address\")}}'\n      AND LOWER(token_address) = '{{ var(\"escrowed_sipher_address\")}}'))\n    )\n\n  ,data_ls_uniswap_deposit AS \n    (SELECT\n      *,\n      'deposit' AS tx_type,\n      CASE\n        WHEN token_address = '{{ var(\"sipher_token_wallet_address\") }}' THEN '$Sipher'\n        WHEN token_address = '{{ var(\"wrapped_ether_address\")}}' THEN 'WETH-Uni'\n      END AS token_type,\n      'uniswap' AS pool_type,\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}'\n      AND LOWER(to_address) = '{{ var(\"uniswap_v2_sipher_address\")}}')\n      OR\n      (LOWER(from_address) = '{{ var(\"uniswap_v2_sipher_address\")}}'\n      AND LOWER(token_address) = '{{ var(\"wrapped_ether_address\")}}'))\n    )\n\n  ,data_ls_uniswap_withdraw AS \n    (SELECT\n      *,\n      'withdraw' AS tx_type,\n      CASE\n        WHEN token_address = '{{ var(\"sipher_token_wallet_address\") }}' THEN '$Sipher'\n        WHEN token_address = '{{ var(\"wrapped_ether_address\")}}' THEN 'WETH-Uni'\n      END AS token_type,\n      'uniswap' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}')\n      AND LOWER(from_address) = '{{ var(\"uniswap_v2_sipher_address\")}}')\n      OR\n      (LOWER(to_address) = '{{ var(\"uniswap_v2_sipher_address\")}}'\n      AND LOWER(token_address) = '{{ var(\"wrapped_ether_address\")}}')\n    )\n\n  ,data_ls_kyberswap_deposit AS \n    (SELECT\n      *,\n      'deposit' AS tx_type,\n      CASE\n        WHEN token_address = '{{ var(\"sipher_token_wallet_address\") }}' THEN '$Sipher'\n        WHEN token_address = '{{ var(\"wrapped_ether_address\")}}' THEN 'WETH-Uni'\n      END AS token_type,\n      'kyberswap' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}'\n      AND LOWER(to_address) = '{{ var(\"kyberswap_DMM_LP_sipher_address\")}}')\n      OR\n      (LOWER(from_address) = '{{ var(\"kyberswap_DMM_LP_sipher_address\")}}'\n      AND LOWER(token_address) = '{{ var(\"wrapped_ether_address\")}}'))\n    )\n\n  ,data_ls_kyberswap_withdraw AS \n    (SELECT\n      *,\n      'withdraw' AS tx_type,\n      CASE\n        WHEN token_address = '{{ var(\"sipher_token_wallet_address\") }}' THEN '$Sipher'\n        WHEN token_address = '{{ var(\"wrapped_ether_address\")}}' THEN 'WETH-Uni'\n      END AS token_type,\n      'kyberswap' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\") }}'\n      AND LOWER(from_address) = '{{ var(\"kyberswap_DMM_LP_sipher_address\")}}')\n      OR\n      (LOWER(to_address) = '{{ var(\"kyberswap_DMM_LP_sipher_address\")}}'\n      AND LOWER(token_address) = '{{ var(\"wrapped_ether_address\")}}'))\n    )\n\n  , all_data AS(\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_single_side_deposit\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_single_side_withdraw\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_single_side_claim_rewards\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_uniswap_deposit\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_uniswap_withdraw\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_kyberswap_deposit\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_kyberswap_withdraw\n    )\n\nSELECT \n*\nFROM all_data",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/staking_pool/fct_staking_pool_transaction.sql",
            "original_file_path": "models/marts/staking_pool/fct_staking_pool_transaction.sql",
            "name": "fct_staking_pool_transaction",
            "alias": "fct_staking_pool_transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "40ab4e5a37b46a83b7ccbfeacf36faa4ea9c29d09fc0f1cd171da95b65fa674d"
            },
            "tags": [],
            "refs": [
                [
                    "stg_bq_public_ethereum__token_transfer_today"
                ],
                [
                    "stg_bq_public_ethereum__token_transfer_last_15d"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/staking_pool/fct_staking_pool_transaction.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staking_public_data",
                "materialized": "incremental"
            },
            "created_at": 1705293861.9256063,
            "compiled_code": "WITH\n    data_token AS \n    (\n        SELECT \n            *\n        FROM `sipher-data-testing`.`sipher_ethereum`.`stg_bq_public_ethereum__token_transfer_today`\n        UNION ALL \n        SELECT \n            *\n        FROM `sipher-data-testing`.`sipher_ethereum`.`stg_bq_public_ethereum__token_transfer_last_15d`\n    )\n\n    ,data_single_side_deposit AS \n    (SELECT\n      *,\n      'deposit' AS tx_type,\n      '$Sipher' AS token_type,\n      'single_side' AS pool_type\n    FROM data_token\n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511'\n      AND LOWER(to_address) = '0x7ee4b5dbc4b97c30a08791ce8601e695735960db')\n      OR\n      (LOWER(from_address) = '0x0000000000000000000000000000000000000000'\n      AND LOWER(token_address) = '0x7ee4b5dbc4b97c30a08791ce8601e695735960db'))\n    )\n\n  ,data_single_side_withdraw AS \n    (SELECT\n      *,\n      'withdraw' AS tx_type,\n      '$Sipher' AS token_type,\n      'single_side' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511'\n      AND LOWER(from_address) = '0x7ee4b5dbc4b97c30a08791ce8601e695735960db')\n      OR\n      (LOWER(to_address) = '0x0000000000000000000000000000000000000000'\n      AND LOWER(token_address) = '0x7ee4b5dbc4b97c30a08791ce8601e695735960db'))\n    AND LOWER(to_address) != '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9'\n    )\n\n  ,data_single_side_claim_rewards AS \n    (SELECT\n      *,\n      'rewards' AS tx_type,\n      '$Sipher' AS token_type,\n      'single_side' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511'\n      AND LOWER(from_address) = '0x7ee4b5dbc4b97c30a08791ce8601e695735960db'\n      AND LOWER(to_address) = '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9')\n      OR\n      (LOWER(from_address) = '0x0000000000000000000000000000000000000000'\n      AND LOWER(token_address) = '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9'))\n    )\n\n  ,data_ls_uniswap_deposit AS \n    (SELECT\n      *,\n      'deposit' AS tx_type,\n      CASE\n        WHEN token_address = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN '$Sipher'\n        WHEN token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' THEN 'WETH-Uni'\n      END AS token_type,\n      'uniswap' AS pool_type,\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511'\n      AND LOWER(to_address) = '0xf3fdcfbfdb96315fc628854627bdd5e363b3ade4')\n      OR\n      (LOWER(from_address) = '0xf3fdcfbfdb96315fc628854627bdd5e363b3ade4'\n      AND LOWER(token_address) = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'))\n    )\n\n  ,data_ls_uniswap_withdraw AS \n    (SELECT\n      *,\n      'withdraw' AS tx_type,\n      CASE\n        WHEN token_address = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN '$Sipher'\n        WHEN token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' THEN 'WETH-Uni'\n      END AS token_type,\n      'uniswap' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511')\n      AND LOWER(from_address) = '0xf3fdcfbfdb96315fc628854627bdd5e363b3ade4')\n      OR\n      (LOWER(to_address) = '0xf3fdcfbfdb96315fc628854627bdd5e363b3ade4'\n      AND LOWER(token_address) = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2')\n    )\n\n  ,data_ls_kyberswap_deposit AS \n    (SELECT\n      *,\n      'deposit' AS tx_type,\n      CASE\n        WHEN token_address = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN '$Sipher'\n        WHEN token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' THEN 'WETH-Uni'\n      END AS token_type,\n      'kyberswap' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511'\n      AND LOWER(to_address) = '0x9a56f30ff04884cb06da80cb3aef09c6132f5e77')\n      OR\n      (LOWER(from_address) = '0x9a56f30ff04884cb06da80cb3aef09c6132f5e77'\n      AND LOWER(token_address) = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'))\n    )\n\n  ,data_ls_kyberswap_withdraw AS \n    (SELECT\n      *,\n      'withdraw' AS tx_type,\n      CASE\n        WHEN token_address = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN '$Sipher'\n        WHEN token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' THEN 'WETH-Uni'\n      END AS token_type,\n      'kyberswap' AS pool_type\n    FROM data_token \n    WHERE  \n      DATE(block_timestamp) BETWEEN CURRENT_DATE()-2 AND CURRENT_DATE() \n    AND\n      ((LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511'\n      AND LOWER(from_address) = '0x9a56f30ff04884cb06da80cb3aef09c6132f5e77')\n      OR\n      (LOWER(to_address) = '0x9a56f30ff04884cb06da80cb3aef09c6132f5e77'\n      AND LOWER(token_address) = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'))\n    )\n\n  , all_data AS(\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_single_side_deposit\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_single_side_withdraw\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_single_side_claim_rewards\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_uniswap_deposit\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_uniswap_withdraw\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_kyberswap_deposit\n    UNION ALL\n    SELECT \n      *,\n      RANK() OVER (PARTITION BY transaction_hash ORDER BY log_index) AS hash_count\n    FROM data_ls_kyberswap_withdraw\n    )\n\nSELECT \n*\nFROM all_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staking_public_data`.`fct_staking_pool_transaction`"
        },
        "model.dbt_sipher.fct_sipher_staking_distributed": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "staking_public_data",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "act_date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "staking_public_data",
            "fqn": [
                "dbt_sipher",
                "marts",
                "staking_pool",
                "fct_sipher_staking_distributed"
            ],
            "unique_id": "model.dbt_sipher.fct_sipher_staking_distributed",
            "raw_code": "{{- config(\n    materialized='table',\n    partition='act_date'\n)-}}\n\nWITH distributed_tx_hash AS(\n   SELECT  \n    DISTINCT transaction_hash\n   FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n   WHERE DATE(block_timestamp) = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n      AND ( \n         LOWER(from_address) = '{{ var(\"sipher_staking_manager\")}}'\n         OR LOWER(to_address) = '{{ var(\"sipher_staking_manager\")}}'\n        )\n   )\n\n   ,filtered_distributed_tx AS(\n      SELECT\n         DATE(block_timestamp) AS act_date,\n         token_address,\n         CASE\n                  WHEN LOWER(token_address) = '{{ var(\"sipher_token_wallet_address\")}}' THEN 'SIPHER Token'\n                  WHEN LOWER(token_address) = '{{ var(\"escrowed_sipher_address\")}}' THEN 'Escrowed SIPHER Token'\n                  ELSE 'N/A'\n            END AS token_name,\n          CAST(value AS NUMERIC) AS sipher_value,\n         * EXCEPT(value, token_address)\n      FROM `bigquery-public-data.crypto_ethereum.token_transfers`\n      WHERE transaction_hash IN (SELECT * FROM distributed_tx_hash)\n   )\n\n   SELECT * FROM filtered_distributed_tx",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/staking_pool/fct_sipher_staking_distributed.sql",
            "original_file_path": "models/marts/staking_pool/fct_sipher_staking_distributed.sql",
            "name": "fct_sipher_staking_distributed",
            "alias": "fct_sipher_staking_distributed",
            "checksum": {
                "name": "sha256",
                "checksum": "dd52c09bce9aebcdd961abfdd2c41741ef8b264046df731462f8614ab27e80b1"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/staking_pool/fct_sipher_staking_distributed.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "staking_public_data",
                "materialized": "table",
                "partition": "act_date"
            },
            "created_at": 1705293861.9329994,
            "compiled_code": "WITH distributed_tx_hash AS(\n   SELECT  \n    DISTINCT transaction_hash\n   FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n   WHERE DATE(block_timestamp) = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n      AND ( \n         LOWER(from_address) = '0x7776c65e112475cebd4a2fc72e685f35641db3da'\n         OR LOWER(to_address) = '0x7776c65e112475cebd4a2fc72e685f35641db3da'\n        )\n   )\n\n   ,filtered_distributed_tx AS(\n      SELECT\n         DATE(block_timestamp) AS act_date,\n         token_address,\n         CASE\n                  WHEN LOWER(token_address) = '0x9f52c8ecbee10e00d9faaac5ee9ba0ff6550f511' THEN 'SIPHER Token'\n                  WHEN LOWER(token_address) = '0xb2d1464ae4cc86856474a34d112b4a2efa326ed9' THEN 'Escrowed SIPHER Token'\n                  ELSE 'N/A'\n            END AS token_name,\n          CAST(value AS NUMERIC) AS sipher_value,\n         * EXCEPT(value, token_address)\n      FROM `bigquery-public-data.crypto_ethereum.token_transfers`\n      WHERE transaction_hash IN (SELECT * FROM distributed_tx_hash)\n   )\n\n   SELECT * FROM filtered_distributed_tx",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`staking_public_data`.`fct_sipher_staking_distributed`"
        },
        "model.dbt_sipher.mart_important_wallet_accounts_balance": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_sipher.fct_important_wallets_token_transfers",
                    "model.dbt_sipher.stg_coinmarketcap__main_token_quotes",
                    "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_presentation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_presentation",
            "fqn": [
                "dbt_sipher",
                "marts",
                "etherscan",
                "mart_important_wallet_accounts_balance"
            ],
            "unique_id": "model.dbt_sipher.mart_important_wallet_accounts_balance",
            "raw_code": "{{- config(\n    materialized='table',\n    schema='sipher_presentation',\n    partition='date'\n)-}}\n\nWITH \nall_data AS (\n    SELECT  \n        wallet_address,\n        wallet_name,\n        token_address,\n        token_symbol,\n        value AS value,\n        decimal,\n        network,\n        PARSE_DATE(\"%Y-%m-%d\", date) AS date,\n    FROM  {{ ref('fct_important_wallets_token_transfers')}}\n    )\n\n,wallet_date_array AS(\n    SELECT DISTINCT\n        wallet_address,\n        wallet_name,\n        network,\n        token_address,\n        token_symbol,\n        decimal,\n        date\n    FROM all_data, UNNEST(GENERATE_DATE_ARRAY('2021-02-23', CURRENT_DATE())) AS date\n    )\n\n\n,join_date_unnest AS(\n    SELECT\n        wallet_address,\n        wallet_name,\n        token_address,\n        token_symbol,\n        value,\n        decimal,\n        network,\n        date\n    FROM all_data\n    RIGHT JOIN wallet_date_array USING(wallet_address, wallet_name, network, token_address, token_symbol, decimal, date)\n    ORDER BY wallet_address, date, network, token_symbol\n    )\n\n,token_quote AS(\n    SELECT DISTINCT\n        symbol,\n        quote_date,\n        open_price,\n        close_price\n    FROM {{ ref('stg_coinmarketcap__main_token_quotes')}}\n    )\n\n,token_quote_intraday_latest AS(\n    SELECT\n        token_symbol, \n        price_usd,\n        DATE(LEFT(CAST(timestamp AS STRING),10)) AS quote_date\n    FROM {{ ref('stg_coinmarketcap__main_token_quotes_intraday')}}\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY token_symbol ORDER BY timestamp DESC) = 1\n    ORDER BY 1, 3\n)\n\nSELECT\n  wallet_address,\n  wallet_name,\n  token_address,\n  join_date_unnest.token_symbol AS token_symbol,\n  SUM(value) OVER (\n            PARTITION BY wallet_address, wallet_name, token_address, join_date_unnest.token_symbol, network\n            ORDER BY date\n            ROWS UNBOUNDED PRECEDING)*POWER(10,-decimal) AS value,\n  decimal,\n  open_price,\n  COALESCE(close_price, price_usd) AS close_price,\n  network,\n  NULL AS timestamp,\n  date\nFROM join_date_unnest\nLEFT JOIN token_quote ON token_quote.quote_date = join_date_unnest.date AND LOWER(token_quote.symbol) = LOWER(join_date_unnest.token_symbol)\nLEFT JOIN token_quote_intraday_latest ON token_quote_intraday_latest.quote_date = join_date_unnest.date AND LOWER(token_quote_intraday_latest.token_symbol) = LOWER(join_date_unnest.token_symbol)",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/etherscan/mart_important_wallet_accounts_balance.sql",
            "original_file_path": "models/marts/etherscan/mart_important_wallet_accounts_balance.sql",
            "name": "mart_important_wallet_accounts_balance",
            "alias": "mart_important_wallet_accounts_balance",
            "checksum": {
                "name": "sha256",
                "checksum": "d367267c0cb418f5a29246e05c16eb9239c4a4b84dfb3ccdf59c631be725feee"
            },
            "tags": [],
            "refs": [
                [
                    "fct_important_wallets_token_transfers"
                ],
                [
                    "stg_coinmarketcap__main_token_quotes"
                ],
                [
                    "stg_coinmarketcap__main_token_quotes_intraday"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/etherscan/mart_important_wallet_accounts_balance.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "schema": "sipher_presentation",
                "partition": "date"
            },
            "created_at": 1705293861.9365492,
            "compiled_code": "WITH \nall_data AS (\n    SELECT  \n        wallet_address,\n        wallet_name,\n        token_address,\n        token_symbol,\n        value AS value,\n        decimal,\n        network,\n        PARSE_DATE(\"%Y-%m-%d\", date) AS date,\n    FROM  `sipher-data-testing`.`sipher_presentation`.`fct_important_wallets_token_transfers`\n    )\n\n,wallet_date_array AS(\n    SELECT DISTINCT\n        wallet_address,\n        wallet_name,\n        network,\n        token_address,\n        token_symbol,\n        decimal,\n        date\n    FROM all_data, UNNEST(GENERATE_DATE_ARRAY('2021-02-23', CURRENT_DATE())) AS date\n    )\n\n\n,join_date_unnest AS(\n    SELECT\n        wallet_address,\n        wallet_name,\n        token_address,\n        token_symbol,\n        value,\n        decimal,\n        network,\n        date\n    FROM all_data\n    RIGHT JOIN wallet_date_array USING(wallet_address, wallet_name, network, token_address, token_symbol, decimal, date)\n    ORDER BY wallet_address, date, network, token_symbol\n    )\n\n,token_quote AS(\n    SELECT DISTINCT\n        symbol,\n        quote_date,\n        open_price,\n        close_price\n    FROM `sipher-data-testing`.`raw_etherscan`.`stg_coinmarketcap__main_token_quotes`\n    )\n\n,token_quote_intraday_latest AS(\n    SELECT\n        token_symbol, \n        price_usd,\n        DATE(LEFT(CAST(timestamp AS STRING),10)) AS quote_date\n    FROM `sipher-data-testing`.`raw_etherscan`.`stg_coinmarketcap__main_token_quotes_intraday`\n        QUALIFY ROW_NUMBER() OVER (PARTITION BY token_symbol ORDER BY timestamp DESC) = 1\n    ORDER BY 1, 3\n)\n\nSELECT\n  wallet_address,\n  wallet_name,\n  token_address,\n  join_date_unnest.token_symbol AS token_symbol,\n  SUM(value) OVER (\n            PARTITION BY wallet_address, wallet_name, token_address, join_date_unnest.token_symbol, network\n            ORDER BY date\n            ROWS UNBOUNDED PRECEDING)*POWER(10,-decimal) AS value,\n  decimal,\n  open_price,\n  COALESCE(close_price, price_usd) AS close_price,\n  network,\n  NULL AS timestamp,\n  date\nFROM join_date_unnest\nLEFT JOIN token_quote ON token_quote.quote_date = join_date_unnest.date AND LOWER(token_quote.symbol) = LOWER(join_date_unnest.token_symbol)\nLEFT JOIN token_quote_intraday_latest ON token_quote_intraday_latest.quote_date = join_date_unnest.date AND LOWER(token_quote_intraday_latest.token_symbol) = LOWER(join_date_unnest.token_symbol)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_presentation`.`mart_important_wallet_accounts_balance`"
        },
        "model.dbt_sipher.fct_important_wallets_token_transfers": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_presentation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_presentation",
            "fqn": [
                "dbt_sipher",
                "marts",
                "etherscan",
                "fct_important_wallets_token_transfers"
            ],
            "unique_id": "model.dbt_sipher.fct_important_wallets_token_transfers",
            "raw_code": "{{- config(\n    materialized='incremental',\n    schema='sipher_presentation',\n    partition='date'\n)-}}\n\nWITH\netherscan_data_from_address AS(\n    SELECT \n        from_address AS wallet_address,\n        CASE\n            WHEN LOWER(from_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n            WHEN LOWER(from_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n            WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n            WHEN LOWER(from_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n            WHEN LOWER(from_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n            WHEN LOWER(from_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n            WHEN LOWER(from_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n            WHEN LOWER(from_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 'cUSDC'\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 'cUSDT'\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 'stETH'\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 'wstETH'\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 'COMP'\n        END AS token_symbol,\n        -CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 6\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 18\n        END AS decimal,\n        'etherscan' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7'),\n            LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'),\n            LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563'),\n            LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9'),\n            LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599'),\n            LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84'),\n            LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'),\n            LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0'),\n            LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888')\n        )\n        AND LOWER(from_address) IN (\n            LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n            LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n            LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n            LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n            LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n            LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n        )\n    )\n\n,etherscan_data_to_address AS(\n    SELECT \n        to_address AS wallet_address,\n        CASE\n            WHEN LOWER(to_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n            WHEN LOWER(to_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n            WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n            WHEN LOWER(to_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n            WHEN LOWER(to_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n            WHEN LOWER(to_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n            WHEN LOWER(to_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n            WHEN LOWER(to_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 'cUSDC'\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 'cUSDT'\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 'stETH'\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 'wstETH'\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 'COMP'\n        END AS token_symbol,\n        CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 6\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 18\n        END AS decimal,\n        'etherscan' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7'),\n            LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'),\n            LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563'),\n            LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9'),\n            LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599'),\n            LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84'),\n            LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'),\n            LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0'),\n            LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888')\n        )\n        AND LOWER(to_address) IN (\n            LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n            LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n            LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n            LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n            LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n            LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n        )\n    )\n\n\n,polygon_data_from_address AS(\n    SELECT \n        from_address AS wallet_address,\n        CASE\n            WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(from_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(from_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 'COMP'\n        END AS token_symbol,\n        -CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 18\n        END AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F'),\n            LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'),\n            LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6'),\n            LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'),\n            LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c')\n        )\n        AND LOWER(from_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\n,polygon_data_to_address AS(\n    SELECT \n        to_address AS wallet_address,\n        CASE\n            WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(to_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(to_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 'COMP'\n        END AS token_symbol,\n        CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 18\n        END AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F'),\n            LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'),\n            LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6'),\n            LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'),\n            LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c')\n        )\n        AND \n        LOWER(to_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\nSELECT * FROM etherscan_data_from_address\nUNION ALL\nSELECT * FROM etherscan_data_to_address\nUNION ALL\nSELECT * FROM polygon_data_from_address\nUNION ALL\nSELECT * FROM polygon_data_to_address",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/etherscan/fct_important_wallets_token_transfers.sql",
            "original_file_path": "models/marts/etherscan/fct_important_wallets_token_transfers.sql",
            "name": "fct_important_wallets_token_transfers",
            "alias": "fct_important_wallets_token_transfers",
            "checksum": {
                "name": "sha256",
                "checksum": "0b7bbab9688c4c7c1b300d104b18588b9557a79adcb5c91841dd90702fa79203"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/etherscan/fct_important_wallets_token_transfers.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "sipher_presentation",
                "partition": "date"
            },
            "created_at": 1705293861.940264,
            "compiled_code": "WITH\netherscan_data_from_address AS(\n    SELECT \n        from_address AS wallet_address,\n        CASE\n            WHEN LOWER(from_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n            WHEN LOWER(from_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n            WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n            WHEN LOWER(from_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n            WHEN LOWER(from_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n            WHEN LOWER(from_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n            WHEN LOWER(from_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n            WHEN LOWER(from_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 'cUSDC'\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 'cUSDT'\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 'stETH'\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 'wstETH'\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 'COMP'\n        END AS token_symbol,\n        -CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 6\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 18\n        END AS decimal,\n        'etherscan' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7'),\n            LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'),\n            LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563'),\n            LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9'),\n            LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599'),\n            LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84'),\n            LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'),\n            LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0'),\n            LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888')\n        )\n        AND LOWER(from_address) IN (\n            LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n            LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n            LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n            LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n            LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n            LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n        )\n    )\n\n,etherscan_data_to_address AS(\n    SELECT \n        to_address AS wallet_address,\n        CASE\n            WHEN LOWER(to_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n            WHEN LOWER(to_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n            WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n            WHEN LOWER(to_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n            WHEN LOWER(to_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n            WHEN LOWER(to_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n            WHEN LOWER(to_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n            WHEN LOWER(to_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 'cUSDC'\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 'cUSDT'\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 'stETH'\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 'wstETH'\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 'COMP'\n        END AS token_symbol,\n        CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7') THEN 6\n            WHEN LOWER(token_address) = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599') THEN 8\n            WHEN LOWER(token_address) = LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0') THEN 18\n            WHEN LOWER(token_address) = LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888') THEN 18\n        END AS decimal,\n        'etherscan' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_ethereum.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xdAC17F958D2ee523a2206206994597C13D831ec7'),\n            LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'),\n            LOWER('0x39AA39c021dfbaE8faC545936693aC917d5E7563'),\n            LOWER('0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9'),\n            LOWER('0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599'),\n            LOWER('0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84'),\n            LOWER('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'),\n            LOWER('0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0'),\n            LOWER('0xc00e94Cb662C3520282E6f5717214004A7f26888')\n        )\n        AND LOWER(to_address) IN (\n            LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n            LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n            LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n            LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n            LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n            LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n        )\n    )\n\n\n,polygon_data_from_address AS(\n    SELECT \n        from_address AS wallet_address,\n        CASE\n            WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(from_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(from_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 'COMP'\n        END AS token_symbol,\n        -CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 18\n        END AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F'),\n            LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'),\n            LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6'),\n            LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'),\n            LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c')\n        )\n        AND LOWER(from_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\n,polygon_data_to_address AS(\n    SELECT \n        to_address AS wallet_address,\n        CASE\n            WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(to_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(to_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        token_address,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 'USDT'\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 'USDC'\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 'wBTC'\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 'WETH'\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 'COMP'\n        END AS token_symbol,\n        CAST(value AS NUMERIC) AS value,\n        CASE\n            WHEN LOWER(token_address) = LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174') THEN 6\n            WHEN LOWER(token_address) = LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6') THEN 8\n            WHEN LOWER(token_address) = LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619') THEN 18\n            WHEN LOWER(token_address) = LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c') THEN 18\n        END AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.token_transfers` \n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(token_address) IN (\n            LOWER('0xc2132D05D31c914a87C6611C10748AEb04B58e8F'),\n            LOWER('0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'),\n            LOWER('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6'),\n            LOWER('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619'),\n            LOWER('0x8505b9d2254A7Ae468c0E9dd10Ccea3A837aef5c')\n        )\n        AND \n        LOWER(to_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\nSELECT * FROM etherscan_data_from_address\nUNION ALL\nSELECT * FROM etherscan_data_to_address\nUNION ALL\nSELECT * FROM polygon_data_from_address\nUNION ALL\nSELECT * FROM polygon_data_to_address",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_presentation`.`fct_important_wallets_token_transfers`"
        },
        "model.dbt_sipher.fct_important_wallets_transactions": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_presentation",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "partition": "date",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_presentation",
            "fqn": [
                "dbt_sipher",
                "marts",
                "etherscan",
                "fct_important_wallets_transactions"
            ],
            "unique_id": "model.dbt_sipher.fct_important_wallets_transactions",
            "raw_code": "{{- config(\n    materialized='incremental',\n    schema='sipher_presentation',\n    partition='date'\n)-}}\n\nWITH\nethereum_from_address_transactions AS (\n  SELECT\n    from_address AS wallet_address,\n    CASE\n        WHEN LOWER(from_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n        WHEN LOWER(from_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n        WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n        WHEN LOWER(from_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n        WHEN LOWER(from_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n        WHEN LOWER(from_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n        WHEN LOWER(from_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n        WHEN LOWER(from_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n    END AS wallet_name,\n    NULL AS token_address,\n    'ETH' AS token_symbol,\n    18 AS decimal,\n    -CAST(value AS NUMERIC) AS value,\n    'etherscan' AS network,\n    block_timestamp AS timestamp,\n    LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n    a.hash AS transaction_hash,\n  FROM `bigquery-public-data.crypto_ethereum.transactions` a\n  WHERE DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n    AND LOWER(from_address) IN (\n        LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n        LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n        LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n        LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n        LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n        LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n        LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n        LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n    )\n)\n\n,ethereum_to_address_transactions AS(\n  SELECT\n    to_address AS wallet_address,\n    CASE\n        WHEN LOWER(to_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n        WHEN LOWER(to_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n        WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n        WHEN LOWER(to_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n        WHEN LOWER(to_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n        WHEN LOWER(to_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n        WHEN LOWER(to_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n        WHEN LOWER(to_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n    END AS wallet_name,\n    NULL AS token_address,\n    'ETH' AS token_symbol,\n    18 AS decimal,\n    CAST(value AS NUMERIC) AS value,\n    'etherscan' AS network,\n    block_timestamp AS timestamp,\n    a.hash AS transaction_hash,\n    LEFT(CAST(block_timestamp AS STRING), 10) AS date\n  FROM `bigquery-public-data.crypto_ethereum.transactions` a\n  WHERE DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n    AND LOWER(to_address) IN (\n        LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n        LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n        LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n        LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n        LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n        LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n        LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n        LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n    )\n)\n\n,polygon_from_address_transactions AS(\n    SELECT \n        from_address AS wallet_address,\n        CASE\n            WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(from_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(from_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        NULL AS token_address,\n        \"MATIC\" AS token_symbol,\n        -CAST(value AS NUMERIC) AS value,\n        18 AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        a.hash AS transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.transactions` a\n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(from_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\n,polygon_to_address_transactions AS(\n    SELECT \n        to_address AS wallet_address,\n        CASE\n            WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(to_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(to_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        NULL AS token_address,\n        \"MATIC\" AS token_symbol,\n        CAST(value AS NUMERIC) AS value,\n        18 AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        a.hash AS transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.transactions` a\n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND \n        LOWER(to_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\nSELECT * FROM ethereum_from_address_transactions\nUNION ALL\nSELECT * FROM ethereum_to_address_transactions\nUNION ALL\nSELECT * FROM polygon_from_address_transactions\nUNION ALL\nSELECT * FROM polygon_to_address_transactions",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/etherscan/fct_important_wallets_transactions.sql",
            "original_file_path": "models/marts/etherscan/fct_important_wallets_transactions.sql",
            "name": "fct_important_wallets_transactions",
            "alias": "fct_important_wallets_transactions",
            "checksum": {
                "name": "sha256",
                "checksum": "1908583d5dfe23424f59394c01b4e5eaf8dab022d69053799e9c5eecd81f975d"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/etherscan/fct_important_wallets_transactions.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "schema": "sipher_presentation",
                "partition": "date"
            },
            "created_at": 1705293861.9457357,
            "compiled_code": "WITH\nethereum_from_address_transactions AS (\n  SELECT\n    from_address AS wallet_address,\n    CASE\n        WHEN LOWER(from_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n        WHEN LOWER(from_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n        WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n        WHEN LOWER(from_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n        WHEN LOWER(from_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n        WHEN LOWER(from_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n        WHEN LOWER(from_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n        WHEN LOWER(from_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n    END AS wallet_name,\n    NULL AS token_address,\n    'ETH' AS token_symbol,\n    18 AS decimal,\n    -CAST(value AS NUMERIC) AS value,\n    'etherscan' AS network,\n    block_timestamp AS timestamp,\n    LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n    a.hash AS transaction_hash,\n  FROM `bigquery-public-data.crypto_ethereum.transactions` a\n  WHERE DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n    AND LOWER(from_address) IN (\n        LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n        LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n        LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n        LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n        LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n        LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n        LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n        LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n    )\n)\n\n,ethereum_to_address_transactions AS(\n  SELECT\n    to_address AS wallet_address,\n    CASE\n        WHEN LOWER(to_address) = LOWER('0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf') THEN 'Gnosis Sipher Seed & Partnership Round MSIG'\n        WHEN LOWER(to_address) = LOWER('0x11986f428b22c011082820825ca29B21a3C11295') THEN 'Gnosis $SIPHER General Management MSIG'\n        WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Gnosis NFT OpenSea Commission MSIG'\n        WHEN LOWER(to_address) = LOWER('0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4') THEN 'Gnosis Sipher B2B Guilds MSIG'\n        WHEN LOWER(to_address) = LOWER('0x1390047A78a029383d0ADcC1adB5053b8fA3243F') THEN 'Gnosis Sipher NFT Sale MSIG'\n        WHEN LOWER(to_address) = LOWER('0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2') THEN '1102 Equity Fundraising'\n        WHEN LOWER(to_address) = LOWER('0x3e8c6676eef25c7b18a7ac24271075f735c79a16') THEN 'Athereal.eth Public Wallet'\n        WHEN LOWER(to_address) = LOWER('0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002') THEN 'Sipher Cold Wallet Trezor'\n    END AS wallet_name,\n    NULL AS token_address,\n    'ETH' AS token_symbol,\n    18 AS decimal,\n    CAST(value AS NUMERIC) AS value,\n    'etherscan' AS network,\n    block_timestamp AS timestamp,\n    a.hash AS transaction_hash,\n    LEFT(CAST(block_timestamp AS STRING), 10) AS date\n  FROM `bigquery-public-data.crypto_ethereum.transactions` a\n  WHERE DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n    AND LOWER(to_address) IN (\n        LOWER(\"0xF5c935c8E6bd741c74f8633a106c0CA33E3c4faf\"),\n        LOWER(\"0x11986f428b22c011082820825ca29B21a3C11295\"),\n        LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n        LOWER(\"0x94B1a79C1a2a3Fedb40EF3af44DEc1DEd8Bc26f4\"),\n        LOWER(\"0x1390047A78a029383d0ADcC1adB5053b8fA3243F\"),\n        LOWER(\"0x128114f00540a0f59b12DE5e2BaE354FcEdf0aa2\"),\n        LOWER(\"0x3e8c6676eef25c7b18a7ac24271075f735c79a16\"),\n        LOWER(\"0x3BC15f3601eA7b65a9A8E7f8C776d4Ab5e2Bc002\")\n    )\n)\n\n,polygon_from_address_transactions AS(\n    SELECT \n        from_address AS wallet_address,\n        CASE\n            WHEN LOWER(from_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(from_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(from_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        NULL AS token_address,\n        \"MATIC\" AS token_symbol,\n        -CAST(value AS NUMERIC) AS value,\n        18 AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        a.hash AS transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.transactions` a\n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND LOWER(from_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\n,polygon_to_address_transactions AS(\n    SELECT \n        to_address AS wallet_address,\n        CASE\n            WHEN LOWER(to_address) = LOWER('0x1299461a6dc8E755F7299cC221B29776d7eDb663') THEN 'Clone Sipher OpenSea Commission MSIG'\n            WHEN LOWER(to_address) = LOWER('0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B') THEN 'Dopa JSC Polygon Gnosis SALA'\n            WHEN LOWER(to_address) = LOWER('0xb7273C93095F9597FcBFC48837e852F4CF8b39b2') THEN 'Dopa JSC Polygon Gnosis OPEX'\n        END AS wallet_name,\n        NULL AS token_address,\n        \"MATIC\" AS token_symbol,\n        CAST(value AS NUMERIC) AS value,\n        18 AS decimal,\n        'polygon' AS network,\n        block_timestamp AS timestamp,\n        LEFT(CAST(block_timestamp AS STRING), 10) AS date,\n        a.hash AS transaction_hash\n    FROM `bigquery-public-data.crypto_polygon.transactions` a\n    WHERE \n        DATE(block_timestamp) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)\n        AND \n        LOWER(to_address) IN (\n            LOWER(\"0x1299461a6dc8E755F7299cC221B29776d7eDb663\"),\n            LOWER(\"0xf5D57a3EC1fB77f12D1FB9bf761a93A3ddD7c35B\"),\n            LOWER(\"0xb7273C93095F9597FcBFC48837e852F4CF8b39b2\")\n        )\n    )\n\nSELECT * FROM ethereum_from_address_transactions\nUNION ALL\nSELECT * FROM ethereum_to_address_transactions\nUNION ALL\nSELECT * FROM polygon_from_address_transactions\nUNION ALL\nSELECT * FROM polygon_to_address_transactions",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_presentation`.`fct_important_wallets_transactions`"
        },
        "operation.dbt_sipher.dbt_sipher-on-run-end-0": {
            "compiled": true,
            "resource_type": "operation",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.store_test_results"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "hooks",
                "dbt_sipher-on-run-end-0"
            ],
            "unique_id": "operation.dbt_sipher.dbt_sipher-on-run-end-0",
            "raw_code": "{{ store_test_results(results) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "hooks/dbt_sipher-on-run-end-0.sql",
            "original_file_path": "./dbt_project.yml",
            "name": "dbt_sipher-on-run-end-0",
            "alias": "dbt_sipher-on-run-end-0",
            "checksum": {
                "name": "sha256",
                "checksum": "934d9ca2138c3c61e9cf27875d8c40d71dc661adc88fa202effd5f3e0ec1d559"
            },
            "tags": [
                "on-run-end"
            ],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705293861.954885,
            "compiled_code": "",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null,
            "index": 0
        },
        "test.dbt_sipher.not_null_quest_dashboard_hd_event_time.77cd6559d4": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_time",
                    "model": "{{ get_where_subquery(ref('quest_dashboard_hd')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_quest_dashboard_hd_event_time"
            ],
            "unique_id": "test.dbt_sipher.not_null_quest_dashboard_hd_event_time.77cd6559d4",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_quest_dashboard_hd_event_time.sql",
            "original_file_path": "models/core/schema_quest_dashboard_hd.yml",
            "name": "not_null_quest_dashboard_hd_event_time",
            "alias": "not_null_quest_dashboard_hd_event_time",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_dashboard_hd.yml/not_null_quest_dashboard_hd_event_time.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0464215,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_dashboard_hd`\nwhere event_time is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_quest_dashboard_hd_event_time`",
            "column_name": "event_time",
            "file_key_name": "models.quest_dashboard_hd"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_user_id__string.a704be848c": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "string",
                    "column_name": "user_id",
                    "model": "{{ get_where_subquery(ref('quest_dashboard_hd')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_2e32b847d35214402c90558f78c7fdbe",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_user_id__string"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_user_id__string.a704be848c",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2e32b847d35214402c90558f78c7fdbe\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_2e32b847d35214402c90558f78c7fdbe.sql",
            "original_file_path": "models/core/schema_quest_dashboard_hd.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_user_id__string",
            "alias": "dbt_expectations_expect_column_2e32b847d35214402c90558f78c7fdbe",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_dashboard_hd.yml/dbt_expectations_expect_column_2e32b847d35214402c90558f78c7fdbe.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_2e32b847d35214402c90558f78c7fdbe"
            },
            "created_at": 1705293862.0473962,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('EVENT_TIME' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('WALLET_ADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USER_PSEUDO_ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TRAFFIC_SOURCE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('COUNTRY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('QUEST_USERID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('QUESTTITLE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TRANS_QUEST_ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LIFETIME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('POINT_USERID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOTALXP' as STRING) as relation_column,\n            cast('FLOAT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOTALNANOCHIPS' as STRING) as relation_column,\n            cast('FLOAT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RANK_' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LEVEL' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SIPHERNFTS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SIPHERTOKENS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_2e32b847d35214402c90558f78c7fdbe`",
            "column_name": "user_id",
            "file_key_name": "models.quest_dashboard_hd"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_quest_userId__string.ed72e33032": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "string",
                    "column_name": "quest_userId",
                    "model": "{{ get_where_subquery(ref('quest_dashboard_hd')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_6079578c389bdb91c495e48d85ea096a",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_quest_userId__string"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_quest_userId__string.ed72e33032",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6079578c389bdb91c495e48d85ea096a\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_6079578c389bdb91c495e48d85ea096a.sql",
            "original_file_path": "models/core/schema_quest_dashboard_hd.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_quest_userId__string",
            "alias": "dbt_expectations_expect_column_6079578c389bdb91c495e48d85ea096a",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_dashboard_hd.yml/dbt_expectations_expect_column_6079578c389bdb91c495e48d85ea096a.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_6079578c389bdb91c495e48d85ea096a"
            },
            "created_at": 1705293862.0500295,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('EVENT_TIME' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('WALLET_ADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USER_PSEUDO_ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TRAFFIC_SOURCE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('COUNTRY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('QUEST_USERID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('QUESTTITLE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TRANS_QUEST_ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LIFETIME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('POINT_USERID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOTALXP' as STRING) as relation_column,\n            cast('FLOAT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOTALNANOCHIPS' as STRING) as relation_column,\n            cast('FLOAT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RANK_' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LEVEL' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SIPHERNFTS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SIPHERTOKENS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'QUEST_USERID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_6079578c389bdb91c495e48d85ea096a`",
            "column_name": "quest_userId",
            "file_key_name": "models.quest_dashboard_hd"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_point_userid__string.ddccce3c50": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "string",
                    "column_name": "point_userid",
                    "model": "{{ get_where_subquery(ref('quest_dashboard_hd')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_c9d5fdefd28242b0a7091dd81c75db10",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_point_userid__string"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_point_userid__string.ddccce3c50",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c9d5fdefd28242b0a7091dd81c75db10\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_c9d5fdefd28242b0a7091dd81c75db10.sql",
            "original_file_path": "models/core/schema_quest_dashboard_hd.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_point_userid__string",
            "alias": "dbt_expectations_expect_column_c9d5fdefd28242b0a7091dd81c75db10",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_dashboard_hd.yml/dbt_expectations_expect_column_c9d5fdefd28242b0a7091dd81c75db10.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_c9d5fdefd28242b0a7091dd81c75db10"
            },
            "created_at": 1705293862.0523942,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('EVENT_TIME' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('WALLET_ADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USER_PSEUDO_ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TRAFFIC_SOURCE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('COUNTRY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('QUEST_USERID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('QUESTTITLE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TRANS_QUEST_ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LIFETIME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('POINT_USERID' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOTALXP' as STRING) as relation_column,\n            cast('FLOAT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOTALNANOCHIPS' as STRING) as relation_column,\n            cast('FLOAT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RANK_' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LEVEL' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SIPHERNFTS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SIPHERTOKENS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POINT_USERID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_c9d5fdefd28242b0a7091dd81c75db10`",
            "column_name": "point_userid",
            "file_key_name": "models.quest_dashboard_hd"
        },
        "test.dbt_sipher.not_null_quest_dashboard_hd_user_pseudo_id.bebef8a49b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_pseudo_id",
                    "model": "{{ get_where_subquery(ref('quest_dashboard_hd')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_quest_dashboard_hd_user_pseudo_id"
            ],
            "unique_id": "test.dbt_sipher.not_null_quest_dashboard_hd_user_pseudo_id.bebef8a49b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_quest_dashboard_hd_user_pseudo_id.sql",
            "original_file_path": "models/core/schema_quest_dashboard_hd.yml",
            "name": "not_null_quest_dashboard_hd_user_pseudo_id",
            "alias": "not_null_quest_dashboard_hd_user_pseudo_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_dashboard_hd.yml/not_null_quest_dashboard_hd_user_pseudo_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0547154,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_dashboard_hd`\nwhere user_pseudo_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_quest_dashboard_hd_user_pseudo_id`",
            "column_name": "user_pseudo_id",
            "file_key_name": "models.quest_dashboard_hd"
        },
        "test.dbt_sipher.not_null_quest_dashboard_hd_country.46bd95dfd6": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "country",
                    "model": "{{ get_where_subquery(ref('quest_dashboard_hd')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_quest_dashboard_hd_country"
            ],
            "unique_id": "test.dbt_sipher.not_null_quest_dashboard_hd_country.46bd95dfd6",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_quest_dashboard_hd_country.sql",
            "original_file_path": "models/core/schema_quest_dashboard_hd.yml",
            "name": "not_null_quest_dashboard_hd_country",
            "alias": "not_null_quest_dashboard_hd_country",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_dashboard_hd.yml/not_null_quest_dashboard_hd_country.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0555139,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_dashboard_hd`\nwhere country is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_quest_dashboard_hd_country`",
            "column_name": "country",
            "file_key_name": "models.quest_dashboard_hd"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_quest_dashboard_hd_wallet_address__44__42__wallet_address_is_not_null__True.2ef46375c6": {
            "test_metadata": {
                "name": "expect_column_value_lengths_to_be_between",
                "kwargs": {
                    "min_value": 42,
                    "max_value": 44,
                    "strictly": true,
                    "row_condition": "wallet_address is not null",
                    "column_name": "wallet_address",
                    "model": "{{ get_where_subquery(ref('quest_dashboard_hd')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_2ca71d255d26d0af325e3ee9e764c382",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_value_lengths_to_be_between_quest_dashboard_hd_wallet_address__44__42__wallet_address_is_not_null__True"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_quest_dashboard_hd_wallet_address__44__42__wallet_address_is_not_null__True.2ef46375c6",
            "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ca71d255d26d0af325e3ee9e764c382\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_2ca71d255d26d0af325e3ee9e764c382.sql",
            "original_file_path": "models/core/schema_quest_dashboard_hd.yml",
            "name": "dbt_expectations_expect_column_value_lengths_to_be_between_quest_dashboard_hd_wallet_address__44__42__wallet_address_is_not_null__True",
            "alias": "dbt_expectations_expect_column_2ca71d255d26d0af325e3ee9e764c382",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_dashboard_hd.yml/dbt_expectations_expect_column_2ca71d255d26d0af325e3ee9e764c382.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_2ca71d255d26d0af325e3ee9e764c382"
            },
            "created_at": 1705293862.0563145,
            "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        wallet_address\n    ) > 42 and length(\n        wallet_address\n    ) < 44\n)\n as expression\n\n\n    from `sipher-data-testing`.`tmp_dbt`.`quest_dashboard_hd`\n    where\n        wallet_address is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_2ca71d255d26d0af325e3ee9e764c382`",
            "column_name": "wallet_address",
            "file_key_name": "models.quest_dashboard_hd"
        },
        "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_top_sipherians_0_8__act_date.4c1e44aa4d": {
            "test_metadata": {
                "name": "not_null_proportion",
                "kwargs": {
                    "at_least": 0.8,
                    "column_name": "act_date",
                    "model": "{{ get_where_subquery(ref('SIPHER_top_sipherians')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_not_null_proportion",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_top_sipherians"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_not_null_proportion__19d5cc7a49887e3413e1a8cbbeedeaf0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_not_null_proportion_SIPHER_top_sipherians_0_8__act_date"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_top_sipherians_0_8__act_date.4c1e44aa4d",
            "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__19d5cc7a49887e3413e1a8cbbeedeaf0\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_not_null_proportion__19d5cc7a49887e3413e1a8cbbeedeaf0.sql",
            "original_file_path": "models/core/schema_SIPHER_top_sipherians.yml",
            "name": "dbt_utils_not_null_proportion_SIPHER_top_sipherians_0_8__act_date",
            "alias": "dbt_utils_not_null_proportion__19d5cc7a49887e3413e1a8cbbeedeaf0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_top_sipherians"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_top_sipherians.yml/dbt_utils_not_null_proportion__19d5cc7a49887e3413e1a8cbbeedeaf0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_not_null_proportion__19d5cc7a49887e3413e1a8cbbeedeaf0"
            },
            "created_at": 1705293862.0593886,
            "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when act_date is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from `sipher-data-testing`.`tmp_dbt`.`SIPHER_top_sipherians`\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.8 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_not_null_proportion__19d5cc7a49887e3413e1a8cbbeedeaf0`",
            "column_name": "act_date",
            "file_key_name": "models.SIPHER_top_sipherians"
        },
        "test.dbt_sipher.not_null_atherlabs_users_act_date.3b096bb929": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "act_date",
                    "model": "{{ get_where_subquery(ref('atherlabs_users')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_users"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_users_act_date"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_users_act_date.3b096bb929",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_users_act_date.sql",
            "original_file_path": "models/core/schema_atherlabs_users.yml",
            "name": "not_null_atherlabs_users_act_date",
            "alias": "not_null_atherlabs_users_act_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_users"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_users.yml/not_null_atherlabs_users_act_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0622573,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_users`\nwhere act_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_users_act_date`",
            "column_name": "act_date",
            "file_key_name": "models.atherlabs_users"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_atherlabs_users_wallet_address__42__42__wallet_address_is_not_null__False.550cc7da90": {
            "test_metadata": {
                "name": "expect_column_value_lengths_to_be_between",
                "kwargs": {
                    "min_value": 42,
                    "max_value": 42,
                    "strictly": false,
                    "row_condition": "wallet_address is not null",
                    "column_name": "wallet_address",
                    "model": "{{ get_where_subquery(ref('atherlabs_users')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_users"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_91f35475b7df45b8a89d7b3bea6aa08b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_value_lengths_to_be_between_atherlabs_users_wallet_address__42__42__wallet_address_is_not_null__False"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_atherlabs_users_wallet_address__42__42__wallet_address_is_not_null__False.550cc7da90",
            "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_91f35475b7df45b8a89d7b3bea6aa08b\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_91f35475b7df45b8a89d7b3bea6aa08b.sql",
            "original_file_path": "models/core/schema_atherlabs_users.yml",
            "name": "dbt_expectations_expect_column_value_lengths_to_be_between_atherlabs_users_wallet_address__42__42__wallet_address_is_not_null__False",
            "alias": "dbt_expectations_expect_column_91f35475b7df45b8a89d7b3bea6aa08b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_users"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_users.yml/dbt_expectations_expect_column_91f35475b7df45b8a89d7b3bea6aa08b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_91f35475b7df45b8a89d7b3bea6aa08b"
            },
            "created_at": 1705293862.0630898,
            "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        wallet_address\n    ) >= 42 and length(\n        wallet_address\n    ) <= 42\n)\n as expression\n\n\n    from `sipher-data-testing`.`tmp_dbt`.`atherlabs_users`\n    where\n        wallet_address is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_91f35475b7df45b8a89d7b3bea6aa08b`",
            "column_name": "wallet_address",
            "file_key_name": "models.atherlabs_users"
        },
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__period.9e811c2560": {
            "test_metadata": {
                "name": "not_null_proportion",
                "kwargs": {
                    "at_least": 0.15,
                    "column_name": "period",
                    "model": "{{ get_where_subquery(ref('quest_retention_weekly_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_not_null_proportion",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_retention_weekly_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_not_null_proportion__9ff226616e1c9db9362707c84e27b62d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__period"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__period.9e811c2560",
            "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__9ff226616e1c9db9362707c84e27b62d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_not_null_proportion__9ff226616e1c9db9362707c84e27b62d.sql",
            "original_file_path": "models/core/schema_quest_retention_weekly_hd.yml",
            "name": "dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__period",
            "alias": "dbt_utils_not_null_proportion__9ff226616e1c9db9362707c84e27b62d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_retention_weekly_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_retention_weekly_hd.yml/dbt_utils_not_null_proportion__9ff226616e1c9db9362707c84e27b62d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_not_null_proportion__9ff226616e1c9db9362707c84e27b62d"
            },
            "created_at": 1705293862.066296,
            "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when period is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from `sipher-data-testing`.`tmp_dbt`.`quest_retention_weekly_hd`\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.15 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_not_null_proportion__9ff226616e1c9db9362707c84e27b62d`",
            "column_name": "period",
            "file_key_name": "models.quest_retention_weekly_hd"
        },
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__quest_userId.d2bce102d0": {
            "test_metadata": {
                "name": "not_null_proportion",
                "kwargs": {
                    "at_least": 0.15,
                    "column_name": "quest_userId",
                    "model": "{{ get_where_subquery(ref('quest_retention_weekly_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_not_null_proportion",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_retention_weekly_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_not_null_proportion__c8e0e1520c761c02c49fbec59d1629c2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__quest_userId"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__quest_userId.d2bce102d0",
            "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__c8e0e1520c761c02c49fbec59d1629c2\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_not_null_proportion__c8e0e1520c761c02c49fbec59d1629c2.sql",
            "original_file_path": "models/core/schema_quest_retention_weekly_hd.yml",
            "name": "dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__quest_userId",
            "alias": "dbt_utils_not_null_proportion__c8e0e1520c761c02c49fbec59d1629c2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_retention_weekly_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_retention_weekly_hd.yml/dbt_utils_not_null_proportion__c8e0e1520c761c02c49fbec59d1629c2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_not_null_proportion__c8e0e1520c761c02c49fbec59d1629c2"
            },
            "created_at": 1705293862.068469,
            "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when quest_userId is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from `sipher-data-testing`.`tmp_dbt`.`quest_retention_weekly_hd`\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.15 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_not_null_proportion__c8e0e1520c761c02c49fbec59d1629c2`",
            "column_name": "quest_userId",
            "file_key_name": "models.quest_retention_weekly_hd"
        },
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_act_month.9a29470684": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "act_month",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_MAU')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_MAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_dashboard_MAU_act_month"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_act_month.9a29470684",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_dashboard_MAU_act_month.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_MAU.yml",
            "name": "not_null_atherlabs_dashboard_MAU_act_month",
            "alias": "not_null_atherlabs_dashboard_MAU_act_month",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_MAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_MAU.yml/not_null_atherlabs_dashboard_MAU_act_month.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0715287,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_MAU`\nwhere act_month is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_dashboard_MAU_act_month`",
            "column_name": "act_month",
            "file_key_name": "models.atherlabs_dashboard_MAU"
        },
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_act_month__12__1.9ab6672425": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 1,
                    "max_value": 12,
                    "column_name": "act_month",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_MAU')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_MAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_ather_db0496d28ce09c7feeeb48dcc9fe8eaf",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_accepted_range_atherlabs_dashboard_MAU_act_month__12__1"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_act_month__12__1.9ab6672425",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_ather_db0496d28ce09c7feeeb48dcc9fe8eaf\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_accepted_range_ather_db0496d28ce09c7feeeb48dcc9fe8eaf.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_MAU.yml",
            "name": "dbt_utils_accepted_range_atherlabs_dashboard_MAU_act_month__12__1",
            "alias": "dbt_utils_accepted_range_ather_db0496d28ce09c7feeeb48dcc9fe8eaf",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_MAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_MAU.yml/dbt_utils_accepted_range_ather_db0496d28ce09c7feeeb48dcc9fe8eaf.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_accepted_range_ather_db0496d28ce09c7feeeb48dcc9fe8eaf"
            },
            "created_at": 1705293862.0723479,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_MAU`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not act_month >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not act_month <= 12\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_accepted_range_ather_db0496d28ce09c7feeeb48dcc9fe8eaf`",
            "column_name": "act_month",
            "file_key_name": "models.atherlabs_dashboard_MAU"
        },
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_id_cnt.0c4db60863": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_id_cnt",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_MAU')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_MAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_dashboard_MAU_user_id_cnt"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_id_cnt.0c4db60863",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_dashboard_MAU_user_id_cnt.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_MAU.yml",
            "name": "not_null_atherlabs_dashboard_MAU_user_id_cnt",
            "alias": "not_null_atherlabs_dashboard_MAU_user_id_cnt",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_MAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_MAU.yml/not_null_atherlabs_dashboard_MAU_user_id_cnt.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0745006,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_MAU`\nwhere user_id_cnt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_dashboard_MAU_user_id_cnt`",
            "column_name": "user_id_cnt",
            "file_key_name": "models.atherlabs_dashboard_MAU"
        },
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0.c16260ae79": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "column_name": "user_id_cnt",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_MAU')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_MAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0.c16260ae79",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_MAU.yml",
            "name": "dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0",
            "alias": "dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_MAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_MAU.yml/dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0752945,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_MAU`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not user_id_cnt >= 0\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0`",
            "column_name": "user_id_cnt",
            "file_key_name": "models.atherlabs_dashboard_MAU"
        },
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt.c6408f9f0d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_pseudo_id_cnt",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_MAU')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_MAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt.c6408f9f0d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_MAU.yml",
            "name": "not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt",
            "alias": "not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_MAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_MAU.yml/not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0775056,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_MAU`\nwhere user_pseudo_id_cnt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt`",
            "column_name": "user_pseudo_id_cnt",
            "file_key_name": "models.atherlabs_dashboard_MAU"
        },
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_pseudo_id_cnt__0.bb797bbfb1": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "column_name": "user_pseudo_id_cnt",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_MAU')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_MAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_ather_999d3fa0f1c95a8be0e8021cd06bcd47",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_pseudo_id_cnt__0"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_pseudo_id_cnt__0.bb797bbfb1",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_ather_999d3fa0f1c95a8be0e8021cd06bcd47\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_accepted_range_ather_999d3fa0f1c95a8be0e8021cd06bcd47.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_MAU.yml",
            "name": "dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_pseudo_id_cnt__0",
            "alias": "dbt_utils_accepted_range_ather_999d3fa0f1c95a8be0e8021cd06bcd47",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_MAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_MAU.yml/dbt_utils_accepted_range_ather_999d3fa0f1c95a8be0e8021cd06bcd47.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_accepted_range_ather_999d3fa0f1c95a8be0e8021cd06bcd47"
            },
            "created_at": 1705293862.0783596,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_MAU`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not user_pseudo_id_cnt >= 0\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_accepted_range_ather_999d3fa0f1c95a8be0e8021cd06bcd47`",
            "column_name": "user_pseudo_id_cnt",
            "file_key_name": "models.atherlabs_dashboard_MAU"
        },
        "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date.2084568351": {
            "test_metadata": {
                "name": "not_null_proportion",
                "kwargs": {
                    "at_least": 0.8,
                    "column_name": "act_date",
                    "model": "{{ get_where_subquery(ref('SIPHER_overall')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_not_null_proportion",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_overall"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date.2084568351",
            "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date.sql",
            "original_file_path": "models/core/schema_SIPHER_overall.yml",
            "name": "dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date",
            "alias": "dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_overall"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_overall.yml/dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0812416,
            "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when act_date is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from `sipher-data-testing`.`tmp_dbt`.`SIPHER_overall`\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.8 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date`",
            "column_name": "act_date",
            "file_key_name": "models.SIPHER_overall"
        },
        "test.dbt_sipher.unique_quest_4retention_daily_hd_o_time.80a27a00cb": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "o_time",
                    "model": "{{ get_where_subquery(ref('quest_4retention_daily_hd')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_4retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "unique_quest_4retention_daily_hd_o_time"
            ],
            "unique_id": "test.dbt_sipher.unique_quest_4retention_daily_hd_o_time.80a27a00cb",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "unique_quest_4retention_daily_hd_o_time.sql",
            "original_file_path": "models/core/schema_quest_4retention_daily_hd.yml",
            "name": "unique_quest_4retention_daily_hd_o_time",
            "alias": "unique_quest_4retention_daily_hd_o_time",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_4retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_4retention_daily_hd.yml/unique_quest_4retention_daily_hd_o_time.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0850809,
            "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select o_time as unique_field\n  from `sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`\n  where o_time is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`unique_quest_4retention_daily_hd_o_time`",
            "column_name": "o_time",
            "file_key_name": "models.quest_4retention_daily_hd"
        },
        "test.dbt_sipher.not_null_quest_4retention_daily_hd_o_time.c488df1162": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "o_time",
                    "model": "{{ get_where_subquery(ref('quest_4retention_daily_hd')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_4retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_quest_4retention_daily_hd_o_time"
            ],
            "unique_id": "test.dbt_sipher.not_null_quest_4retention_daily_hd_o_time.c488df1162",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_quest_4retention_daily_hd_o_time.sql",
            "original_file_path": "models/core/schema_quest_4retention_daily_hd.yml",
            "name": "not_null_quest_4retention_daily_hd_o_time",
            "alias": "not_null_quest_4retention_daily_hd_o_time",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_4retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_4retention_daily_hd.yml/not_null_quest_4retention_daily_hd_o_time.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0858963,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`\nwhere o_time is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_quest_4retention_daily_hd_o_time`",
            "column_name": "o_time",
            "file_key_name": "models.quest_4retention_daily_hd"
        },
        "test.dbt_sipher.not_null_quest_4retention_daily_hd_ending.974c52bb7e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "ending",
                    "model": "{{ get_where_subquery(ref('quest_4retention_daily_hd')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_4retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_quest_4retention_daily_hd_ending"
            ],
            "unique_id": "test.dbt_sipher.not_null_quest_4retention_daily_hd_ending.974c52bb7e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_quest_4retention_daily_hd_ending.sql",
            "original_file_path": "models/core/schema_quest_4retention_daily_hd.yml",
            "name": "not_null_quest_4retention_daily_hd_ending",
            "alias": "not_null_quest_4retention_daily_hd_ending",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_4retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_4retention_daily_hd.yml/not_null_quest_4retention_daily_hd_ending.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0868075,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`\nwhere ending is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_quest_4retention_daily_hd_ending`",
            "column_name": "ending",
            "file_key_name": "models.quest_4retention_daily_hd"
        },
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_returns___0.667192cea6": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": " >= 0",
                    "column_name": "returns",
                    "model": "{{ get_where_subquery(ref('quest_4retention_daily_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_utils.test_expression_is_true"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_4retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_q_f7e43b26e5752a31e42650c45e5d37ec",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_expression_is_true_quest_4retention_daily_hd_returns___0"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_returns___0.667192cea6",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_q_f7e43b26e5752a31e42650c45e5d37ec\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_expression_is_true_q_f7e43b26e5752a31e42650c45e5d37ec.sql",
            "original_file_path": "models/core/schema_quest_4retention_daily_hd.yml",
            "name": "dbt_utils_expression_is_true_quest_4retention_daily_hd_returns___0",
            "alias": "dbt_utils_expression_is_true_q_f7e43b26e5752a31e42650c45e5d37ec",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_4retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_4retention_daily_hd.yml/dbt_utils_expression_is_true_q_f7e43b26e5752a31e42650c45e5d37ec.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_expression_is_true_q_f7e43b26e5752a31e42650c45e5d37ec"
            },
            "created_at": 1705293862.0875945,
            "compiled_code": "\n\n\n\nselect\n    *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`\n\nwhere not(returns  >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_expression_is_true_q_f7e43b26e5752a31e42650c45e5d37ec`",
            "column_name": "returns",
            "file_key_name": "models.quest_4retention_daily_hd"
        },
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0.4c2c3b0ca4": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": " >= 0",
                    "column_name": "news",
                    "model": "{{ get_where_subquery(ref('quest_4retention_daily_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_utils.test_expression_is_true"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_4retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0.4c2c3b0ca4",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0.sql",
            "original_file_path": "models/core/schema_quest_4retention_daily_hd.yml",
            "name": "dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0",
            "alias": "dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_4retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_4retention_daily_hd.yml/dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.089913,
            "compiled_code": "\n\n\n\nselect\n    *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`\n\nwhere not(news  >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0`",
            "column_name": "news",
            "file_key_name": "models.quest_4retention_daily_hd"
        },
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_retention___0.dcee3a1078": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": " >= 0",
                    "column_name": "retention",
                    "model": "{{ get_where_subquery(ref('quest_4retention_daily_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_utils.test_expression_is_true"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_4retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_q_4366f941db2a6de84c5b6928ab97dc5b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_expression_is_true_quest_4retention_daily_hd_retention___0"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_retention___0.dcee3a1078",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_q_4366f941db2a6de84c5b6928ab97dc5b\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_expression_is_true_q_4366f941db2a6de84c5b6928ab97dc5b.sql",
            "original_file_path": "models/core/schema_quest_4retention_daily_hd.yml",
            "name": "dbt_utils_expression_is_true_quest_4retention_daily_hd_retention___0",
            "alias": "dbt_utils_expression_is_true_q_4366f941db2a6de84c5b6928ab97dc5b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_4retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_4retention_daily_hd.yml/dbt_utils_expression_is_true_q_4366f941db2a6de84c5b6928ab97dc5b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_expression_is_true_q_4366f941db2a6de84c5b6928ab97dc5b"
            },
            "created_at": 1705293862.0919027,
            "compiled_code": "\n\n\n\nselect\n    *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`\n\nwhere not(retention  >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_expression_is_true_q_4366f941db2a6de84c5b6928ab97dc5b`",
            "column_name": "retention",
            "file_key_name": "models.quest_4retention_daily_hd"
        },
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_churn_driver___0.b6ae81b862": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": " >= 0",
                    "column_name": "churn_driver",
                    "model": "{{ get_where_subquery(ref('quest_4retention_daily_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_utils.test_expression_is_true"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_4retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_q_1df754b9de74ffc972f3fbbf98ac4749",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_expression_is_true_quest_4retention_daily_hd_churn_driver___0"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_churn_driver___0.b6ae81b862",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_q_1df754b9de74ffc972f3fbbf98ac4749\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_expression_is_true_q_1df754b9de74ffc972f3fbbf98ac4749.sql",
            "original_file_path": "models/core/schema_quest_4retention_daily_hd.yml",
            "name": "dbt_utils_expression_is_true_quest_4retention_daily_hd_churn_driver___0",
            "alias": "dbt_utils_expression_is_true_q_1df754b9de74ffc972f3fbbf98ac4749",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_4retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_4retention_daily_hd.yml/dbt_utils_expression_is_true_q_1df754b9de74ffc972f3fbbf98ac4749.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_expression_is_true_q_1df754b9de74ffc972f3fbbf98ac4749"
            },
            "created_at": 1705293862.0941176,
            "compiled_code": "\n\n\n\nselect\n    *\nfrom `sipher-data-testing`.`tmp_dbt`.`quest_4retention_daily_hd`\n\nwhere not(churn_driver  >= 0)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_expression_is_true_q_1df754b9de74ffc972f3fbbf98ac4749`",
            "column_name": "churn_driver",
            "file_key_name": "models.quest_4retention_daily_hd"
        },
        "test.dbt_sipher.dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date.1be5792482": {
            "test_metadata": {
                "name": "not_null_proportion",
                "kwargs": {
                    "at_least": 0.8,
                    "column_name": "event_date",
                    "model": "{{ get_where_subquery(ref('game_dashboard_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_not_null_proportion",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.game_dashboard_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date.1be5792482",
            "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date.sql",
            "original_file_path": "models/core/schema_game_dashboard_hd.yml",
            "name": "dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date",
            "alias": "dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "game_dashboard_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_game_dashboard_hd.yml/dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0968416,
            "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when event_date is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from `sipher-data-testing`.`tmp_dbt`.`game_dashboard_hd`\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.8 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date`",
            "column_name": "event_date",
            "file_key_name": "models.game_dashboard_hd"
        },
        "test.dbt_sipher.not_null_spaceship_claimable_lootbox_tokenId.2603bfe82b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "tokenId",
                    "model": "{{ get_where_subquery(ref('spaceship_claimable_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.spaceship_claimable_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_spaceship_claimable_lootbox_tokenId"
            ],
            "unique_id": "test.dbt_sipher.not_null_spaceship_claimable_lootbox_tokenId.2603bfe82b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_spaceship_claimable_lootbox_tokenId.sql",
            "original_file_path": "models/core/schema_spaceship_claimable_lootbox.yml",
            "name": "not_null_spaceship_claimable_lootbox_tokenId",
            "alias": "not_null_spaceship_claimable_lootbox_tokenId",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "spaceship_claimable_lootbox"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_spaceship_claimable_lootbox.yml/not_null_spaceship_claimable_lootbox_tokenId.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.0995915,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`spaceship_claimable_lootbox`\nwhere tokenId is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_spaceship_claimable_lootbox_tokenId`",
            "column_name": "tokenId",
            "file_key_name": "models.spaceship_claimable_lootbox"
        },
        "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_tokenId__0__1__2__3__4__5__6___1.fa05a8b96b": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "-1"
                    ],
                    "column_name": "tokenId",
                    "model": "{{ get_where_subquery(ref('spaceship_claimable_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.spaceship_claimable_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_spaceship_clai_681bc2113e4fef9dd5ec2f1251db00b6",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "accepted_values_spaceship_claimable_lootbox_tokenId__0__1__2__3__4__5__6___1"
            ],
            "unique_id": "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_tokenId__0__1__2__3__4__5__6___1.fa05a8b96b",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_spaceship_clai_681bc2113e4fef9dd5ec2f1251db00b6\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "accepted_values_spaceship_clai_681bc2113e4fef9dd5ec2f1251db00b6.sql",
            "original_file_path": "models/core/schema_spaceship_claimable_lootbox.yml",
            "name": "accepted_values_spaceship_claimable_lootbox_tokenId__0__1__2__3__4__5__6___1",
            "alias": "accepted_values_spaceship_clai_681bc2113e4fef9dd5ec2f1251db00b6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "spaceship_claimable_lootbox"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_spaceship_claimable_lootbox.yml/accepted_values_spaceship_clai_681bc2113e4fef9dd5ec2f1251db00b6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "accepted_values_spaceship_clai_681bc2113e4fef9dd5ec2f1251db00b6"
            },
            "created_at": 1705293862.100421,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tokenId as value_field,\n        count(*) as n_records\n\n    from `sipher-data-testing`.`tmp_dbt`.`spaceship_claimable_lootbox`\n    group by tokenId\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1','2','3','4','5','6','-1'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`accepted_values_spaceship_clai_681bc2113e4fef9dd5ec2f1251db00b6`",
            "column_name": "tokenId",
            "file_key_name": "models.spaceship_claimable_lootbox"
        },
        "test.dbt_sipher.not_null_spaceship_claimable_lootbox_lootbox_type.cb32e86218": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lootbox_type",
                    "model": "{{ get_where_subquery(ref('spaceship_claimable_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.spaceship_claimable_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_spaceship_claimable_lootbox_lootbox_type"
            ],
            "unique_id": "test.dbt_sipher.not_null_spaceship_claimable_lootbox_lootbox_type.cb32e86218",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_spaceship_claimable_lootbox_lootbox_type.sql",
            "original_file_path": "models/core/schema_spaceship_claimable_lootbox.yml",
            "name": "not_null_spaceship_claimable_lootbox_lootbox_type",
            "alias": "not_null_spaceship_claimable_lootbox_lootbox_type",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "spaceship_claimable_lootbox"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_spaceship_claimable_lootbox.yml/not_null_spaceship_claimable_lootbox_lootbox_type.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1038666,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`spaceship_claimable_lootbox`\nwhere lootbox_type is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_spaceship_claimable_lootbox_lootbox_type`",
            "column_name": "lootbox_type",
            "file_key_name": "models.spaceship_claimable_lootbox"
        },
        "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_lootbox_type__Akagi__Alice__Flik_Flak__Ahab__Zed__Baron__Tunku__Mystery.2e9e808efe": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "Akagi",
                        "Alice",
                        "Flik Flak",
                        "Ahab",
                        "Zed",
                        "Baron",
                        "Tunku",
                        "Mystery"
                    ],
                    "column_name": "lootbox_type",
                    "model": "{{ get_where_subquery(ref('spaceship_claimable_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.spaceship_claimable_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_spaceship_clai_37ff6e073fe334c2a03901b45a279269",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "accepted_values_spaceship_claimable_lootbox_lootbox_type__Akagi__Alice__Flik_Flak__Ahab__Zed__Baron__Tunku__Mystery"
            ],
            "unique_id": "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_lootbox_type__Akagi__Alice__Flik_Flak__Ahab__Zed__Baron__Tunku__Mystery.2e9e808efe",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_spaceship_clai_37ff6e073fe334c2a03901b45a279269\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "accepted_values_spaceship_clai_37ff6e073fe334c2a03901b45a279269.sql",
            "original_file_path": "models/core/schema_spaceship_claimable_lootbox.yml",
            "name": "accepted_values_spaceship_claimable_lootbox_lootbox_type__Akagi__Alice__Flik_Flak__Ahab__Zed__Baron__Tunku__Mystery",
            "alias": "accepted_values_spaceship_clai_37ff6e073fe334c2a03901b45a279269",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "spaceship_claimable_lootbox"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_spaceship_claimable_lootbox.yml/accepted_values_spaceship_clai_37ff6e073fe334c2a03901b45a279269.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "accepted_values_spaceship_clai_37ff6e073fe334c2a03901b45a279269"
            },
            "created_at": 1705293862.1046832,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        lootbox_type as value_field,\n        count(*) as n_records\n\n    from `sipher-data-testing`.`tmp_dbt`.`spaceship_claimable_lootbox`\n    group by lootbox_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Akagi','Alice','Flik Flak','Ahab','Zed','Baron','Tunku','Mystery'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`accepted_values_spaceship_clai_37ff6e073fe334c2a03901b45a279269`",
            "column_name": "lootbox_type",
            "file_key_name": "models.spaceship_claimable_lootbox"
        },
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_platform.9283355619": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "platform",
                    "model": "{{ get_where_subquery(ref('staking_rewards_total_claimed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.staking_rewards_total_claimed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_staking_rewards_total_claimed_platform"
            ],
            "unique_id": "test.dbt_sipher.not_null_staking_rewards_total_claimed_platform.9283355619",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_staking_rewards_total_claimed_platform.sql",
            "original_file_path": "models/core/schema_staking_rewards_total_claimed.yml",
            "name": "not_null_staking_rewards_total_claimed_platform",
            "alias": "not_null_staking_rewards_total_claimed_platform",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staking_rewards_total_claimed"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_staking_rewards_total_claimed.yml/not_null_staking_rewards_total_claimed_platform.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1092827,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`staking_rewards_total_claimed`\nwhere platform is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_staking_rewards_total_claimed_platform`",
            "column_name": "platform",
            "file_key_name": "models.staking_rewards_total_claimed"
        },
        "test.dbt_sipher.accepted_values_staking_rewards_total_claimed_platform__lp_uniswap__single_side__lp_kyberswap.2e9c8221a4": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "lp_uniswap",
                        "single_side",
                        "lp_kyberswap"
                    ],
                    "column_name": "platform",
                    "model": "{{ get_where_subquery(ref('staking_rewards_total_claimed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.staking_rewards_total_claimed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "accepted_values_staking_reward_c85dda05a3f778f98331ad6156d956cd",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "accepted_values_staking_rewards_total_claimed_platform__lp_uniswap__single_side__lp_kyberswap"
            ],
            "unique_id": "test.dbt_sipher.accepted_values_staking_rewards_total_claimed_platform__lp_uniswap__single_side__lp_kyberswap.2e9c8221a4",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_staking_reward_c85dda05a3f778f98331ad6156d956cd\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "accepted_values_staking_reward_c85dda05a3f778f98331ad6156d956cd.sql",
            "original_file_path": "models/core/schema_staking_rewards_total_claimed.yml",
            "name": "accepted_values_staking_rewards_total_claimed_platform__lp_uniswap__single_side__lp_kyberswap",
            "alias": "accepted_values_staking_reward_c85dda05a3f778f98331ad6156d956cd",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staking_rewards_total_claimed"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_staking_rewards_total_claimed.yml/accepted_values_staking_reward_c85dda05a3f778f98331ad6156d956cd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "accepted_values_staking_reward_c85dda05a3f778f98331ad6156d956cd"
            },
            "created_at": 1705293862.1101074,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        platform as value_field,\n        count(*) as n_records\n\n    from `sipher-data-testing`.`tmp_dbt`.`staking_rewards_total_claimed`\n    group by platform\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'lp_uniswap','single_side','lp_kyberswap'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`accepted_values_staking_reward_c85dda05a3f778f98331ad6156d956cd`",
            "column_name": "platform",
            "file_key_name": "models.staking_rewards_total_claimed"
        },
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_first_date_of_month.c9084e1172": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "first_date_of_month",
                    "model": "{{ get_where_subquery(ref('staking_rewards_total_claimed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.staking_rewards_total_claimed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_staking_rewards_total_claimed_first_date_of_month"
            ],
            "unique_id": "test.dbt_sipher.not_null_staking_rewards_total_claimed_first_date_of_month.c9084e1172",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_staking_rewards_total_claimed_first_date_of_month.sql",
            "original_file_path": "models/core/schema_staking_rewards_total_claimed.yml",
            "name": "not_null_staking_rewards_total_claimed_first_date_of_month",
            "alias": "not_null_staking_rewards_total_claimed_first_date_of_month",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staking_rewards_total_claimed"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_staking_rewards_total_claimed.yml/not_null_staking_rewards_total_claimed_first_date_of_month.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1127238,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`staking_rewards_total_claimed`\nwhere first_date_of_month is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_staking_rewards_total_claimed_first_date_of_month`",
            "column_name": "first_date_of_month",
            "file_key_name": "models.staking_rewards_total_claimed"
        },
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_wallet_address.113065f0a7": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "wallet_address",
                    "model": "{{ get_where_subquery(ref('staking_rewards_total_claimed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.staking_rewards_total_claimed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_staking_rewards_total_claimed_wallet_address"
            ],
            "unique_id": "test.dbt_sipher.not_null_staking_rewards_total_claimed_wallet_address.113065f0a7",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_staking_rewards_total_claimed_wallet_address.sql",
            "original_file_path": "models/core/schema_staking_rewards_total_claimed.yml",
            "name": "not_null_staking_rewards_total_claimed_wallet_address",
            "alias": "not_null_staking_rewards_total_claimed_wallet_address",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staking_rewards_total_claimed"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_staking_rewards_total_claimed.yml/not_null_staking_rewards_total_claimed_wallet_address.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1135097,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`staking_rewards_total_claimed`\nwhere wallet_address is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_staking_rewards_total_claimed_wallet_address`",
            "column_name": "wallet_address",
            "file_key_name": "models.staking_rewards_total_claimed"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_staking_rewards_total_claimed_wallet_address__43__41__wallet_address_is_not_null__True.90c93fd954": {
            "test_metadata": {
                "name": "expect_column_value_lengths_to_be_between",
                "kwargs": {
                    "min_value": 41,
                    "max_value": 43,
                    "strictly": true,
                    "row_condition": "wallet_address is not null",
                    "column_name": "wallet_address",
                    "model": "{{ get_where_subquery(ref('staking_rewards_total_claimed')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.staking_rewards_total_claimed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_247e79b1b3dc5d8397d9ccf466ef644c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_value_lengths_to_be_between_staking_rewards_total_claimed_wallet_address__43__41__wallet_address_is_not_null__True"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_staking_rewards_total_claimed_wallet_address__43__41__wallet_address_is_not_null__True.90c93fd954",
            "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_247e79b1b3dc5d8397d9ccf466ef644c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_247e79b1b3dc5d8397d9ccf466ef644c.sql",
            "original_file_path": "models/core/schema_staking_rewards_total_claimed.yml",
            "name": "dbt_expectations_expect_column_value_lengths_to_be_between_staking_rewards_total_claimed_wallet_address__43__41__wallet_address_is_not_null__True",
            "alias": "dbt_expectations_expect_column_247e79b1b3dc5d8397d9ccf466ef644c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staking_rewards_total_claimed"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_staking_rewards_total_claimed.yml/dbt_expectations_expect_column_247e79b1b3dc5d8397d9ccf466ef644c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_247e79b1b3dc5d8397d9ccf466ef644c"
            },
            "created_at": 1705293862.114302,
            "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        wallet_address\n    ) > 41 and length(\n        wallet_address\n    ) < 43\n)\n as expression\n\n\n    from `sipher-data-testing`.`tmp_dbt`.`staking_rewards_total_claimed`\n    where\n        wallet_address is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_247e79b1b3dc5d8397d9ccf466ef644c`",
            "column_name": "wallet_address",
            "file_key_name": "models.staking_rewards_total_claimed"
        },
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_total_claimed.b760b08821": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "total_claimed",
                    "model": "{{ get_where_subquery(ref('staking_rewards_total_claimed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.staking_rewards_total_claimed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_staking_rewards_total_claimed_total_claimed"
            ],
            "unique_id": "test.dbt_sipher.not_null_staking_rewards_total_claimed_total_claimed.b760b08821",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_staking_rewards_total_claimed_total_claimed.sql",
            "original_file_path": "models/core/schema_staking_rewards_total_claimed.yml",
            "name": "not_null_staking_rewards_total_claimed_total_claimed",
            "alias": "not_null_staking_rewards_total_claimed_total_claimed",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "staking_rewards_total_claimed"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_staking_rewards_total_claimed.yml/not_null_staking_rewards_total_claimed_total_claimed.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1168084,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`staking_rewards_total_claimed`\nwhere total_claimed is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_staking_rewards_total_claimed_total_claimed`",
            "column_name": "total_claimed",
            "file_key_name": "models.staking_rewards_total_claimed"
        },
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_date.24daeffd16": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "act_date",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_DAU')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_DAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_dashboard_DAU_act_date"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_date.24daeffd16",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_dashboard_DAU_act_date.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_DAU.yml",
            "name": "not_null_atherlabs_dashboard_DAU_act_date",
            "alias": "not_null_atherlabs_dashboard_DAU_act_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_DAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_DAU.yml/not_null_atherlabs_dashboard_DAU_act_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1188211,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_DAU`\nwhere act_date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_dashboard_DAU_act_date`",
            "column_name": "act_date",
            "file_key_name": "models.atherlabs_dashboard_DAU"
        },
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_month.77ff189eab": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "act_month",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_DAU')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_DAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_dashboard_DAU_act_month"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_month.77ff189eab",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_dashboard_DAU_act_month.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_DAU.yml",
            "name": "not_null_atherlabs_dashboard_DAU_act_month",
            "alias": "not_null_atherlabs_dashboard_DAU_act_month",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_DAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_DAU.yml/not_null_atherlabs_dashboard_DAU_act_month.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1196344,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_DAU`\nwhere act_month is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_dashboard_DAU_act_month`",
            "column_name": "act_month",
            "file_key_name": "models.atherlabs_dashboard_DAU"
        },
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_DAU_act_month__12__1.2108c00134": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 1,
                    "max_value": 12,
                    "column_name": "act_month",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_DAU')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_DAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_ather_3d54267a5c6bd7f19a2861cbc53a60f3",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_accepted_range_atherlabs_dashboard_DAU_act_month__12__1"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_DAU_act_month__12__1.2108c00134",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_ather_3d54267a5c6bd7f19a2861cbc53a60f3\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_accepted_range_ather_3d54267a5c6bd7f19a2861cbc53a60f3.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_DAU.yml",
            "name": "dbt_utils_accepted_range_atherlabs_dashboard_DAU_act_month__12__1",
            "alias": "dbt_utils_accepted_range_ather_3d54267a5c6bd7f19a2861cbc53a60f3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_DAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_DAU.yml/dbt_utils_accepted_range_ather_3d54267a5c6bd7f19a2861cbc53a60f3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_accepted_range_ather_3d54267a5c6bd7f19a2861cbc53a60f3"
            },
            "created_at": 1705293862.1204193,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_DAU`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not act_month >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not act_month <= 12\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_accepted_range_ather_3d54267a5c6bd7f19a2861cbc53a60f3`",
            "column_name": "act_month",
            "file_key_name": "models.atherlabs_dashboard_DAU"
        },
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_id_cnt.cf331d33f3": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_id_cnt",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_DAU')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_DAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_dashboard_DAU_user_id_cnt"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_id_cnt.cf331d33f3",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_dashboard_DAU_user_id_cnt.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_DAU.yml",
            "name": "not_null_atherlabs_dashboard_DAU_user_id_cnt",
            "alias": "not_null_atherlabs_dashboard_DAU_user_id_cnt",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_DAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_DAU.yml/not_null_atherlabs_dashboard_DAU_user_id_cnt.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.122991,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_DAU`\nwhere user_id_cnt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_dashboard_DAU_user_id_cnt`",
            "column_name": "user_id_cnt",
            "file_key_name": "models.atherlabs_dashboard_DAU"
        },
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt.8c3a55d3e2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_pseudo_id_cnt",
                    "model": "{{ get_where_subquery(ref('atherlabs_dashboard_DAU')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.atherlabs_dashboard_DAU"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt"
            ],
            "unique_id": "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt.8c3a55d3e2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt.sql",
            "original_file_path": "models/core/schema_atherlabs_dashboard_DAU.yml",
            "name": "not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt",
            "alias": "not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "atherlabs_dashboard_DAU"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_atherlabs_dashboard_DAU.yml/not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1237998,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`atherlabs_dashboard_DAU`\nwhere user_pseudo_id_cnt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt`",
            "column_name": "user_pseudo_id_cnt",
            "file_key_name": "models.atherlabs_dashboard_DAU"
        },
        "test.dbt_sipher.dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id.937e86775c": {
            "test_metadata": {
                "name": "not_null_proportion",
                "kwargs": {
                    "at_least": 0.15,
                    "column_name": "user_id",
                    "model": "{{ get_where_subquery(ref('raw_loyalty_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_not_null_proportion",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.raw_loyalty_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id.937e86775c",
            "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id.sql",
            "original_file_path": "models/core/schema_raw_loyalty_hd.yml",
            "name": "dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id",
            "alias": "dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "raw_loyalty_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_raw_loyalty_hd.yml/dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1254206,
            "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when user_id is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from `sipher-data-testing`.`tmp_dbt`.`raw_loyalty_hd`\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.15 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id`",
            "column_name": "user_id",
            "file_key_name": "models.raw_loyalty_hd"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_raw_loyalty_hd_wallet_address__43__41__wallet_address_is_not_null__True.bcb332171a": {
            "test_metadata": {
                "name": "expect_column_value_lengths_to_be_between",
                "kwargs": {
                    "min_value": 41,
                    "max_value": 43,
                    "strictly": true,
                    "row_condition": "wallet_address is not null",
                    "column_name": "wallet_address",
                    "model": "{{ get_where_subquery(ref('raw_loyalty_hd')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.raw_loyalty_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_89753ef1bb7a18d4b2e4f2417af20d4e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_value_lengths_to_be_between_raw_loyalty_hd_wallet_address__43__41__wallet_address_is_not_null__True"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_raw_loyalty_hd_wallet_address__43__41__wallet_address_is_not_null__True.bcb332171a",
            "raw_code": "{{ dbt_expectations.test_expect_column_value_lengths_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_89753ef1bb7a18d4b2e4f2417af20d4e\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_89753ef1bb7a18d4b2e4f2417af20d4e.sql",
            "original_file_path": "models/core/schema_raw_loyalty_hd.yml",
            "name": "dbt_expectations_expect_column_value_lengths_to_be_between_raw_loyalty_hd_wallet_address__43__41__wallet_address_is_not_null__True",
            "alias": "dbt_expectations_expect_column_89753ef1bb7a18d4b2e4f2417af20d4e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "raw_loyalty_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_raw_loyalty_hd.yml/dbt_expectations_expect_column_89753ef1bb7a18d4b2e4f2417af20d4e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_89753ef1bb7a18d4b2e4f2417af20d4e"
            },
            "created_at": 1705293862.1275802,
            "compiled_code": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and length(\n        wallet_address\n    ) > 41 and length(\n        wallet_address\n    ) < 43\n)\n as expression\n\n\n    from `sipher-data-testing`.`tmp_dbt`.`raw_loyalty_hd`\n    where\n        wallet_address is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_89753ef1bb7a18d4b2e4f2417af20d4e`",
            "column_name": "wallet_address",
            "file_key_name": "models.raw_loyalty_hd"
        },
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_hour.473c2ab225": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "hour",
                    "model": "{{ get_where_subquery(ref('SIPHER_user_activeness_by_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_user_activeness_by_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_SIPHER_user_activeness_by_hour_hour"
            ],
            "unique_id": "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_hour.473c2ab225",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_SIPHER_user_activeness_by_hour_hour.sql",
            "original_file_path": "models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "name": "not_null_SIPHER_user_activeness_by_hour_hour",
            "alias": "not_null_SIPHER_user_activeness_by_hour_hour",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_user_activeness_by_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_user_activeness_by_hour.yml/not_null_SIPHER_user_activeness_by_hour_hour.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1310093,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`SIPHER_user_activeness_by_hour`\nwhere hour is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_SIPHER_user_activeness_by_hour_hour`",
            "column_name": "hour",
            "file_key_name": "models.SIPHER_user_activeness_by_hour"
        },
        "test.dbt_sipher.dbt_utils_accepted_range_SIPHER_user_activeness_by_hour_hour__23__0.baae8606a5": {
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": 0,
                    "max_value": 23,
                    "column_name": "hour",
                    "model": "{{ get_where_subquery(ref('SIPHER_user_activeness_by_hour')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_user_activeness_by_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_accepted_range_SIPHE_57948c0d0c44d8fea1bc85cc2e7ac393",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_accepted_range_SIPHER_user_activeness_by_hour_hour__23__0"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_accepted_range_SIPHER_user_activeness_by_hour_hour__23__0.baae8606a5",
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_SIPHE_57948c0d0c44d8fea1bc85cc2e7ac393\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_accepted_range_SIPHE_57948c0d0c44d8fea1bc85cc2e7ac393.sql",
            "original_file_path": "models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "name": "dbt_utils_accepted_range_SIPHER_user_activeness_by_hour_hour__23__0",
            "alias": "dbt_utils_accepted_range_SIPHE_57948c0d0c44d8fea1bc85cc2e7ac393",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_user_activeness_by_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_user_activeness_by_hour.yml/dbt_utils_accepted_range_SIPHE_57948c0d0c44d8fea1bc85cc2e7ac393.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_accepted_range_SIPHE_57948c0d0c44d8fea1bc85cc2e7ac393"
            },
            "created_at": 1705293862.1319587,
            "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from `sipher-data-testing`.`tmp_dbt`.`SIPHER_user_activeness_by_hour`\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not hour <= 23\n)\n\nselect *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_accepted_range_SIPHE_57948c0d0c44d8fea1bc85cc2e7ac393`",
            "column_name": "hour",
            "file_key_name": "models.SIPHER_user_activeness_by_hour"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_hour__INT64.a1cfbd9a09": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "hour",
                    "model": "{{ get_where_subquery(ref('SIPHER_user_activeness_by_hour')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_user_activeness_by_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_b155c888f8c43b79f96e08dc9b63da80",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_hour__INT64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_hour__INT64.a1cfbd9a09",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b155c888f8c43b79f96e08dc9b63da80\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_b155c888f8c43b79f96e08dc9b63da80.sql",
            "original_file_path": "models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_hour__INT64",
            "alias": "dbt_expectations_expect_column_b155c888f8c43b79f96e08dc9b63da80",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_user_activeness_by_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_user_activeness_by_hour.yml/dbt_expectations_expect_column_b155c888f8c43b79f96e08dc9b63da80.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_b155c888f8c43b79f96e08dc9b63da80"
            },
            "created_at": 1705293862.1340015,
            "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'HOUR'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_b155c888f8c43b79f96e08dc9b63da80`",
            "column_name": "hour",
            "file_key_name": "models.SIPHER_user_activeness_by_hour"
        },
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_user_count.3e4602b6f6": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_count",
                    "model": "{{ get_where_subquery(ref('SIPHER_user_activeness_by_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_user_activeness_by_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_SIPHER_user_activeness_by_hour_user_count"
            ],
            "unique_id": "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_user_count.3e4602b6f6",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_SIPHER_user_activeness_by_hour_user_count.sql",
            "original_file_path": "models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "name": "not_null_SIPHER_user_activeness_by_hour_user_count",
            "alias": "not_null_SIPHER_user_activeness_by_hour_user_count",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_user_activeness_by_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_user_activeness_by_hour.yml/not_null_SIPHER_user_activeness_by_hour_user_count.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.136444,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`SIPHER_user_activeness_by_hour`\nwhere user_count is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_SIPHER_user_activeness_by_hour_user_count`",
            "column_name": "user_count",
            "file_key_name": "models.SIPHER_user_activeness_by_hour"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_user_count__INT64.2ecc15ea27": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "user_count",
                    "model": "{{ get_where_subquery(ref('SIPHER_user_activeness_by_hour')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_user_activeness_by_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_1a241bbe0ee0f5b60accb62ee2c54786",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_user_count__INT64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_user_count__INT64.2ecc15ea27",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1a241bbe0ee0f5b60accb62ee2c54786\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_1a241bbe0ee0f5b60accb62ee2c54786.sql",
            "original_file_path": "models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_user_count__INT64",
            "alias": "dbt_expectations_expect_column_1a241bbe0ee0f5b60accb62ee2c54786",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_user_activeness_by_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_user_activeness_by_hour.yml/dbt_expectations_expect_column_1a241bbe0ee0f5b60accb62ee2c54786.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_1a241bbe0ee0f5b60accb62ee2c54786"
            },
            "created_at": 1705293862.1372588,
            "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'USER_COUNT'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_1a241bbe0ee0f5b60accb62ee2c54786`",
            "column_name": "user_count",
            "file_key_name": "models.SIPHER_user_activeness_by_hour"
        },
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_event_count.e2d2d6113b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_count",
                    "model": "{{ get_where_subquery(ref('SIPHER_user_activeness_by_hour')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_user_activeness_by_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_SIPHER_user_activeness_by_hour_event_count"
            ],
            "unique_id": "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_event_count.e2d2d6113b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_SIPHER_user_activeness_by_hour_event_count.sql",
            "original_file_path": "models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "name": "not_null_SIPHER_user_activeness_by_hour_event_count",
            "alias": "not_null_SIPHER_user_activeness_by_hour_event_count",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_user_activeness_by_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_user_activeness_by_hour.yml/not_null_SIPHER_user_activeness_by_hour_event_count.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1396117,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`SIPHER_user_activeness_by_hour`\nwhere event_count is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_SIPHER_user_activeness_by_hour_event_count`",
            "column_name": "event_count",
            "file_key_name": "models.SIPHER_user_activeness_by_hour"
        },
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_event_count__INT64.7429bda734": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "INT64",
                    "column_name": "event_count",
                    "model": "{{ get_where_subquery(ref('SIPHER_user_activeness_by_hour')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_user_activeness_by_hour"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_expect_column_ab06bd676b93642b096d3e677473a227",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_event_count__INT64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_event_count__INT64.7429bda734",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ab06bd676b93642b096d3e677473a227\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_expect_column_ab06bd676b93642b096d3e677473a227.sql",
            "original_file_path": "models/core/schema_SIPHER_user_activeness_by_hour.yml",
            "name": "dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_event_count__INT64",
            "alias": "dbt_expectations_expect_column_ab06bd676b93642b096d3e677473a227",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_user_activeness_by_hour"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_user_activeness_by_hour.yml/dbt_expectations_expect_column_ab06bd676b93642b096d3e677473a227.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_expect_column_ab06bd676b93642b096d3e677473a227"
            },
            "created_at": 1705293862.1404514,
            "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_COUNT'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_expect_column_ab06bd676b93642b096d3e677473a227`",
            "column_name": "event_count",
            "file_key_name": "models.SIPHER_user_activeness_by_hour"
        },
        "test.dbt_sipher.not_null_SIPHER_token_holders_overview_user_address.a982aeb387": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_address",
                    "model": "{{ get_where_subquery(ref('SIPHER_token_holders_overview')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.SIPHER_token_holders_overview"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "not_null_SIPHER_token_holders_overview_user_address"
            ],
            "unique_id": "test.dbt_sipher.not_null_SIPHER_token_holders_overview_user_address.a982aeb387",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_SIPHER_token_holders_overview_user_address.sql",
            "original_file_path": "models/core/schema_SIPHER_token_holders_overview.yml",
            "name": "not_null_SIPHER_token_holders_overview_user_address",
            "alias": "not_null_SIPHER_token_holders_overview_user_address",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "SIPHER_token_holders_overview"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_SIPHER_token_holders_overview.yml/not_null_SIPHER_token_holders_overview_user_address.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.143287,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`SIPHER_token_holders_overview`\nwhere user_address is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_SIPHER_token_holders_overview_user_address`",
            "column_name": "user_address",
            "file_key_name": "models.SIPHER_token_holders_overview"
        },
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_daily_hd_0_8__period.cce60c36d4": {
            "test_metadata": {
                "name": "not_null_proportion",
                "kwargs": {
                    "at_least": 0.8,
                    "column_name": "period",
                    "model": "{{ get_where_subquery(ref('quest_retention_daily_hd')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_not_null_proportion",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_not_null_proportion__4b5c6539284268126f85afbf7cf76f1e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "dbt_utils_not_null_proportion_quest_retention_daily_hd_0_8__period"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_daily_hd_0_8__period.cce60c36d4",
            "raw_code": "{{ dbt_utils.test_not_null_proportion(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_not_null_proportion__4b5c6539284268126f85afbf7cf76f1e\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_not_null_proportion__4b5c6539284268126f85afbf7cf76f1e.sql",
            "original_file_path": "models/core/schema_quest_retention_daily_hd.yml",
            "name": "dbt_utils_not_null_proportion_quest_retention_daily_hd_0_8__period",
            "alias": "dbt_utils_not_null_proportion__4b5c6539284268126f85afbf7cf76f1e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_retention_daily_hd.yml/dbt_utils_not_null_proportion__4b5c6539284268126f85afbf7cf76f1e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_not_null_proportion__4b5c6539284268126f85afbf7cf76f1e"
            },
            "created_at": 1705293862.1446028,
            "compiled_code": "\n\n\n\n\n\n\n\nwith validation as (\n  select\n    \n    sum(case when period is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from `sipher-data-testing`.`tmp_dbt`.`quest_retention_daily_hd`\n  \n),\nvalidation_errors as (\n  select\n    \n    not_null_proportion\n  from validation\n  where not_null_proportion < 0.8 or not_null_proportion > 1\n)\nselect\n  *\nfrom validation_errors\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_not_null_proportion__4b5c6539284268126f85afbf7cf76f1e`",
            "column_name": "period",
            "file_key_name": "models.quest_retention_daily_hd"
        },
        "test.dbt_sipher.unique_quest_retention_daily_hd_period.49283d57a7": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "period",
                    "model": "{{ get_where_subquery(ref('quest_retention_daily_hd')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.quest_retention_daily_hd"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "core",
                "unique_quest_retention_daily_hd_period"
            ],
            "unique_id": "test.dbt_sipher.unique_quest_retention_daily_hd_period.49283d57a7",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "unique_quest_retention_daily_hd_period.sql",
            "original_file_path": "models/core/schema_quest_retention_daily_hd.yml",
            "name": "unique_quest_retention_daily_hd_period",
            "alias": "unique_quest_retention_daily_hd_period",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "quest_retention_daily_hd"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/core/schema_quest_retention_daily_hd.yml/unique_quest_retention_daily_hd_period.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1467557,
            "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select period as unique_field\n  from `sipher-data-testing`.`tmp_dbt`.`quest_retention_daily_hd`\n  where period is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`unique_quest_retention_daily_hd_period`",
            "column_name": "period",
            "file_key_name": "models.quest_retention_daily_hd"
        },
        "test.dbt_sipher.not_null_dim_artventure_user_user_id.184c7e792d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_id",
                    "model": "{{ get_where_subquery(ref('dim_artventure_user')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.dim_artventure_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "not_null_dim_artventure_user_user_id"
            ],
            "unique_id": "test.dbt_sipher.not_null_dim_artventure_user_user_id.184c7e792d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_dim_artventure_user_user_id.sql",
            "original_file_path": "models/marts/artventure/schema_artventure.yml",
            "name": "not_null_dim_artventure_user_user_id",
            "alias": "not_null_dim_artventure_user_user_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_artventure_user"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/schema_artventure.yml/not_null_dim_artventure_user_user_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1495342,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`dim_artventure_user`\nwhere user_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_dim_artventure_user_user_id`",
            "column_name": "user_id",
            "file_key_name": "models.dim_artventure_user"
        },
        "test.dbt_sipher.not_null_dim_artventure_user_user_email.f79283804d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_email",
                    "model": "{{ get_where_subquery(ref('dim_artventure_user')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.dim_artventure_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "not_null_dim_artventure_user_user_email"
            ],
            "unique_id": "test.dbt_sipher.not_null_dim_artventure_user_user_email.f79283804d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_dim_artventure_user_user_email.sql",
            "original_file_path": "models/marts/artventure/schema_artventure.yml",
            "name": "not_null_dim_artventure_user_user_email",
            "alias": "not_null_dim_artventure_user_user_email",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dim_artventure_user"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/schema_artventure.yml/not_null_dim_artventure_user_user_email.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1503522,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`dim_artventure_user`\nwhere user_email is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_dim_artventure_user_user_email`",
            "column_name": "user_email",
            "file_key_name": "models.dim_artventure_user"
        },
        "test.dbt_sipher.not_null_fct_artventure_task_events_date.9312343eaf": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "date",
                    "model": "{{ get_where_subquery(ref('fct_artventure_task_events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_artventure_task_events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "not_null_fct_artventure_task_events_date"
            ],
            "unique_id": "test.dbt_sipher.not_null_fct_artventure_task_events_date.9312343eaf",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_fct_artventure_task_events_date.sql",
            "original_file_path": "models/marts/artventure/schema_artventure.yml",
            "name": "not_null_fct_artventure_task_events_date",
            "alias": "not_null_fct_artventure_task_events_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_artventure_task_events"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/schema_artventure.yml/not_null_fct_artventure_task_events_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1511319,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`fct_artventure_task_events`\nwhere date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_fct_artventure_task_events_date`",
            "column_name": "date",
            "file_key_name": "models.fct_artventure_task_events"
        },
        "test.dbt_sipher.not_null_fct_artventure_task_events_task_id.2742389359": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "task_id",
                    "model": "{{ get_where_subquery(ref('fct_artventure_task_events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_artventure_task_events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "not_null_fct_artventure_task_events_task_id"
            ],
            "unique_id": "test.dbt_sipher.not_null_fct_artventure_task_events_task_id.2742389359",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_fct_artventure_task_events_task_id.sql",
            "original_file_path": "models/marts/artventure/schema_artventure.yml",
            "name": "not_null_fct_artventure_task_events_task_id",
            "alias": "not_null_fct_artventure_task_events_task_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_artventure_task_events"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/schema_artventure.yml/not_null_fct_artventure_task_events_task_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1520283,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`fct_artventure_task_events`\nwhere task_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_fct_artventure_task_events_task_id`",
            "column_name": "task_id",
            "file_key_name": "models.fct_artventure_task_events"
        },
        "test.dbt_sipher.not_null_fct_artventure_task_events_status.6df6c766bb": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "status",
                    "model": "{{ get_where_subquery(ref('fct_artventure_task_events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_artventure_task_events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "not_null_fct_artventure_task_events_status"
            ],
            "unique_id": "test.dbt_sipher.not_null_fct_artventure_task_events_status.6df6c766bb",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_fct_artventure_task_events_status.sql",
            "original_file_path": "models/marts/artventure/schema_artventure.yml",
            "name": "not_null_fct_artventure_task_events_status",
            "alias": "not_null_fct_artventure_task_events_status",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_artventure_task_events"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/schema_artventure.yml/not_null_fct_artventure_task_events_status.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.15279,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`fct_artventure_task_events`\nwhere status is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_fct_artventure_task_events_status`",
            "column_name": "status",
            "file_key_name": "models.fct_artventure_task_events"
        },
        "test.dbt_sipher.not_null_fct_artventure_user_events_user_id.0dd9905f86": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_id",
                    "model": "{{ get_where_subquery(ref('fct_artventure_user_events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_artventure_user_events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "artventure",
                "not_null_fct_artventure_user_events_user_id"
            ],
            "unique_id": "test.dbt_sipher.not_null_fct_artventure_user_events_user_id.0dd9905f86",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "not_null_fct_artventure_user_events_user_id.sql",
            "original_file_path": "models/marts/artventure/schema_artventure.yml",
            "name": "not_null_fct_artventure_user_events_user_id",
            "alias": "not_null_fct_artventure_user_events_user_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_artventure_user_events"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/artventure/schema_artventure.yml/not_null_fct_artventure_user_events_user_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1535594,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-testing`.`tmp_dbt`.`fct_artventure_user_events`\nwhere user_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`not_null_fct_artventure_user_events_user_id`",
            "column_name": "user_id",
            "file_key_name": "models.fct_artventure_user_events"
        },
        "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_lvl_.1d3aac7e9a": {
            "test_metadata": {
                "name": "decode_dungeon_id_difficulty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('mart_level_design_lvl')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_decode_dungeon_id_difficulty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.mart_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "decode_dungeon_id_difficulty_mart_level_design_lvl_"
            ],
            "unique_id": "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_lvl_.1d3aac7e9a",
            "raw_code": "{{ test_decode_dungeon_id_difficulty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "decode_dungeon_id_difficulty_mart_level_design_lvl_.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_mart_level_design_lvl.yml",
            "name": "decode_dungeon_id_difficulty_mart_level_design_lvl_",
            "alias": "decode_dungeon_id_difficulty_mart_level_design_lvl_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "mart_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_mart_level_design_lvl.yml/decode_dungeon_id_difficulty_mart_level_design_lvl_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1546783,
            "compiled_code": "\nwith exceptions as (\n    SELECT distinct session_id, user_id, dungeon_id_difficulty \n    FROM`sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_lvl`\n    WHERE true\n    AND  REGEXP_CONTAINS(dungeon_id_difficulty, r'DUNGEON') \n    AND NOT REGEXP_CONTAINS(dungeon_id_difficulty, r'^\\d{2}')  \n    AND NOT REGEXP_CONTAINS(dungeon_id_difficulty, r'\\d{2}$')  \n)\n\nselect * from exceptions\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`decode_dungeon_id_difficulty_mart_level_design_lvl_`",
            "column_name": null,
            "file_key_name": "models.mart_level_design_lvl"
        },
        "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_.dd9bd89d6c": {
            "test_metadata": {
                "name": "equal_rowcount",
                "kwargs": {
                    "compare_model": "ref('fct_level_design_lvl')",
                    "model": "{{ get_where_subquery(ref('mart_level_design_lvl')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_equal_rowcount",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl",
                    "model.dbt_sipher.mart_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_equal_rowcount_mart__943bf13748c1ece4d07555d994402751",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "sum(coalesce(diff_count, 0))",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_.dd9bd89d6c",
            "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_mart__943bf13748c1ece4d07555d994402751\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_equal_rowcount_mart__943bf13748c1ece4d07555d994402751.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_mart_level_design_lvl.yml",
            "name": "dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_",
            "alias": "dbt_utils_equal_rowcount_mart__943bf13748c1ece4d07555d994402751",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ],
                [
                    "mart_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_mart_level_design_lvl.yml/dbt_utils_equal_rowcount_mart__943bf13748c1ece4d07555d994402751.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "fail_calc": "sum(coalesce(diff_count, 0))",
                "alias": "dbt_utils_equal_rowcount_mart__943bf13748c1ece4d07555d994402751"
            },
            "created_at": 1705293862.1567066,
            "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_lvl`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_equal_rowcount_mart__943bf13748c1ece4d07555d994402751`",
            "column_name": null,
            "file_key_name": "models.mart_level_design_lvl"
        },
        "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_gameplay_.e1ef903c28": {
            "test_metadata": {
                "name": "decode_dungeon_id_difficulty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('mart_level_design_gameplay')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_decode_dungeon_id_difficulty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.mart_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "decode_dungeon_id_difficulty_mart_level_design_gameplay_"
            ],
            "unique_id": "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_gameplay_.e1ef903c28",
            "raw_code": "{{ test_decode_dungeon_id_difficulty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "decode_dungeon_id_difficulty_mart_level_design_gameplay_.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_mart_level_design_gameplay.yml",
            "name": "decode_dungeon_id_difficulty_mart_level_design_gameplay_",
            "alias": "decode_dungeon_id_difficulty_mart_level_design_gameplay_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "mart_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_mart_level_design_gameplay.yml/decode_dungeon_id_difficulty_mart_level_design_gameplay_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1594386,
            "compiled_code": "\nwith exceptions as (\n    SELECT distinct session_id, user_id, dungeon_id_difficulty \n    FROM`sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`\n    WHERE true\n    AND  REGEXP_CONTAINS(dungeon_id_difficulty, r'DUNGEON') \n    AND NOT REGEXP_CONTAINS(dungeon_id_difficulty, r'^\\d{2}')  \n    AND NOT REGEXP_CONTAINS(dungeon_id_difficulty, r'\\d{2}$')  \n)\n\nselect * from exceptions\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`decode_dungeon_id_difficulty_mart_level_design_gameplay_`",
            "column_name": null,
            "file_key_name": "models.mart_level_design_gameplay"
        },
        "test.dbt_sipher.missing_dungeon_mart_level_design_gameplay_.6c251e9f3f": {
            "test_metadata": {
                "name": "missing_dungeon",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('mart_level_design_gameplay')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_missing_dungeon",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.mart_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "missing_dungeon_mart_level_design_gameplay_"
            ],
            "unique_id": "test.dbt_sipher.missing_dungeon_mart_level_design_gameplay_.6c251e9f3f",
            "raw_code": "{{ test_missing_dungeon(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "missing_dungeon_mart_level_design_gameplay_.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_mart_level_design_gameplay.yml",
            "name": "missing_dungeon_mart_level_design_gameplay_",
            "alias": "missing_dungeon_mart_level_design_gameplay_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "mart_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_mart_level_design_gameplay.yml/missing_dungeon_mart_level_design_gameplay_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.1612296,
            "compiled_code": "\n\nwith \n\ndungeon_id_difficulty as (\n  SELECT distinct dungeon_id_difficulty ,\n  dense_rank() over(order by dungeon_id_difficulty ) as stt\nFROM `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`\nWHERE true\nand REGEXP_CONTAINS(UPPER(dungeon_id),  'FTUE|ENDLESS') = FALSE \n)\n\n,gameplaytb AS (\nSELECT\n    DISTINCT g1.user_id,\n    g1.dungeon_id_difficulty,\n    gameplay_status,\n    stt\nFROM\n    `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay` g1\nJOIN dungeon_id_difficulty dd using(dungeon_id_difficulty)\nWHERE TRUE\n    AND UPPER(dungeon_id) NOT LIKE '%FTUE%' \n    AND UPPER(dungeon_id) NOT LIKE '%ENDLESS%' \n    \n    )\n\n\n\nSELECT\ncur_dungeon.*\nFROM\ngameplaytb cur_dungeon\nLEFT JOIN\ngameplaytb pre_dungeon\nON\ncur_dungeon.user_id = pre_dungeon.user_id\nAND cur_dungeon.stt = pre_dungeon.stt + 1\nAND pre_dungeon.gameplay_status = 'SUCCESS'\nWHERE\nTRUE\nAND cur_dungeon.stt > 1\nAND pre_dungeon.gameplay_status IS NULL\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`missing_dungeon_mart_level_design_gameplay_`",
            "column_name": null,
            "file_key_name": "models.mart_level_design_gameplay"
        },
        "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_.6115b9087d": {
            "test_metadata": {
                "name": "equal_rowcount",
                "kwargs": {
                    "compare_model": "ref('fct_level_design_gameplay')",
                    "model": "{{ get_where_subquery(ref('mart_level_design_gameplay')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_equal_rowcount",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_gameplay",
                    "model.dbt_sipher.mart_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_equal_rowcount_mart__6270b9f7624f6269ad33fd7b0fe4e64d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "sum(coalesce(diff_count, 0))",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_.6115b9087d",
            "raw_code": "{{ dbt_utils.test_equal_rowcount(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_equal_rowcount_mart__6270b9f7624f6269ad33fd7b0fe4e64d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_equal_rowcount_mart__6270b9f7624f6269ad33fd7b0fe4e64d.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_mart_level_design_gameplay.yml",
            "name": "dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_",
            "alias": "dbt_utils_equal_rowcount_mart__6270b9f7624f6269ad33fd7b0fe4e64d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_gameplay"
                ],
                [
                    "mart_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_mart_level_design_gameplay.yml/dbt_utils_equal_rowcount_mart__6270b9f7624f6269ad33fd7b0fe4e64d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "fail_calc": "sum(coalesce(diff_count, 0))",
                "alias": "dbt_utils_equal_rowcount_mart__6270b9f7624f6269ad33fd7b0fe4e64d"
            },
            "created_at": 1705293862.163533,
            "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from `sipher-data-testing`.`sipher_odyssey_level_design`.`mart_level_design_gameplay`\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_gameplay`\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_equal_rowcount_mart__6270b9f7624f6269ad33fd7b0fe4e64d`",
            "column_name": null,
            "file_key_name": "models.mart_level_design_gameplay"
        },
        "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_gameplay_gameplay_down__gameplay_hp_loss.76e7482eb7": {
            "test_metadata": {
                "name": "hploss_non_zero_when_down_nonzero",
                "kwargs": {
                    "hp_column": "gameplay_hp_loss",
                    "down_column": "gameplay_down",
                    "model": "{{ get_where_subquery(ref('fct_level_design_gameplay')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_hploss_non_zero_when_down_nonzero",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "hploss_non_zero_when_down_nonz_567677bb15ac83e2604872d127164a09",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "hploss_non_zero_when_down_nonzero_fct_level_design_gameplay_gameplay_down__gameplay_hp_loss"
            ],
            "unique_id": "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_gameplay_gameplay_down__gameplay_hp_loss.76e7482eb7",
            "raw_code": "{{ test_hploss_non_zero_when_down_nonzero(**_dbt_generic_test_kwargs) }}{{ config(alias=\"hploss_non_zero_when_down_nonz_567677bb15ac83e2604872d127164a09\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "hploss_non_zero_when_down_nonz_567677bb15ac83e2604872d127164a09.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml",
            "name": "hploss_non_zero_when_down_nonzero_fct_level_design_gameplay_gameplay_down__gameplay_hp_loss",
            "alias": "hploss_non_zero_when_down_nonz_567677bb15ac83e2604872d127164a09",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml/hploss_non_zero_when_down_nonz_567677bb15ac83e2604872d127164a09.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "hploss_non_zero_when_down_nonz_567677bb15ac83e2604872d127164a09"
            },
            "created_at": 1705293862.1663234,
            "compiled_code": "\nwith exceptions as (\n      SELECT\n              *        \n      FROM `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_gameplay`\n      WHERE TRUE \n        AND IFNULL(gameplay_down,0) > 0 AND IFNULL(gameplay_hp_loss,0) = 0\n      )\n\nselect * from exceptions\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`hploss_non_zero_when_down_nonz_567677bb15ac83e2604872d127164a09`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_gameplay"
        },
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_gameplay_LENGTH_session_id_5.b5b88c7bc8": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "LENGTH(session_id) >= 5",
                    "model": "{{ get_where_subquery(ref('fct_level_design_gameplay')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_utils.test_expression_is_true"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_63fb9e4319be919eb51ba202e65fe904",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "dbt_utils_expression_is_true_fct_level_design_gameplay_LENGTH_session_id_5"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_gameplay_LENGTH_session_id_5.b5b88c7bc8",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_63fb9e4319be919eb51ba202e65fe904\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_expression_is_true_f_63fb9e4319be919eb51ba202e65fe904.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml",
            "name": "dbt_utils_expression_is_true_fct_level_design_gameplay_LENGTH_session_id_5",
            "alias": "dbt_utils_expression_is_true_f_63fb9e4319be919eb51ba202e65fe904",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml/dbt_utils_expression_is_true_f_63fb9e4319be919eb51ba202e65fe904.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_expression_is_true_f_63fb9e4319be919eb51ba202e65fe904"
            },
            "created_at": 1705293862.168702,
            "compiled_code": "\n\n\n\nselect\n    *\nfrom `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_gameplay`\n\nwhere not(LENGTH(session_id) >= 5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_expression_is_true_f_63fb9e4319be919eb51ba202e65fe904`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_gameplay"
        },
        "test.dbt_sipher.check_columns_for_nulls_fct_level_design_gameplay_gameplay_start_event_date__gameplay_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__1_1.b66ff154c6": {
            "test_metadata": {
                "name": "check_columns_for_nulls",
                "kwargs": {
                    "condition": "1=1",
                    "columns": [
                        "gameplay_start_event_date",
                        "gameplay_start_event_timestamp",
                        "build_number",
                        "app_version",
                        "email",
                        "user_name",
                        "user_pseudo_id",
                        "user_id",
                        "day0_date_tzutc",
                        "session_id",
                        "dungeon_id",
                        "mode",
                        "difficulty",
                        "sub_race",
                        "character_level",
                        "character_PS",
                        "armor",
                        "armor_PS",
                        "head",
                        "head_PS",
                        "shoes",
                        "shoes_PS",
                        "legs",
                        "legs_PS",
                        "gloves",
                        "gloves_PS",
                        "weapon1",
                        "weapon1_PS",
                        "weapon2",
                        "weapon2_PS"
                    ],
                    "model": "{{ get_where_subquery(ref('fct_level_design_gameplay')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_check_columns_for_nulls",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "check_columns_for_nulls_fct_le_71ad9bcc1be992f8e0e554751f69b5d5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "check_columns_for_nulls_fct_level_design_gameplay_gameplay_start_event_date__gameplay_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__1_1"
            ],
            "unique_id": "test.dbt_sipher.check_columns_for_nulls_fct_level_design_gameplay_gameplay_start_event_date__gameplay_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__1_1.b66ff154c6",
            "raw_code": "{{ test_check_columns_for_nulls(**_dbt_generic_test_kwargs) }}{{ config(alias=\"check_columns_for_nulls_fct_le_71ad9bcc1be992f8e0e554751f69b5d5\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "check_columns_for_nulls_fct_le_71ad9bcc1be992f8e0e554751f69b5d5.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml",
            "name": "check_columns_for_nulls_fct_level_design_gameplay_gameplay_start_event_date__gameplay_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__1_1",
            "alias": "check_columns_for_nulls_fct_le_71ad9bcc1be992f8e0e554751f69b5d5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml/check_columns_for_nulls_fct_le_71ad9bcc1be992f8e0e554751f69b5d5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "check_columns_for_nulls_fct_le_71ad9bcc1be992f8e0e554751f69b5d5"
            },
            "created_at": 1705293862.170833,
            "compiled_code": "\nwith exceptions as (\n      SELECT\n      COUNT(*) AS error_count\n        \n      FROM `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_gameplay`\n      WHERE TRUE \n      AND 1=1\n      AND\n\n      gameplay_start_event_date IS NULL  \n      AND\n\n      gameplay_start_event_timestamp IS NULL  \n      AND\n\n      build_number IS NULL  \n      AND\n\n      app_version IS NULL  \n      AND\n\n      email IS NULL  \n      AND\n\n      user_name IS NULL  \n      AND\n\n      user_pseudo_id IS NULL  \n      AND\n\n      user_id IS NULL  \n      AND\n\n      day0_date_tzutc IS NULL  \n      AND\n\n      session_id IS NULL  \n      AND\n\n      dungeon_id IS NULL  \n      AND\n\n      mode IS NULL  \n      AND\n\n      difficulty IS NULL  \n      AND\n\n      sub_race IS NULL  \n      AND\n\n      character_level IS NULL  \n      AND\n\n      character_PS IS NULL  \n      AND\n\n      armor IS NULL  \n      AND\n\n      armor_PS IS NULL  \n      AND\n\n      head IS NULL  \n      AND\n\n      head_PS IS NULL  \n      AND\n\n      shoes IS NULL  \n      AND\n\n      shoes_PS IS NULL  \n      AND\n\n      legs IS NULL  \n      AND\n\n      legs_PS IS NULL  \n      AND\n\n      gloves IS NULL  \n      AND\n\n      gloves_PS IS NULL  \n      AND\n\n      weapon1 IS NULL  \n      AND\n\n      weapon1_PS IS NULL  \n      AND\n\n      weapon2 IS NULL  \n      AND\n\n      weapon2_PS IS NULL  \n      \n      )\n\nselect * from exceptions\nwhere error_count > 0\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`check_columns_for_nulls_fct_le_71ad9bcc1be992f8e0e554751f69b5d5`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_gameplay"
        },
        "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_gameplay_user_id__session_id.d836af69b9": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "user_id",
                        "session_id"
                    ],
                    "model": "{{ get_where_subquery(ref('fct_level_design_gameplay')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_gameplay"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_2b0eeca791976ca9070d2ee151e7789c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "dbt_utils_unique_combination_of_columns_fct_level_design_gameplay_user_id__session_id"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_gameplay_user_id__session_id.d836af69b9",
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2b0eeca791976ca9070d2ee151e7789c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_unique_combination_o_2b0eeca791976ca9070d2ee151e7789c.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml",
            "name": "dbt_utils_unique_combination_of_columns_fct_level_design_gameplay_user_id__session_id",
            "alias": "dbt_utils_unique_combination_o_2b0eeca791976ca9070d2ee151e7789c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_gameplay"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_gameplay.yml/dbt_utils_unique_combination_o_2b0eeca791976ca9070d2ee151e7789c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_unique_combination_o_2b0eeca791976ca9070d2ee151e7789c"
            },
            "created_at": 1705293862.1775641,
            "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_id, session_id\n    from `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_gameplay`\n    group by user_id, session_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_unique_combination_o_2b0eeca791976ca9070d2ee151e7789c`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_gameplay"
        },
        "test.dbt_sipher.missing_level_fct_level_design_lvl_.13908e0c6b": {
            "test_metadata": {
                "name": "missing_level",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_level_design_lvl')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_missing_level",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "missing_level_fct_level_design_lvl_"
            ],
            "unique_id": "test.dbt_sipher.missing_level_fct_level_design_lvl_.13908e0c6b",
            "raw_code": "{{ test_missing_level(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "missing_level_fct_level_design_lvl_.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml",
            "name": "missing_level_fct_level_design_lvl_",
            "alias": "missing_level_fct_level_design_lvl_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml/missing_level_fct_level_design_lvl_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.180457,
            "compiled_code": "\n\n        WITH\n        lvltb AS (\n        SELECT\n            DISTINCT g1.user_id,\n            g1.session_id,\n            g1.level_start_level_count,\n            level_status\n        FROM\n           `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl` g1\n        WHERE\n            mode = 'SINGLE'\n            AND UPPER(dungeon_id) NOT LIKE '%FTUE%' \n            AND UPPER(dungeon_id) NOT LIKE '%ENDLESS%' \n            \n            )\n        SELECT\n        cur_lvl.*\n        FROM\n        lvltb cur_lvl\n        LEFT JOIN\n        lvltb pre_lvl\n        ON\n        cur_lvl.user_id = pre_lvl.user_id\n        AND cur_lvl.session_id = pre_lvl.session_id\n        AND cur_lvl.level_start_level_count = pre_lvl.level_start_level_count + 1\n        AND pre_lvl.level_status = 'SUCCESS'\n        WHERE\n        TRUE\n        AND cur_lvl.level_start_level_count > 1\n        AND pre_lvl.level_status IS NULL\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`missing_level_fct_level_design_lvl_`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_lvl"
        },
        "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_lvl_down__hp_loss.36a26a0ff8": {
            "test_metadata": {
                "name": "hploss_non_zero_when_down_nonzero",
                "kwargs": {
                    "hp_column": "hp_loss",
                    "down_column": "down",
                    "model": "{{ get_where_subquery(ref('fct_level_design_lvl')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_hploss_non_zero_when_down_nonzero",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "hploss_non_zero_when_down_nonz_a2cd452643bb3f565748015428f3fb4c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "hploss_non_zero_when_down_nonzero_fct_level_design_lvl_down__hp_loss"
            ],
            "unique_id": "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_lvl_down__hp_loss.36a26a0ff8",
            "raw_code": "{{ test_hploss_non_zero_when_down_nonzero(**_dbt_generic_test_kwargs) }}{{ config(alias=\"hploss_non_zero_when_down_nonz_a2cd452643bb3f565748015428f3fb4c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "hploss_non_zero_when_down_nonz_a2cd452643bb3f565748015428f3fb4c.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml",
            "name": "hploss_non_zero_when_down_nonzero_fct_level_design_lvl_down__hp_loss",
            "alias": "hploss_non_zero_when_down_nonz_a2cd452643bb3f565748015428f3fb4c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml/hploss_non_zero_when_down_nonz_a2cd452643bb3f565748015428f3fb4c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "hploss_non_zero_when_down_nonz_a2cd452643bb3f565748015428f3fb4c"
            },
            "created_at": 1705293862.1824164,
            "compiled_code": "\nwith exceptions as (\n      SELECT\n              *        \n      FROM `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl`\n      WHERE TRUE \n        AND IFNULL(down,0) > 0 AND IFNULL(hp_loss,0) = 0\n      )\n\nselect * from exceptions\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`hploss_non_zero_when_down_nonz_a2cd452643bb3f565748015428f3fb4c`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_lvl"
        },
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_LENGTH_session_id_5.5e4384ec11": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "LENGTH(session_id) >= 5",
                    "model": "{{ get_where_subquery(ref('fct_level_design_lvl')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_utils.test_expression_is_true"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_10c1db6d30f05404517a5be3e3af59f1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "dbt_utils_expression_is_true_fct_level_design_lvl_LENGTH_session_id_5"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_LENGTH_session_id_5.5e4384ec11",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_10c1db6d30f05404517a5be3e3af59f1\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_expression_is_true_f_10c1db6d30f05404517a5be3e3af59f1.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml",
            "name": "dbt_utils_expression_is_true_fct_level_design_lvl_LENGTH_session_id_5",
            "alias": "dbt_utils_expression_is_true_f_10c1db6d30f05404517a5be3e3af59f1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml/dbt_utils_expression_is_true_f_10c1db6d30f05404517a5be3e3af59f1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_expression_is_true_f_10c1db6d30f05404517a5be3e3af59f1"
            },
            "created_at": 1705293862.184785,
            "compiled_code": "\n\n\n\nselect\n    *\nfrom `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl`\n\nwhere not(LENGTH(session_id) >= 5)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_expression_is_true_f_10c1db6d30f05404517a5be3e3af59f1`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_lvl"
        },
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_level_start_level_count_12.c72a34b500": {
            "test_metadata": {
                "name": "expression_is_true",
                "kwargs": {
                    "expression": "level_start_level_count <= 12",
                    "model": "{{ get_where_subquery(ref('fct_level_design_lvl')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expression_is_true",
                    "macro.dbt.get_where_subquery",
                    "macro.dbt_utils.test_expression_is_true"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_expression_is_true_f_6bd12e67974d26821605b8124df2660d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": " REGEXP_CONTAINS(UPPER(dungeon_id),  'FTUE|ENDLESS') = FALSE ",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "dbt_utils_expression_is_true_fct_level_design_lvl_level_start_level_count_12"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_level_start_level_count_12.c72a34b500",
            "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\" REGEXP_CONTAINS(UPPER(dungeon_id),  'FTUE|ENDLESS') = FALSE \",alias=\"dbt_utils_expression_is_true_f_6bd12e67974d26821605b8124df2660d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_expression_is_true_f_6bd12e67974d26821605b8124df2660d.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml",
            "name": "dbt_utils_expression_is_true_fct_level_design_lvl_level_start_level_count_12",
            "alias": "dbt_utils_expression_is_true_f_6bd12e67974d26821605b8124df2660d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml/dbt_utils_expression_is_true_f_6bd12e67974d26821605b8124df2660d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "where": " REGEXP_CONTAINS(UPPER(dungeon_id),  'FTUE|ENDLESS') = FALSE ",
                "alias": "dbt_utils_expression_is_true_f_6bd12e67974d26821605b8124df2660d"
            },
            "created_at": 1705293862.1872723,
            "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl` where  REGEXP_CONTAINS(UPPER(dungeon_id),  'FTUE|ENDLESS') = FALSE ) dbt_subquery\n\nwhere not(level_start_level_count <= 12)\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_expression_is_true_f_6bd12e67974d26821605b8124df2660d`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_lvl"
        },
        "test.dbt_sipher.check_columns_for_nulls_fct_level_design_lvl_level_start_event_date__level_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__level_start_level_count__1_1.9b972f0b8e": {
            "test_metadata": {
                "name": "check_columns_for_nulls",
                "kwargs": {
                    "condition": "1=1",
                    "columns": [
                        "level_start_event_date",
                        "level_start_event_timestamp",
                        "build_number",
                        "app_version",
                        "email",
                        "user_name",
                        "user_pseudo_id",
                        "user_id",
                        "day0_date_tzutc",
                        "session_id",
                        "dungeon_id",
                        "mode",
                        "difficulty",
                        "sub_race",
                        "character_level",
                        "character_PS",
                        "armor",
                        "armor_PS",
                        "head",
                        "head_PS",
                        "shoes",
                        "shoes_PS",
                        "legs",
                        "legs_PS",
                        "gloves",
                        "gloves_PS",
                        "weapon1",
                        "weapon1_PS",
                        "weapon2",
                        "weapon2_PS",
                        "level_start_level_count"
                    ],
                    "model": "{{ get_where_subquery(ref('fct_level_design_lvl')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.test_check_columns_for_nulls",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "check_columns_for_nulls_fct_le_a2176a1ca16bb7afc5e761c92fb23a63",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "check_columns_for_nulls_fct_level_design_lvl_level_start_event_date__level_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__level_start_level_count__1_1"
            ],
            "unique_id": "test.dbt_sipher.check_columns_for_nulls_fct_level_design_lvl_level_start_event_date__level_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__level_start_level_count__1_1.9b972f0b8e",
            "raw_code": "{{ test_check_columns_for_nulls(**_dbt_generic_test_kwargs) }}{{ config(alias=\"check_columns_for_nulls_fct_le_a2176a1ca16bb7afc5e761c92fb23a63\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "check_columns_for_nulls_fct_le_a2176a1ca16bb7afc5e761c92fb23a63.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml",
            "name": "check_columns_for_nulls_fct_level_design_lvl_level_start_event_date__level_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__level_start_level_count__1_1",
            "alias": "check_columns_for_nulls_fct_le_a2176a1ca16bb7afc5e761c92fb23a63",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml/check_columns_for_nulls_fct_le_a2176a1ca16bb7afc5e761c92fb23a63.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "check_columns_for_nulls_fct_le_a2176a1ca16bb7afc5e761c92fb23a63"
            },
            "created_at": 1705293862.1896107,
            "compiled_code": "\nwith exceptions as (\n      SELECT\n      COUNT(*) AS error_count\n        \n      FROM `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl`\n      WHERE TRUE \n      AND 1=1\n      AND\n\n      level_start_event_date IS NULL  \n      AND\n\n      level_start_event_timestamp IS NULL  \n      AND\n\n      build_number IS NULL  \n      AND\n\n      app_version IS NULL  \n      AND\n\n      email IS NULL  \n      AND\n\n      user_name IS NULL  \n      AND\n\n      user_pseudo_id IS NULL  \n      AND\n\n      user_id IS NULL  \n      AND\n\n      day0_date_tzutc IS NULL  \n      AND\n\n      session_id IS NULL  \n      AND\n\n      dungeon_id IS NULL  \n      AND\n\n      mode IS NULL  \n      AND\n\n      difficulty IS NULL  \n      AND\n\n      sub_race IS NULL  \n      AND\n\n      character_level IS NULL  \n      AND\n\n      character_PS IS NULL  \n      AND\n\n      armor IS NULL  \n      AND\n\n      armor_PS IS NULL  \n      AND\n\n      head IS NULL  \n      AND\n\n      head_PS IS NULL  \n      AND\n\n      shoes IS NULL  \n      AND\n\n      shoes_PS IS NULL  \n      AND\n\n      legs IS NULL  \n      AND\n\n      legs_PS IS NULL  \n      AND\n\n      gloves IS NULL  \n      AND\n\n      gloves_PS IS NULL  \n      AND\n\n      weapon1 IS NULL  \n      AND\n\n      weapon1_PS IS NULL  \n      AND\n\n      weapon2 IS NULL  \n      AND\n\n      weapon2_PS IS NULL  \n      AND\n\n      level_start_level_count IS NULL  \n      \n      )\n\nselect * from exceptions\nwhere error_count > 0\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`check_columns_for_nulls_fct_le_a2176a1ca16bb7afc5e761c92fb23a63`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_lvl"
        },
        "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_lvl_user_id__session_id__level_start_level_count.393b317bfe": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "user_id",
                        "session_id",
                        "level_start_level_count"
                    ],
                    "model": "{{ get_where_subquery(ref('fct_level_design_lvl')) }}"
                },
                "namespace": "dbt_utils"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_sipher.fct_level_design_lvl"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_e34a9d20f01bb18f60262dfeafbde5a3",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_level_design",
                "dbt_utils_unique_combination_of_columns_fct_level_design_lvl_user_id__session_id__level_start_level_count"
            ],
            "unique_id": "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_lvl_user_id__session_id__level_start_level_count.393b317bfe",
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e34a9d20f01bb18f60262dfeafbde5a3\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_utils_unique_combination_o_e34a9d20f01bb18f60262dfeafbde5a3.sql",
            "original_file_path": "models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml",
            "name": "dbt_utils_unique_combination_of_columns_fct_level_design_lvl_user_id__session_id__level_start_level_count",
            "alias": "dbt_utils_unique_combination_o_e34a9d20f01bb18f60262dfeafbde5a3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "fct_level_design_lvl"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_level_design/schema_fct_level_design_lvl.yml/dbt_utils_unique_combination_o_e34a9d20f01bb18f60262dfeafbde5a3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_utils_unique_combination_o_e34a9d20f01bb18f60262dfeafbde5a3"
            },
            "created_at": 1705293862.1969087,
            "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        user_id, session_id, level_start_level_count\n    from `sipher-data-testing`.`sipher_odyssey_level_design`.`fct_level_design_lvl`\n    group by user_id, session_id, level_start_level_count\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_utils_unique_combination_o_e34a9d20f01bb18f60262dfeafbde5a3`",
            "column_name": null,
            "file_key_name": "models.fct_level_design_lvl"
        },
        "test.dbt_sipher.source_not_null_crypto_ethereum_token_transfers_block_timestamp.0cffd0c4e0": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "block_timestamp",
                    "model": "{{ get_where_subquery(source('crypto_ethereum', 'token_transfers')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.crypto_ethereum.token_transfers"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "bigquery_public__crypto_ethereum",
                "source_not_null_crypto_ethereum_token_transfers_block_timestamp"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_crypto_ethereum_token_transfers_block_timestamp.0cffd0c4e0",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_crypto_ethereum_token_transfers_block_timestamp.sql",
            "original_file_path": "models/staging/bigquery_public__crypto_ethereum/src_bq_public__crypto_ethereum.yml",
            "name": "source_not_null_crypto_ethereum_token_transfers_block_timestamp",
            "alias": "source_not_null_crypto_ethereum_token_transfers_block_timestamp",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "crypto_ethereum",
                    "token_transfers"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/bigquery_public__crypto_ethereum/src_bq_public__crypto_ethereum.yml/source_not_null_crypto_ethereum_token_transfers_block_timestamp.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.20887,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `bigquery-public-data`.`crypto_ethereum`.`token_transfers`\nwhere block_timestamp is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_crypto_ethereum_token_transfers_block_timestamp`",
            "column_name": "block_timestamp",
            "file_key_name": "sources.crypto_ethereum"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_crypto_ethereum_token_transfers_block_timestamp.88bbc039e1": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "block_timestamp",
                    "model": "{{ get_where_subquery(source('crypto_ethereum', 'token_transfers')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.crypto_ethereum.token_transfers"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_fde9461ae09c99cecb862e6aa3270bf1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "bigquery_public__crypto_ethereum",
                "dbt_expectations_source_expect_column_to_exist_crypto_ethereum_token_transfers_block_timestamp"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_crypto_ethereum_token_transfers_block_timestamp.88bbc039e1",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_fde9461ae09c99cecb862e6aa3270bf1\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_fde9461ae09c99cecb862e6aa3270bf1.sql",
            "original_file_path": "models/staging/bigquery_public__crypto_ethereum/src_bq_public__crypto_ethereum.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_crypto_ethereum_token_transfers_block_timestamp",
            "alias": "dbt_expectations_source_expect_fde9461ae09c99cecb862e6aa3270bf1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "crypto_ethereum",
                    "token_transfers"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/bigquery_public__crypto_ethereum/src_bq_public__crypto_ethereum.yml/dbt_expectations_source_expect_fde9461ae09c99cecb862e6aa3270bf1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_fde9461ae09c99cecb862e6aa3270bf1"
            },
            "created_at": 1705293862.2097843,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as STRING) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_fde9461ae09c99cecb862e6aa3270bf1`",
            "column_name": "block_timestamp",
            "file_key_name": "sources.crypto_ethereum"
        },
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_application.10deb2e88d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "application",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_ad_revenue')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "source_not_null_raw_max_mediation_raw_ad_revenue_application"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_application.10deb2e88d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_max_mediation_raw_ad_revenue_application.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "source_not_null_raw_max_mediation_raw_ad_revenue_application",
            "alias": "source_not_null_raw_max_mediation_raw_ad_revenue_application",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/source_not_null_raw_max_mediation_raw_ad_revenue_application.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.2119708,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_max_mediation`.`raw_ad_revenue`\nwhere application is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_max_mediation_raw_ad_revenue_application`",
            "column_name": "application",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_store_id.999adf312c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "store_id",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_ad_revenue')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "source_not_null_raw_max_mediation_raw_ad_revenue_store_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_store_id.999adf312c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_max_mediation_raw_ad_revenue_store_id.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "source_not_null_raw_max_mediation_raw_ad_revenue_store_id",
            "alias": "source_not_null_raw_max_mediation_raw_ad_revenue_store_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/source_not_null_raw_max_mediation_raw_ad_revenue_store_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.212897,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_max_mediation`.`raw_ad_revenue`\nwhere store_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_max_mediation_raw_ad_revenue_store_id`",
            "column_name": "store_id",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts.c505161943": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "__collected_ts",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_ad_revenue')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts.c505161943",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts",
            "alias": "source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.2136598,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_max_mediation`.`raw_ad_revenue`\nwhere __collected_ts is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts`",
            "column_name": "__collected_ts",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_ad_revenue___collected_ts.485e3ab4a3": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "__collected_ts",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_ad_revenue')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_6b48adae0e2279c68c2b18899e7911ba",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_ad_revenue___collected_ts"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_ad_revenue___collected_ts.485e3ab4a3",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6b48adae0e2279c68c2b18899e7911ba\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_6b48adae0e2279c68c2b18899e7911ba.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_ad_revenue___collected_ts",
            "alias": "dbt_expectations_source_expect_6b48adae0e2279c68c2b18899e7911ba",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/dbt_expectations_source_expect_6b48adae0e2279c68c2b18899e7911ba.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_6b48adae0e2279c68c2b18899e7911ba"
            },
            "created_at": 1705293862.214428,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('__COLLECTED_TS' as STRING) as column_name,\n            18 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_6b48adae0e2279c68c2b18899e7911ba`",
            "column_name": "__collected_ts",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_Ad_Unit_ID.b0bc07a54c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "Ad_Unit_ID",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_user_ad_revenue')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_max_mediat_a7de3a2bba834c595bae26dff9826f1d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "source_not_null_raw_max_mediation_raw_user_ad_revenue_Ad_Unit_ID"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_Ad_Unit_ID.b0bc07a54c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_max_mediat_a7de3a2bba834c595bae26dff9826f1d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_max_mediat_a7de3a2bba834c595bae26dff9826f1d.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "source_not_null_raw_max_mediation_raw_user_ad_revenue_Ad_Unit_ID",
            "alias": "source_not_null_raw_max_mediat_a7de3a2bba834c595bae26dff9826f1d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_user_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/source_not_null_raw_max_mediat_a7de3a2bba834c595bae26dff9826f1d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_max_mediat_a7de3a2bba834c595bae26dff9826f1d"
            },
            "created_at": 1705293862.2166579,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_max_mediation`.`raw_user_ad_revenue`\nwhere Ad_Unit_ID is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_max_mediat_a7de3a2bba834c595bae26dff9826f1d`",
            "column_name": "Ad_Unit_ID",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID.848cce4cd3": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "User_ID",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_user_ad_revenue')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID.848cce4cd3",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID",
            "alias": "source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_user_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.2174473,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_max_mediation`.`raw_user_ad_revenue`\nwhere User_ID is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID`",
            "column_name": "User_ID",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue_Revenue.4178b24384": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "Revenue",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_user_ad_revenue')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_bb3c9b63f018a00e4401c7e0f53d8330",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue_Revenue"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue_Revenue.4178b24384",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_bb3c9b63f018a00e4401c7e0f53d8330\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_bb3c9b63f018a00e4401c7e0f53d8330.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue_Revenue",
            "alias": "dbt_expectations_source_expect_bb3c9b63f018a00e4401c7e0f53d8330",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_user_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/dbt_expectations_source_expect_bb3c9b63f018a00e4401c7e0f53d8330.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_bb3c9b63f018a00e4401c7e0f53d8330"
            },
            "created_at": 1705293862.2182286,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('REVENUE' as STRING) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_bb3c9b63f018a00e4401c7e0f53d8330`",
            "column_name": "Revenue",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id.5f800a3a7d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "app_id",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_user_ad_revenue')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id.5f800a3a7d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id",
            "alias": "source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_user_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.220354,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_max_mediation`.`raw_user_ad_revenue`\nwhere app_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id`",
            "column_name": "app_id",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue___collected_ts.6b030d5fdc": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "__collected_ts",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_user_ad_revenue')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_max_mediat_1135e714bcd621b5cf5a3b7f784fa81e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "source_not_null_raw_max_mediation_raw_user_ad_revenue___collected_ts"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue___collected_ts.6b030d5fdc",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_max_mediat_1135e714bcd621b5cf5a3b7f784fa81e\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_max_mediat_1135e714bcd621b5cf5a3b7f784fa81e.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "source_not_null_raw_max_mediation_raw_user_ad_revenue___collected_ts",
            "alias": "source_not_null_raw_max_mediat_1135e714bcd621b5cf5a3b7f784fa81e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_user_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/source_not_null_raw_max_mediat_1135e714bcd621b5cf5a3b7f784fa81e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_max_mediat_1135e714bcd621b5cf5a3b7f784fa81e"
            },
            "created_at": 1705293862.2211413,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_max_mediation`.`raw_user_ad_revenue`\nwhere __collected_ts is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_max_mediat_1135e714bcd621b5cf5a3b7f784fa81e`",
            "column_name": "__collected_ts",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue___collected_ts.f5406ae664": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "__collected_ts",
                    "model": "{{ get_where_subquery(source('raw_max_mediation', 'raw_user_ad_revenue')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_4b8730e07296b865cf562a1415701390",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue___collected_ts"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue___collected_ts.f5406ae664",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_4b8730e07296b865cf562a1415701390\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_4b8730e07296b865cf562a1415701390.sql",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue___collected_ts",
            "alias": "dbt_expectations_source_expect_4b8730e07296b865cf562a1415701390",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_max_mediation",
                    "raw_user_ad_revenue"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/max_mediation/src_max_mediation.yml/dbt_expectations_source_expect_4b8730e07296b865cf562a1415701390.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_4b8730e07296b865cf562a1415701390"
            },
            "created_at": 1705293862.2219245,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('__COLLECTED_TS' as STRING) as column_name,\n            17 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_4b8730e07296b865cf562a1415701390`",
            "column_name": "__collected_ts",
            "file_key_name": "sources.raw_max_mediation"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.0dbd09035d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "Username",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_atherid_gc_2c21e3a786e5d58cf2f8c78c7195ed71",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_Username"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.0dbd09035d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_atherid_gc_2c21e3a786e5d58cf2f8c78c7195ed71\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gc_2c21e3a786e5d58cf2f8c78c7195ed71.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_Username",
            "alias": "source_not_null_raw_atherid_gc_2c21e3a786e5d58cf2f8c78c7195ed71",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gc_2c21e3a786e5d58cf2f8c78c7195ed71.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_atherid_gc_2c21e3a786e5d58cf2f8c78c7195ed71"
            },
            "created_at": 1705293862.2241428,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user_cognito`\nwhere Username is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gc_2c21e3a786e5d58cf2f8c78c7195ed71`",
            "column_name": "Username",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.4a288a89e5": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "Username",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_b9fe2011916c3ce9da80e4c0b51b02c0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_Username"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.4a288a89e5",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b9fe2011916c3ce9da80e4c0b51b02c0\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_b9fe2011916c3ce9da80e4c0b51b02c0.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_Username",
            "alias": "dbt_expectations_source_expect_b9fe2011916c3ce9da80e4c0b51b02c0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_b9fe2011916c3ce9da80e4c0b51b02c0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_b9fe2011916c3ce9da80e4c0b51b02c0"
            },
            "created_at": 1705293862.224952,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('USERNAME' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_b9fe2011916c3ce9da80e4c0b51b02c0`",
            "column_name": "Username",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.7aad339abc": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "UserCreateDate",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_atherid_gc_d53d458bce1c60a1079009e3d9d9de37",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.7aad339abc",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_atherid_gc_d53d458bce1c60a1079009e3d9d9de37\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gc_d53d458bce1c60a1079009e3d9d9de37.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate",
            "alias": "source_not_null_raw_atherid_gc_d53d458bce1c60a1079009e3d9d9de37",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gc_d53d458bce1c60a1079009e3d9d9de37.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_atherid_gc_d53d458bce1c60a1079009e3d9d9de37"
            },
            "created_at": 1705293862.2271202,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user_cognito`\nwhere UserCreateDate is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gc_d53d458bce1c60a1079009e3d9d9de37`",
            "column_name": "UserCreateDate",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.c1a5750768": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "UserCreateDate",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_d2261a307f841d00529abb72b723e702",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.c1a5750768",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d2261a307f841d00529abb72b723e702\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_d2261a307f841d00529abb72b723e702.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate",
            "alias": "dbt_expectations_source_expect_d2261a307f841d00529abb72b723e702",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_d2261a307f841d00529abb72b723e702.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_d2261a307f841d00529abb72b723e702"
            },
            "created_at": 1705293862.2279248,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('USERCREATEDATE' as STRING) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_d2261a307f841d00529abb72b723e702`",
            "column_name": "UserCreateDate",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.974a6427d2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "user_id",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_atherid_gc_bd4e8d941cf6873446cc7eba370ad927",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.974a6427d2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_atherid_gc_bd4e8d941cf6873446cc7eba370ad927\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gc_bd4e8d941cf6873446cc7eba370ad927.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id",
            "alias": "source_not_null_raw_atherid_gc_bd4e8d941cf6873446cc7eba370ad927",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gc_bd4e8d941cf6873446cc7eba370ad927.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_atherid_gc_bd4e8d941cf6873446cc7eba370ad927"
            },
            "created_at": 1705293862.2300875,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user_cognito`\nwhere user_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gc_bd4e8d941cf6873446cc7eba370ad927`",
            "column_name": "user_id",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.7ab3ee357a": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "user_id",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_2c80584e0d617a8d736d3287bba371c1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.7ab3ee357a",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2c80584e0d617a8d736d3287bba371c1\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_2c80584e0d617a8d736d3287bba371c1.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id",
            "alias": "dbt_expectations_source_expect_2c80584e0d617a8d736d3287bba371c1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_2c80584e0d617a8d736d3287bba371c1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_2c80584e0d617a8d736d3287bba371c1"
            },
            "created_at": 1705293862.2308927,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('USER_ID' as STRING) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_2c80584e0d617a8d736d3287bba371c1`",
            "column_name": "user_id",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email.5886ff2069": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "email",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email.5886ff2069",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email",
            "alias": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.2330172,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user_cognito`\nwhere email is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email`",
            "column_name": "email",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_email.f564c401ae": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "email",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_2caebac2e0ca067b36fc9458615fadda",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_email"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_email.f564c401ae",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2caebac2e0ca067b36fc9458615fadda\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_2caebac2e0ca067b36fc9458615fadda.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_email",
            "alias": "dbt_expectations_source_expect_2caebac2e0ca067b36fc9458615fadda",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_2caebac2e0ca067b36fc9458615fadda.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_2caebac2e0ca067b36fc9458615fadda"
            },
            "created_at": 1705293862.2337985,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EMAIL' as STRING) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_2caebac2e0ca067b36fc9458615fadda`",
            "column_name": "email",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_cognito_dt__date.fc1a9a77cf": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_cognito')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_b4a0d7e93f9150cc0ed5337d26ca5d1d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_cognito_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_cognito_dt__date.fc1a9a77cf",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b4a0d7e93f9150cc0ed5337d26ca5d1d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_b4a0d7e93f9150cc0ed5337d26ca5d1d.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_cognito_dt__date",
            "alias": "dbt_expectations_source_expect_b4a0d7e93f9150cc0ed5337d26ca5d1d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_cognito"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_b4a0d7e93f9150cc0ed5337d26ca5d1d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_b4a0d7e93f9150cc0ed5337d26ca5d1d"
            },
            "created_at": 1705293862.2359467,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('USERNAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USERCREATEDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USERLASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ENABLED' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USERSTATUS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CONNECTED_WALLETS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SUB' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('EMAIL_VERIFIED' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USER_ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('EMAIL' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTITIES' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_b4a0d7e93f9150cc0ed5337d26ca5d1d`",
            "column_name": "dt",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id.564085b848": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_user')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id.564085b848",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id",
            "alias": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_user"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.2389214,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_id.32f14dbae7": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_user')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_b0306e9ad599caee2a5f3277d4a1f76e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_id"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_id.32f14dbae7",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b0306e9ad599caee2a5f3277d4a1f76e\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_b0306e9ad599caee2a5f3277d4a1f76e.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_id",
            "alias": "dbt_expectations_source_expect_b0306e9ad599caee2a5f3277d4a1f76e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_user"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_b0306e9ad599caee2a5f3277d4a1f76e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_b0306e9ad599caee2a5f3277d4a1f76e"
            },
            "created_at": 1705293862.2397308,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ID' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_b0306e9ad599caee2a5f3277d4a1f76e`",
            "column_name": "id",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.34f8a3aee8": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_user')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_atherid_gc_d2571cfd5cd2ccfe4efa02faea28bbae",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.34f8a3aee8",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_atherid_gc_d2571cfd5cd2ccfe4efa02faea28bbae\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gc_d2571cfd5cd2ccfe4efa02faea28bbae.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_createdAt",
            "alias": "source_not_null_raw_atherid_gc_d2571cfd5cd2ccfe4efa02faea28bbae",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_user"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gc_d2571cfd5cd2ccfe4efa02faea28bbae.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_atherid_gc_d2571cfd5cd2ccfe4efa02faea28bbae"
            },
            "created_at": 1705293862.2417672,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gc_d2571cfd5cd2ccfe4efa02faea28bbae`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.ea37a30365": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_user')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_16e417a774c95b09906f792341f9c865",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_createdAt"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.ea37a30365",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_16e417a774c95b09906f792341f9c865\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_16e417a774c95b09906f792341f9c865.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_createdAt",
            "alias": "dbt_expectations_source_expect_16e417a774c95b09906f792341f9c865",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_user"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_16e417a774c95b09906f792341f9c865.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_16e417a774c95b09906f792341f9c865"
            },
            "created_at": 1705293862.2427084,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CREATEDAT' as STRING) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_16e417a774c95b09906f792341f9c865`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_email.b0e1c50fad": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "email",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_user')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_c4e8a28a5b653eafb1193effa0cd96ae",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_email"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_email.b0e1c50fad",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c4e8a28a5b653eafb1193effa0cd96ae\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_c4e8a28a5b653eafb1193effa0cd96ae.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_email",
            "alias": "dbt_expectations_source_expect_c4e8a28a5b653eafb1193effa0cd96ae",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_user"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_c4e8a28a5b653eafb1193effa0cd96ae.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_c4e8a28a5b653eafb1193effa0cd96ae"
            },
            "created_at": 1705293862.2446992,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EMAIL' as STRING) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_c4e8a28a5b653eafb1193effa0cd96ae`",
            "column_name": "email",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_user_dt__date.dc048870ed": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_user')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_81d81419c0bff91daa625e492c6b5935",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_user_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_user_dt__date.dc048870ed",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_81d81419c0bff91daa625e492c6b5935\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_81d81419c0bff91daa625e492c6b5935.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_user_dt__date",
            "alias": "dbt_expectations_source_expect_81d81419c0bff91daa625e492c6b5935",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_user"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_81d81419c0bff91daa625e492c6b5935.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_81d81419c0bff91daa625e492c6b5935"
            },
            "created_at": 1705293862.2468042,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SUBSCRIBEEMAIL' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('COGNITOSUB' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('AVATARIMAGE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('EMAIL' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ISVERIFIED' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ISBANNED' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BIO' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BANNERIMAGE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_81d81419c0bff91daa625e492c6b5935`",
            "column_name": "dt",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_address.4ce31050de": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "address",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_wallet')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_atherid_gc_f9aa6fb590823bfb6a67101732434193",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_address"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_address.4ce31050de",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_atherid_gc_f9aa6fb590823bfb6a67101732434193\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gc_f9aa6fb590823bfb6a67101732434193.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_address",
            "alias": "source_not_null_raw_atherid_gc_f9aa6fb590823bfb6a67101732434193",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_wallet"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gc_f9aa6fb590823bfb6a67101732434193.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_atherid_gc_f9aa6fb590823bfb6a67101732434193"
            },
            "created_at": 1705293862.2492034,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_wallet`\nwhere address is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gc_f9aa6fb590823bfb6a67101732434193`",
            "column_name": "address",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_createdAt.b30ece57b5": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_wallet')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_atherid_gc_ed82f81ca478058e780fd85751beccae",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_createdAt.b30ece57b5",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_atherid_gc_ed82f81ca478058e780fd85751beccae\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gc_ed82f81ca478058e780fd85751beccae.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_createdAt",
            "alias": "source_not_null_raw_atherid_gc_ed82f81ca478058e780fd85751beccae",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_wallet"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gc_ed82f81ca478058e780fd85751beccae.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_atherid_gc_ed82f81ca478058e780fd85751beccae"
            },
            "created_at": 1705293862.2500029,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_wallet`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gc_ed82f81ca478058e780fd85751beccae`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.7316a110af": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "userId",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_wallet')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.7316a110af",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId",
            "alias": "source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_wallet"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.2507675,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_wallet`\nwhere userId is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId`",
            "column_name": "userId",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.2e135f84d9": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "userId",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_wallet')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_6978c52ed5aef38b02f59bdc0f635f72",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_wallet_userId"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.2e135f84d9",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6978c52ed5aef38b02f59bdc0f635f72\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_6978c52ed5aef38b02f59bdc0f635f72.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_wallet_userId",
            "alias": "dbt_expectations_source_expect_6978c52ed5aef38b02f59bdc0f635f72",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_wallet"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_6978c52ed5aef38b02f59bdc0f635f72.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_6978c52ed5aef38b02f59bdc0f635f72"
            },
            "created_at": 1705293862.251691,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('USERID' as STRING) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_6978c52ed5aef38b02f59bdc0f635f72`",
            "column_name": "userId",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_wallet_dt__date.1c3dffe6cf": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_atherid_gcs', 'aws__raw_ather_id_wallet')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_6416e66e28d6d50930c0702e3b27d323",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_wallet_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_wallet_dt__date.1c3dffe6cf",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6416e66e28d6d50930c0702e3b27d323\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_6416e66e28d6d50930c0702e3b27d323.sql",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_wallet_dt__date",
            "alias": "dbt_expectations_source_expect_6416e66e28d6d50930c0702e3b27d323",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_atherid_gcs",
                    "aws__raw_ather_id_wallet"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__ather_id/src_aws__ather_id.yml/dbt_expectations_source_expect_6416e66e28d6d50930c0702e3b27d323.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_6416e66e28d6d50930c0702e3b27d323"
            },
            "created_at": 1705293862.2537034,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('COGNITOSUB' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('USERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_6416e66e28d6d50930c0702e3b27d323`",
            "column_name": "dt",
            "file_key_name": "sources.raw_atherid_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_id.b8bea69f04": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_claim_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_35f6ddce3fbc8e8b6d35b8b478356bd5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_id.b8bea69f04",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_35f6ddce3fbc8e8b6d35b8b478356bd5\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_35f6ddce3fbc8e8b6d35b8b478356bd5.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_id",
            "alias": "source_not_null_raw_loyalty_da_35f6ddce3fbc8e8b6d35b8b478356bd5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_claim_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_35f6ddce3fbc8e8b6d35b8b478356bd5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_35f6ddce3fbc8e8b6d35b8b478356bd5"
            },
            "created_at": 1705293862.2560945,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_claim_lootbox`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_35f6ddce3fbc8e8b6d35b8b478356bd5`",
            "column_name": "id",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_createdAt.e29ffce993": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_claim_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_6f158287b2a0c599947aa9f4df9f861b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_createdAt.e29ffce993",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_6f158287b2a0c599947aa9f4df9f861b\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_6f158287b2a0c599947aa9f4df9f861b.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_createdAt",
            "alias": "source_not_null_raw_loyalty_da_6f158287b2a0c599947aa9f4df9f861b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_claim_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_6f158287b2a0c599947aa9f4df9f861b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_6f158287b2a0c599947aa9f4df9f861b"
            },
            "created_at": 1705293862.25692,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_claim_lootbox`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_6f158287b2a0c599947aa9f4df9f861b`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt.46f0543726": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_claim_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_c1a1cc57585f06e05f517825e8adc756",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt.46f0543726",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_c1a1cc57585f06e05f517825e8adc756\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_c1a1cc57585f06e05f517825e8adc756.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt",
            "alias": "source_not_null_raw_loyalty_da_c1a1cc57585f06e05f517825e8adc756",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_claim_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_c1a1cc57585f06e05f517825e8adc756.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_c1a1cc57585f06e05f517825e8adc756"
            },
            "created_at": 1705293862.2577422,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_claim_lootbox`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_c1a1cc57585f06e05f517825e8adc756`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt__date.486da51096": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_claim_lootbox')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_62255aaee3a39a7f078a29583ea6ad1c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt__date.486da51096",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_62255aaee3a39a7f078a29583ea6ad1c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_62255aaee3a39a7f078a29583ea6ad1c.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt__date",
            "alias": "dbt_expectations_source_expect_62255aaee3a39a7f078a29583ea6ad1c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_claim_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/dbt_expectations_source_expect_62255aaee3a39a7f078a29583ea6ad1c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_62255aaee3a39a7f078a29583ea6ad1c"
            },
            "created_at": 1705293862.2586865,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLICADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('QUANTITY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ISRANDOM' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_62255aaee3a39a7f078a29583ea6ad1c`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_id.7d2e7ccc95": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_open_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_8a5446779ae088fa7c553eb1084ab26b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_id.7d2e7ccc95",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_8a5446779ae088fa7c553eb1084ab26b\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_8a5446779ae088fa7c553eb1084ab26b.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_id",
            "alias": "source_not_null_raw_loyalty_da_8a5446779ae088fa7c553eb1084ab26b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_open_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_8a5446779ae088fa7c553eb1084ab26b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_8a5446779ae088fa7c553eb1084ab26b"
            },
            "created_at": 1705293862.2613146,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_open_lootbox`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_8a5446779ae088fa7c553eb1084ab26b`",
            "column_name": "id",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_createdAt.06c741ea1c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_open_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_516b499dc118139228e840ff83e1b4bf",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_createdAt.06c741ea1c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_516b499dc118139228e840ff83e1b4bf\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_516b499dc118139228e840ff83e1b4bf.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_createdAt",
            "alias": "source_not_null_raw_loyalty_da_516b499dc118139228e840ff83e1b4bf",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_open_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_516b499dc118139228e840ff83e1b4bf.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_516b499dc118139228e840ff83e1b4bf"
            },
            "created_at": 1705293862.262254,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_open_lootbox`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_516b499dc118139228e840ff83e1b4bf`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt.3a85d7108c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_open_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_6eff6e842aef08ff589368aef920ddc5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt.3a85d7108c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_6eff6e842aef08ff589368aef920ddc5\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_6eff6e842aef08ff589368aef920ddc5.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt",
            "alias": "source_not_null_raw_loyalty_da_6eff6e842aef08ff589368aef920ddc5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_open_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_6eff6e842aef08ff589368aef920ddc5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_6eff6e842aef08ff589368aef920ddc5"
            },
            "created_at": 1705293862.2630718,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_open_lootbox`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_6eff6e842aef08ff589368aef920ddc5`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt__date.ffc3a85b34": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_open_lootbox')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_c6576e9c06a946aa44c10678a79bb6f8",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt__date.ffc3a85b34",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c6576e9c06a946aa44c10678a79bb6f8\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_c6576e9c06a946aa44c10678a79bb6f8.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt__date",
            "alias": "dbt_expectations_source_expect_c6576e9c06a946aa44c10678a79bb6f8",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_open_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/dbt_expectations_source_expect_c6576e9c06a946aa44c10678a79bb6f8.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_c6576e9c06a946aa44c10678a79bb6f8"
            },
            "created_at": 1705293862.2638729,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLICADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ATHERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOOTBOXID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SPACESHIPPARTIDS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_c6576e9c06a946aa44c10678a79bb6f8`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_id.daee3e4f42": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_spaceship')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_cf233fdcc227ce91dfb5f8d2d6fa1f58",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_id.daee3e4f42",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_cf233fdcc227ce91dfb5f8d2d6fa1f58\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_cf233fdcc227ce91dfb5f8d2d6fa1f58.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_id",
            "alias": "source_not_null_raw_loyalty_da_cf233fdcc227ce91dfb5f8d2d6fa1f58",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_cf233fdcc227ce91dfb5f8d2d6fa1f58.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_cf233fdcc227ce91dfb5f8d2d6fa1f58"
            },
            "created_at": 1705293862.2663906,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_spaceship`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_cf233fdcc227ce91dfb5f8d2d6fa1f58`",
            "column_name": "id",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_createdAt.7bbf3a81f2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_spaceship')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_9a2e4f65ee985a467dd3efa7d5cf9e48",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_createdAt.7bbf3a81f2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_9a2e4f65ee985a467dd3efa7d5cf9e48\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_9a2e4f65ee985a467dd3efa7d5cf9e48.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_createdAt",
            "alias": "source_not_null_raw_loyalty_da_9a2e4f65ee985a467dd3efa7d5cf9e48",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_9a2e4f65ee985a467dd3efa7d5cf9e48.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_9a2e4f65ee985a467dd3efa7d5cf9e48"
            },
            "created_at": 1705293862.2671967,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_spaceship`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_9a2e4f65ee985a467dd3efa7d5cf9e48`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt.e90280d0d1": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_spaceship')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_8f2e842e05d73b80cba76f1821154b05",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt.e90280d0d1",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_8f2e842e05d73b80cba76f1821154b05\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_8f2e842e05d73b80cba76f1821154b05.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt",
            "alias": "source_not_null_raw_loyalty_da_8f2e842e05d73b80cba76f1821154b05",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_8f2e842e05d73b80cba76f1821154b05.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_8f2e842e05d73b80cba76f1821154b05"
            },
            "created_at": 1705293862.2679923,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_spaceship`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_8f2e842e05d73b80cba76f1821154b05`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt__date.f9c1586232": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_spaceship')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_0cec0a3b43e70a68c6a3c4024d538e23",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt__date.f9c1586232",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_0cec0a3b43e70a68c6a3c4024d538e23\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_0cec0a3b43e70a68c6a3c4024d538e23.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt__date",
            "alias": "dbt_expectations_source_expect_0cec0a3b43e70a68c6a3c4024d538e23",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/dbt_expectations_source_expect_0cec0a3b43e70a68c6a3c4024d538e23.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_0cec0a3b43e70a68c6a3c4024d538e23"
            },
            "created_at": 1705293862.2689192,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLICADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ATHERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PARTTOKENIDS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_0cec0a3b43e70a68c6a3c4024d538e23`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_id.6e9edfb7c4": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_scrap_spaceship_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_7e7a106c4f03104e4c8a3607f3cc49df",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_id.6e9edfb7c4",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_7e7a106c4f03104e4c8a3607f3cc49df\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_7e7a106c4f03104e4c8a3607f3cc49df.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_id",
            "alias": "source_not_null_raw_loyalty_da_7e7a106c4f03104e4c8a3607f3cc49df",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_scrap_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_7e7a106c4f03104e4c8a3607f3cc49df.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_7e7a106c4f03104e4c8a3607f3cc49df"
            },
            "created_at": 1705293862.271377,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_scrap_spaceship_parts`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_7e7a106c4f03104e4c8a3607f3cc49df`",
            "column_name": "id",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_createdAt.c3f3507d42": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_scrap_spaceship_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_0c665d61dea66b2c7bdfd1fbc6a751fb",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_createdAt.c3f3507d42",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_0c665d61dea66b2c7bdfd1fbc6a751fb\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_0c665d61dea66b2c7bdfd1fbc6a751fb.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_createdAt",
            "alias": "source_not_null_raw_loyalty_da_0c665d61dea66b2c7bdfd1fbc6a751fb",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_scrap_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_0c665d61dea66b2c7bdfd1fbc6a751fb.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_0c665d61dea66b2c7bdfd1fbc6a751fb"
            },
            "created_at": 1705293862.2721999,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_scrap_spaceship_parts`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_0c665d61dea66b2c7bdfd1fbc6a751fb`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt.6c94d5df71": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_scrap_spaceship_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_79bac3deb64900c445bbddfe147aebd3",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt.6c94d5df71",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_79bac3deb64900c445bbddfe147aebd3\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_79bac3deb64900c445bbddfe147aebd3.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt",
            "alias": "source_not_null_raw_loyalty_da_79bac3deb64900c445bbddfe147aebd3",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_scrap_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_79bac3deb64900c445bbddfe147aebd3.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_79bac3deb64900c445bbddfe147aebd3"
            },
            "created_at": 1705293862.2729936,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_scrap_spaceship_parts`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_79bac3deb64900c445bbddfe147aebd3`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt__date.23c2f77d6b": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_log_scrap_spaceship_parts')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_38045e455692c22b1153d9b4d7076499",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt__date.23c2f77d6b",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_38045e455692c22b1153d9b4d7076499\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_38045e455692c22b1153d9b4d7076499.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt__date",
            "alias": "dbt_expectations_source_expect_38045e455692c22b1153d9b4d7076499",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_log_scrap_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/dbt_expectations_source_expect_38045e455692c22b1153d9b4d7076499.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_38045e455692c22b1153d9b4d7076499"
            },
            "created_at": 1705293862.2737904,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PUBLICADDRESS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ATHERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SPACESHIPPARTTOKENIDS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CASETYPENUMBERS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NEWSPACESHIPPARTTOKENID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NEWSPACESHIPPARTCASETYPENUMBER' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_38045e455692c22b1153d9b4d7076499`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_id.dab68187c7": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_pending_mint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_75f962391fb84178351a2502e61a54ae",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_id.dab68187c7",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_75f962391fb84178351a2502e61a54ae\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_75f962391fb84178351a2502e61a54ae.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_id",
            "alias": "source_not_null_raw_loyalty_da_75f962391fb84178351a2502e61a54ae",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_pending_mint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_75f962391fb84178351a2502e61a54ae.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_75f962391fb84178351a2502e61a54ae"
            },
            "created_at": 1705293862.276323,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_pending_mint`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_75f962391fb84178351a2502e61a54ae`",
            "column_name": "id",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint__to_.203d911a78": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "`to`",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_pending_mint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_cbafc4079eafbd0b7440236725b6193c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint__to_"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint__to_.203d911a78",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_cbafc4079eafbd0b7440236725b6193c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_cbafc4079eafbd0b7440236725b6193c.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint__to_",
            "alias": "source_not_null_raw_loyalty_da_cbafc4079eafbd0b7440236725b6193c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_pending_mint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_cbafc4079eafbd0b7440236725b6193c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_cbafc4079eafbd0b7440236725b6193c"
            },
            "created_at": 1705293862.2771175,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_pending_mint`\nwhere `to` is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_cbafc4079eafbd0b7440236725b6193c`",
            "column_name": "`to`",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_signature.b756c08864": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "signature",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_pending_mint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_e7fce39f7a0a0586e5ab512937c33124",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_signature"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_signature.b756c08864",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_e7fce39f7a0a0586e5ab512937c33124\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_e7fce39f7a0a0586e5ab512937c33124.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_signature",
            "alias": "source_not_null_raw_loyalty_da_e7fce39f7a0a0586e5ab512937c33124",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_pending_mint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_e7fce39f7a0a0586e5ab512937c33124.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_e7fce39f7a0a0586e5ab512937c33124"
            },
            "created_at": 1705293862.2778955,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_pending_mint`\nwhere signature is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_e7fce39f7a0a0586e5ab512937c33124`",
            "column_name": "signature",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_createdAt.c8748990d3": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_pending_mint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_bffab1406832dd22e6a39ebd4a77ff8f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_createdAt.c8748990d3",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_bffab1406832dd22e6a39ebd4a77ff8f\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_bffab1406832dd22e6a39ebd4a77ff8f.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_createdAt",
            "alias": "source_not_null_raw_loyalty_da_bffab1406832dd22e6a39ebd4a77ff8f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_pending_mint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_bffab1406832dd22e6a39ebd4a77ff8f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_bffab1406832dd22e6a39ebd4a77ff8f"
            },
            "created_at": 1705293862.2790756,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_pending_mint`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_bffab1406832dd22e6a39ebd4a77ff8f`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt.336038e037": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_pending_mint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_b78b847f053d2b4fdde3d4dc645a801e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt.336038e037",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_b78b847f053d2b4fdde3d4dc645a801e\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_b78b847f053d2b4fdde3d4dc645a801e.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt",
            "alias": "source_not_null_raw_loyalty_da_b78b847f053d2b4fdde3d4dc645a801e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_pending_mint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_b78b847f053d2b4fdde3d4dc645a801e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_b78b847f053d2b4fdde3d4dc645a801e"
            },
            "created_at": 1705293862.2798438,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_pending_mint`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_b78b847f053d2b4fdde3d4dc645a801e`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt__date.7083c1c801": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_pending_mint')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_33e7ce8bd10d8be997b63bf2cbda1b79",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt__date.7083c1c801",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_33e7ce8bd10d8be997b63bf2cbda1b79\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_33e7ce8bd10d8be997b63bf2cbda1b79.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt__date",
            "alias": "dbt_expectations_source_expect_33e7ce8bd10d8be997b63bf2cbda1b79",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_pending_mint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/dbt_expectations_source_expect_33e7ce8bd10d8be997b63bf2cbda1b79.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_33e7ce8bd10d8be997b63bf2cbda1b79"
            },
            "created_at": 1705293862.2806194,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TO' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BATCHID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SALT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DEADLINE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SIGNATURE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_33e7ce8bd10d8be997b63bf2cbda1b79`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_id.84e0b6c926": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_burned')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_83d7402400bd631c351693c7ae7ae78a",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_id.84e0b6c926",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_83d7402400bd631c351693c7ae7ae78a\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_83d7402400bd631c351693c7ae7ae78a.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_id",
            "alias": "source_not_null_raw_loyalty_da_83d7402400bd631c351693c7ae7ae78a",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_burned"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_83d7402400bd631c351693c7ae7ae78a.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_83d7402400bd631c351693c7ae7ae78a"
            },
            "created_at": 1705293862.2830937,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_burned`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_83d7402400bd631c351693c7ae7ae78a`",
            "column_name": "id",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned__to_.649ebfda5d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "`to`",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_burned')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_8cb9c915cf4dd0be93d2be885b491c6b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned__to_"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned__to_.649ebfda5d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_8cb9c915cf4dd0be93d2be885b491c6b\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_8cb9c915cf4dd0be93d2be885b491c6b.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned__to_",
            "alias": "source_not_null_raw_loyalty_da_8cb9c915cf4dd0be93d2be885b491c6b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_burned"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_8cb9c915cf4dd0be93d2be885b491c6b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_8cb9c915cf4dd0be93d2be885b491c6b"
            },
            "created_at": 1705293862.2838936,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_burned`\nwhere `to` is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_8cb9c915cf4dd0be93d2be885b491c6b`",
            "column_name": "`to`",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_createdAt.015bd59457": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "createdAt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_burned')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_1b0eceebaa9fbdac08f2f9346d5e077c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_createdAt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_createdAt.015bd59457",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_1b0eceebaa9fbdac08f2f9346d5e077c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_1b0eceebaa9fbdac08f2f9346d5e077c.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_createdAt",
            "alias": "source_not_null_raw_loyalty_da_1b0eceebaa9fbdac08f2f9346d5e077c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_burned"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_1b0eceebaa9fbdac08f2f9346d5e077c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_1b0eceebaa9fbdac08f2f9346d5e077c"
            },
            "created_at": 1705293862.2846677,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_burned`\nwhere createdAt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_1b0eceebaa9fbdac08f2f9346d5e077c`",
            "column_name": "createdAt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt.5bf3088879": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_burned')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_loyalty_da_6955f3989c66c52f98a548fb47aa5527",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt.5bf3088879",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_loyalty_da_6955f3989c66c52f98a548fb47aa5527\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_loyalty_da_6955f3989c66c52f98a548fb47aa5527.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt",
            "alias": "source_not_null_raw_loyalty_da_6955f3989c66c52f98a548fb47aa5527",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_burned"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/source_not_null_raw_loyalty_da_6955f3989c66c52f98a548fb47aa5527.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_loyalty_da_6955f3989c66c52f98a548fb47aa5527"
            },
            "created_at": 1705293862.2856076,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_burned`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_loyalty_da_6955f3989c66c52f98a548fb47aa5527`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt__date.8260a401cc": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_loyalty_dashboard_gcs', 'loyalty__raw_burned')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_b21bc0b5197da82337ff7b127305a819",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt__date.8260a401cc",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b21bc0b5197da82337ff7b127305a819\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_b21bc0b5197da82337ff7b127305a819.sql",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt__date",
            "alias": "dbt_expectations_source_expect_b21bc0b5197da82337ff7b127305a819",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_loyalty_dashboard_gcs",
                    "loyalty__raw_burned"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__loyalty/src_aws__loyalty.yml/dbt_expectations_source_expect_b21bc0b5197da82337ff7b127305a819.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_b21bc0b5197da82337ff7b127305a819"
            },
            "created_at": 1705293862.2863958,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TO' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BATCHID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SALT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('UPDATEDAT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_b21bc0b5197da82337ff7b127305a819`",
            "column_name": "dt",
            "file_key_name": "sources.raw_loyalty_dashboard_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_owner.1cbc082ace": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "owner",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_b5a6a034070cfd8e050ca817cd5a7063",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_owner"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_owner.1cbc082ace",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_b5a6a034070cfd8e050ca817cd5a7063\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_b5a6a034070cfd8e050ca817cd5a7063.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_owner",
            "alias": "source_not_null_raw_aws_opense_b5a6a034070cfd8e050ca817cd5a7063",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_b5a6a034070cfd8e050ca817cd5a7063.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_b5a6a034070cfd8e050ca817cd5a7063"
            },
            "created_at": 1705293862.288957,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Lootbox`\nwhere owner is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_b5a6a034070cfd8e050ca817cd5a7063`",
            "column_name": "owner",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.4cc562561a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_lootbox')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_f82f51c6b55bad3268706ba49f704909",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.4cc562561a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_f82f51c6b55bad3268706ba49f704909\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_f82f51c6b55bad3268706ba49f704909.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt",
            "alias": "source_not_null_raw_aws_opense_f82f51c6b55bad3268706ba49f704909",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_f82f51c6b55bad3268706ba49f704909.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_f82f51c6b55bad3268706ba49f704909"
            },
            "created_at": 1705293862.2897637,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Lootbox`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_f82f51c6b55bad3268706ba49f704909`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.32bc4c3c59": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_lootbox')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_ea87e872e66353968716db6aa1c8792a",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.32bc4c3c59",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_ea87e872e66353968716db6aa1c8792a\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_ea87e872e66353968716db6aa1c8792a.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt",
            "alias": "dbt_expectations_source_expect_ea87e872e66353968716db6aa1c8792a",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_lootbox"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/dbt_expectations_source_expect_ea87e872e66353968716db6aa1c8792a.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_ea87e872e66353968716db6aa1c8792a"
            },
            "created_at": 1705293862.2905536,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DT' as STRING) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_ea87e872e66353968716db6aa1c8792a`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_owner.c7f2a42a76": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "owner",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_62539b5cf7a80da8c581de3725d8e1df",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_owner"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_owner.c7f2a42a76",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_62539b5cf7a80da8c581de3725d8e1df\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_62539b5cf7a80da8c581de3725d8e1df.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_owner",
            "alias": "source_not_null_raw_aws_opense_62539b5cf7a80da8c581de3725d8e1df",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_62539b5cf7a80da8c581de3725d8e1df.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_62539b5cf7a80da8c581de3725d8e1df"
            },
            "created_at": 1705293862.2928052,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Spaceship`\nwhere owner is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_62539b5cf7a80da8c581de3725d8e1df`",
            "column_name": "owner",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.bce426254a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_9e2932b98cfc50724fdcf638a2aadd78",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.bce426254a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_9e2932b98cfc50724fdcf638a2aadd78\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_9e2932b98cfc50724fdcf638a2aadd78.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt",
            "alias": "source_not_null_raw_aws_opense_9e2932b98cfc50724fdcf638a2aadd78",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_9e2932b98cfc50724fdcf638a2aadd78.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_9e2932b98cfc50724fdcf638a2aadd78"
            },
            "created_at": 1705293862.293652,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Spaceship`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_9e2932b98cfc50724fdcf638a2aadd78`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.f73a0b8619": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_bf12b3e10157e46a2936f6b012f147e0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.f73a0b8619",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_bf12b3e10157e46a2936f6b012f147e0\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_bf12b3e10157e46a2936f6b012f147e0.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt",
            "alias": "dbt_expectations_source_expect_bf12b3e10157e46a2936f6b012f147e0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/dbt_expectations_source_expect_bf12b3e10157e46a2936f6b012f147e0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_bf12b3e10157e46a2936f6b012f147e0"
            },
            "created_at": 1705293862.29444,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DT' as STRING) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_bf12b3e10157e46a2936f6b012f147e0`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_owner.527c46a7a0": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "owner",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_473c0b46cf7296ed6a3977673c293948",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_owner"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_owner.527c46a7a0",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_473c0b46cf7296ed6a3977673c293948\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_473c0b46cf7296ed6a3977673c293948.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_owner",
            "alias": "source_not_null_raw_aws_opense_473c0b46cf7296ed6a3977673c293948",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_473c0b46cf7296ed6a3977673c293948.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_473c0b46cf7296ed6a3977673c293948"
            },
            "created_at": 1705293862.2966871,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_SpaceshipParts`\nwhere owner is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_473c0b46cf7296ed6a3977673c293948`",
            "column_name": "owner",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.95e2485465": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship_parts')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_39e96acfca97879ac9b7d169dff823a4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.95e2485465",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_39e96acfca97879ac9b7d169dff823a4\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_39e96acfca97879ac9b7d169dff823a4.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt",
            "alias": "source_not_null_raw_aws_opense_39e96acfca97879ac9b7d169dff823a4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_39e96acfca97879ac9b7d169dff823a4.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_39e96acfca97879ac9b7d169dff823a4"
            },
            "created_at": 1705293862.2975128,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_SpaceshipParts`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_39e96acfca97879ac9b7d169dff823a4`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.dbc29f555f": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_spaceship_parts')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_37cc39ba7fc89f5b53f0611d225ccc0c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.dbc29f555f",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_37cc39ba7fc89f5b53f0611d225ccc0c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_37cc39ba7fc89f5b53f0611d225ccc0c.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt",
            "alias": "dbt_expectations_source_expect_37cc39ba7fc89f5b53f0611d225ccc0c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_spaceship_parts"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/dbt_expectations_source_expect_37cc39ba7fc89f5b53f0611d225ccc0c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_37cc39ba7fc89f5b53f0611d225ccc0c"
            },
            "created_at": 1705293862.2982907,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DT' as STRING) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_37cc39ba7fc89f5b53f0611d225ccc0c`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_owner.4ccb8609f2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "owner",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_sculpture')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_40e3ce8ecca0361dad07e0a1ba61812e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_owner"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_owner.4ccb8609f2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_40e3ce8ecca0361dad07e0a1ba61812e\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_40e3ce8ecca0361dad07e0a1ba61812e.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_owner",
            "alias": "source_not_null_raw_aws_opense_40e3ce8ecca0361dad07e0a1ba61812e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_sculpture"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_40e3ce8ecca0361dad07e0a1ba61812e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_40e3ce8ecca0361dad07e0a1ba61812e"
            },
            "created_at": 1705293862.3005161,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Sculpture`\nwhere owner is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_40e3ce8ecca0361dad07e0a1ba61812e`",
            "column_name": "owner",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.aafc18a412": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_sculpture')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_016486fc9de6f87c2b15695ba5f0cd59",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.aafc18a412",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_016486fc9de6f87c2b15695ba5f0cd59\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_016486fc9de6f87c2b15695ba5f0cd59.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt",
            "alias": "source_not_null_raw_aws_opense_016486fc9de6f87c2b15695ba5f0cd59",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_sculpture"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_016486fc9de6f87c2b15695ba5f0cd59.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_016486fc9de6f87c2b15695ba5f0cd59"
            },
            "created_at": 1705293862.3013074,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Sculpture`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_016486fc9de6f87c2b15695ba5f0cd59`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.01b5de2945": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_sculpture')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_2d0e008335b002a3450529cf91551b1a",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.01b5de2945",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2d0e008335b002a3450529cf91551b1a\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_2d0e008335b002a3450529cf91551b1a.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt",
            "alias": "dbt_expectations_source_expect_2d0e008335b002a3450529cf91551b1a",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_sculpture"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/dbt_expectations_source_expect_2d0e008335b002a3450529cf91551b1a.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_2d0e008335b002a3450529cf91551b1a"
            },
            "created_at": 1705293862.302491,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DT' as STRING) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_2d0e008335b002a3450529cf91551b1a`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_owner.7760aeeb20": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "owner",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_inu')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_e991b8b71ffad534fbe726912bcc5534",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_owner"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_owner.7760aeeb20",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_e991b8b71ffad534fbe726912bcc5534\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_e991b8b71ffad534fbe726912bcc5534.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_owner",
            "alias": "source_not_null_raw_aws_opense_e991b8b71ffad534fbe726912bcc5534",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_inu"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_e991b8b71ffad534fbe726912bcc5534.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_e991b8b71ffad534fbe726912bcc5534"
            },
            "created_at": 1705293862.3051076,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_INU`\nwhere owner is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_e991b8b71ffad534fbe726912bcc5534`",
            "column_name": "owner",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.4564aa20a8": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_inu')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_ffa1b6ae731174a2a8246ba4a9e9a56d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.4564aa20a8",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_ffa1b6ae731174a2a8246ba4a9e9a56d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_ffa1b6ae731174a2a8246ba4a9e9a56d.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt",
            "alias": "source_not_null_raw_aws_opense_ffa1b6ae731174a2a8246ba4a9e9a56d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_inu"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_ffa1b6ae731174a2a8246ba4a9e9a56d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_ffa1b6ae731174a2a8246ba4a9e9a56d"
            },
            "created_at": 1705293862.306062,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_INU`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_ffa1b6ae731174a2a8246ba4a9e9a56d`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.b3e5fe734e": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_inu')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_f37c8de947625f8354074b8f3abd9d3f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.b3e5fe734e",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f37c8de947625f8354074b8f3abd9d3f\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_f37c8de947625f8354074b8f3abd9d3f.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt",
            "alias": "dbt_expectations_source_expect_f37c8de947625f8354074b8f3abd9d3f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_inu"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/dbt_expectations_source_expect_f37c8de947625f8354074b8f3abd9d3f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_f37c8de947625f8354074b8f3abd9d3f"
            },
            "created_at": 1705293862.3068407,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DT' as STRING) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_f37c8de947625f8354074b8f3abd9d3f`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_owner.ecc398def2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "owner",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_neko')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_a14c4081707ef87bbf77612d09d8a52c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_owner"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_owner.ecc398def2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_a14c4081707ef87bbf77612d09d8a52c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_a14c4081707ef87bbf77612d09d8a52c.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_owner",
            "alias": "source_not_null_raw_aws_opense_a14c4081707ef87bbf77612d09d8a52c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_neko"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_a14c4081707ef87bbf77612d09d8a52c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_a14c4081707ef87bbf77612d09d8a52c"
            },
            "created_at": 1705293862.309128,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_NEKO`\nwhere owner is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_a14c4081707ef87bbf77612d09d8a52c`",
            "column_name": "owner",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.8e8f578326": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_neko')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_opense_fa08bed9933b3b68a395df130b9ecd8d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.8e8f578326",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_opense_fa08bed9933b3b68a395df130b9ecd8d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_opense_fa08bed9933b3b68a395df130b9ecd8d.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt",
            "alias": "source_not_null_raw_aws_opense_fa08bed9933b3b68a395df130b9ecd8d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_neko"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/source_not_null_raw_aws_opense_fa08bed9933b3b68a395df130b9ecd8d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_opense_fa08bed9933b3b68a395df130b9ecd8d"
            },
            "created_at": 1705293862.3099358,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_NEKO`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_opense_fa08bed9933b3b68a395df130b9ecd8d`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.a455cc6015": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_opensearch_onchain_nft', 'opensearch_onchain__raw_neko')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_1d8647d7ee0c29fddf3611873337e5e1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.a455cc6015",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1d8647d7ee0c29fddf3611873337e5e1\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_1d8647d7ee0c29fddf3611873337e5e1.sql",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt",
            "alias": "dbt_expectations_source_expect_1d8647d7ee0c29fddf3611873337e5e1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_opensearch_onchain_nft",
                    "opensearch_onchain__raw_neko"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/opensearch_onchain/src_opensearch_onchain.yml/dbt_expectations_source_expect_1d8647d7ee0c29fddf3611873337e5e1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_1d8647d7ee0c29fddf3611873337e5e1"
            },
            "created_at": 1705293862.310707,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('DT' as STRING) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_1d8647d7ee0c29fddf3611873337e5e1`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_opensearch_onchain_nft"
        },
        "test.dbt_sipher.source_not_null_raw_social_discord_user_info_created_at.eb561c0cb5": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "created_at",
                    "model": "{{ get_where_subquery(source('raw_social', 'discord_user_info')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.discord_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_discord_user_info_created_at"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_discord_user_info_created_at.eb561c0cb5",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_discord_user_info_created_at.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_discord_user_info_created_at",
            "alias": "source_not_null_raw_social_discord_user_info_created_at",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "discord_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_discord_user_info_created_at.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3135011,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`discord_user_info__*`\nwhere created_at is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_discord_user_info_created_at`",
            "column_name": "created_at",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_discord_user_info_id.8b125c4225": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'discord_user_info')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.discord_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_discord_user_info_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_discord_user_info_id.8b125c4225",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_discord_user_info_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_discord_user_info_id",
            "alias": "source_not_null_raw_social_discord_user_info_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "discord_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_discord_user_info_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.314382,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`discord_user_info__*`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_discord_user_info_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_created_at.c1fb05bd4c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "created_at",
                    "model": "{{ get_where_subquery(source('raw_social', 'discord_profile_stats')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.discord_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_discord_profile_stats_created_at"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_created_at.c1fb05bd4c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_discord_profile_stats_created_at.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_discord_profile_stats_created_at",
            "alias": "source_not_null_raw_social_discord_profile_stats_created_at",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "discord_profile_stats"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_discord_profile_stats_created_at.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3153017,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`discord_profile_stats__*`\nwhere created_at is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_discord_profile_stats_created_at`",
            "column_name": "created_at",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_id.15d97e5337": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'discord_profile_stats')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.discord_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_discord_profile_stats_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_id.15d97e5337",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_discord_profile_stats_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_discord_profile_stats_id",
            "alias": "source_not_null_raw_social_discord_profile_stats_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "discord_profile_stats"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_discord_profile_stats_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.316106,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`discord_profile_stats__*`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_discord_profile_stats_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_tiktok_profile_stats_date.3fd76ba76a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "date",
                    "model": "{{ get_where_subquery(source('raw_social', 'tiktok_profile_stats')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.tiktok_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_tiktok_profile_stats_date"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_tiktok_profile_stats_date.3fd76ba76a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_tiktok_profile_stats_date.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_tiktok_profile_stats_date",
            "alias": "source_not_null_raw_social_tiktok_profile_stats_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "tiktok_profile_stats"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_tiktok_profile_stats_date.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3171296,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`tiktok_profile_stats`\nwhere date is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_tiktok_profile_stats_date`",
            "column_name": "date",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_tiktok_user_info_id.a07df7d3b8": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'tiktok_user_info')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.tiktok_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_tiktok_user_info_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_tiktok_user_info_id.a07df7d3b8",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_tiktok_user_info_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_tiktok_user_info_id",
            "alias": "source_not_null_raw_social_tiktok_user_info_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "tiktok_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_tiktok_user_info_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3180308,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`tiktok_user_info`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_tiktok_user_info_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment_post_id.bf8ddd01fb": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "post_id",
                    "model": "{{ get_where_subquery(source('raw_social', 'tiktok_video_comment')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.tiktok_video_comment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_tiktok_video_comment_post_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment_post_id.bf8ddd01fb",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_tiktok_video_comment_post_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_tiktok_video_comment_post_id",
            "alias": "source_not_null_raw_social_tiktok_video_comment_post_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "tiktok_video_comment"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_tiktok_video_comment_post_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3189158,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`tiktok_video_*`\nwhere post_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_tiktok_video_comment_post_id`",
            "column_name": "post_id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment__desc_.0305ba5b69": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "`desc`",
                    "model": "{{ get_where_subquery(source('raw_social', 'tiktok_video_comment')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.tiktok_video_comment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_tiktok_video_comment__desc_"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment__desc_.0305ba5b69",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_tiktok_video_comment__desc_.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_tiktok_video_comment__desc_",
            "alias": "source_not_null_raw_social_tiktok_video_comment__desc_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "tiktok_video_comment"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_tiktok_video_comment__desc_.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3196967,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`tiktok_video_*`\nwhere `desc` is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_tiktok_video_comment__desc_`",
            "column_name": "`desc`",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_twitter_profile_stats_id.10f1805edf": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'twitter_profile_stats')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_twitter_profile_stats_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_twitter_profile_stats_id.10f1805edf",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_twitter_profile_stats_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_twitter_profile_stats_id",
            "alias": "source_not_null_raw_social_twitter_profile_stats_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_profile_stats"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_twitter_profile_stats_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3210895,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`twitter_profile_stats__SIPHERxyz__`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_twitter_profile_stats_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_created_at.94d84e4041": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "created_at",
                    "model": "{{ get_where_subquery(source('raw_social', 'twitter_timeline')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_timeline"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_twitter_timeline_created_at"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_created_at.94d84e4041",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_twitter_timeline_created_at.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_twitter_timeline_created_at",
            "alias": "source_not_null_raw_social_twitter_timeline_created_at",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_timeline"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_twitter_timeline_created_at.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.321982,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`twitter_timeline`\nwhere created_at is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_twitter_timeline_created_at`",
            "column_name": "created_at",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_id.73c50f8658": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'twitter_timeline')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_timeline"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_twitter_timeline_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_id.73c50f8658",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_twitter_timeline_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_twitter_timeline_id",
            "alias": "source_not_null_raw_social_twitter_timeline_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_timeline"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_twitter_timeline_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3228061,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`twitter_timeline`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_twitter_timeline_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_created_at.3163bfddcb": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "created_at",
                    "model": "{{ get_where_subquery(source('raw_social', 'twitter_user_info')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_twitter_user_info_created_at"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_created_at.3163bfddcb",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_twitter_user_info_created_at.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_twitter_user_info_created_at",
            "alias": "source_not_null_raw_social_twitter_user_info_created_at",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_twitter_user_info_created_at.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.323822,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`twitter_user_info__SIPHERxyz__*`\nwhere created_at is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_twitter_user_info_created_at`",
            "column_name": "created_at",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_id.6094ac3138": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'twitter_user_info')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.twitter_user_info"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_twitter_user_info_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_id.6094ac3138",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_twitter_user_info_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_twitter_user_info_id",
            "alias": "source_not_null_raw_social_twitter_user_info_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "twitter_user_info"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_twitter_user_info_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3248253,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`twitter_user_info__SIPHERxyz__*`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_twitter_user_info_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_id.b55f898f15": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_page_feed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_page_feed_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_id.b55f898f15",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_facebook_sipher_page_feed_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_page_feed_id",
            "alias": "source_not_null_raw_social_facebook_sipher_page_feed_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_page_feed"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_facebook_sipher_page_feed_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3257318,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_page_feed`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_facebook_sipher_page_feed_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed___collected_ts.f5fc502572": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "__collected_ts",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_page_feed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_social_fac_6da1170aaefd90143f1cd12502225ff9",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_page_feed___collected_ts"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed___collected_ts.f5fc502572",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_social_fac_6da1170aaefd90143f1cd12502225ff9\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_fac_6da1170aaefd90143f1cd12502225ff9.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_page_feed___collected_ts",
            "alias": "source_not_null_raw_social_fac_6da1170aaefd90143f1cd12502225ff9",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_page_feed"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_fac_6da1170aaefd90143f1cd12502225ff9.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_social_fac_6da1170aaefd90143f1cd12502225ff9"
            },
            "created_at": 1705293862.326559,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_page_feed`\nwhere __collected_ts is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_fac_6da1170aaefd90143f1cd12502225ff9`",
            "column_name": "__collected_ts",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_page_id.ad2948bb7a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "page_id",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_page_feed')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_page_feed_page_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_page_id.ad2948bb7a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_facebook_sipher_page_feed_page_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_page_feed_page_id",
            "alias": "source_not_null_raw_social_facebook_sipher_page_feed_page_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_page_feed"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_facebook_sipher_page_feed_page_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.327365,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_page_feed`\nwhere page_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_facebook_sipher_page_feed_page_id`",
            "column_name": "page_id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_name.f0eb1ad46e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "name",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_post_insights')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_post_insights_name"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_name.f0eb1ad46e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_facebook_sipher_post_insights_name.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_post_insights_name",
            "alias": "source_not_null_raw_social_facebook_sipher_post_insights_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_post_insights"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_facebook_sipher_post_insights_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3283813,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_post_insights`\nwhere name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_facebook_sipher_post_insights_name`",
            "column_name": "name",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_id.0b96b4a409": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_post_insights')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_post_insights_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_id.0b96b4a409",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_facebook_sipher_post_insights_id.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_post_insights_id",
            "alias": "source_not_null_raw_social_facebook_sipher_post_insights_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_post_insights"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_facebook_sipher_post_insights_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3291905,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_post_insights`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_facebook_sipher_post_insights_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights___collected_ts.a478ebf264": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "__collected_ts",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_post_insights')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_social_fac_fba8971e056ae3ba15b6cff53bbc8a78",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_post_insights___collected_ts"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights___collected_ts.a478ebf264",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_social_fac_fba8971e056ae3ba15b6cff53bbc8a78\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_fac_fba8971e056ae3ba15b6cff53bbc8a78.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_post_insights___collected_ts",
            "alias": "source_not_null_raw_social_fac_fba8971e056ae3ba15b6cff53bbc8a78",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_post_insights"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_fac_fba8971e056ae3ba15b6cff53bbc8a78.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_social_fac_fba8971e056ae3ba15b6cff53bbc8a78"
            },
            "created_at": 1705293862.329982,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_post_insights`\nwhere __collected_ts is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_fac_fba8971e056ae3ba15b6cff53bbc8a78`",
            "column_name": "__collected_ts",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments_post_id.70ee486a35": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "post_id",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_post_comments')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_post_comments"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_social_fac_91a99305750bf50614d3bd7702193ddc",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_post_comments_post_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments_post_id.70ee486a35",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_social_fac_91a99305750bf50614d3bd7702193ddc\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_fac_91a99305750bf50614d3bd7702193ddc.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_post_comments_post_id",
            "alias": "source_not_null_raw_social_fac_91a99305750bf50614d3bd7702193ddc",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_post_comments"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_fac_91a99305750bf50614d3bd7702193ddc.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_social_fac_91a99305750bf50614d3bd7702193ddc"
            },
            "created_at": 1705293862.3308706,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_post_comments`\nwhere post_id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_fac_91a99305750bf50614d3bd7702193ddc`",
            "column_name": "post_id",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments___collected_ts.2b680a92e4": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "__collected_ts",
                    "model": "{{ get_where_subquery(source('raw_social', 'facebook_sipher_post_comments')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_social.facebook_sipher_post_comments"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_social_fac_455d7f3d16f36e11ba3ef4bf4562fecc",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "source_not_null_raw_social_facebook_sipher_post_comments___collected_ts"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments___collected_ts.2b680a92e4",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_social_fac_455d7f3d16f36e11ba3ef4bf4562fecc\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_social_fac_455d7f3d16f36e11ba3ef4bf4562fecc.sql",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "source_not_null_raw_social_facebook_sipher_post_comments___collected_ts",
            "alias": "source_not_null_raw_social_fac_455d7f3d16f36e11ba3ef4bf4562fecc",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_social",
                    "facebook_sipher_post_comments"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/social/src_social.yml/source_not_null_raw_social_fac_455d7f3d16f36e11ba3ef4bf4562fecc.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_social_fac_455d7f3d16f36e11ba3ef4bf4562fecc"
            },
            "created_at": 1705293862.3316627,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_social`.`facebook_sipher_post_comments`\nwhere __collected_ts is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_social_fac_455d7f3d16f36e11ba3ef4bf4562fecc`",
            "column_name": "__collected_ts",
            "file_key_name": "sources.raw_social"
        },
        "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_timestamp.b42e524759": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_timestamp",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_firebase_s_0a3444aba0aa69dcdb0b523edf7a4547",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "source_not_null_raw_firebase_sipher_odyssey_events_event_timestamp"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_timestamp.b42e524759",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_firebase_s_0a3444aba0aa69dcdb0b523edf7a4547\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_firebase_s_0a3444aba0aa69dcdb0b523edf7a4547.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "source_not_null_raw_firebase_sipher_odyssey_events_event_timestamp",
            "alias": "source_not_null_raw_firebase_s_0a3444aba0aa69dcdb0b523edf7a4547",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/source_not_null_raw_firebase_s_0a3444aba0aa69dcdb0b523edf7a4547.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_firebase_s_0a3444aba0aa69dcdb0b523edf7a4547"
            },
            "created_at": 1705293862.3331387,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipherg1production`.`analytics_387396350`.`events_*`\nwhere event_timestamp is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_firebase_s_0a3444aba0aa69dcdb0b523edf7a4547`",
            "column_name": "event_timestamp",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_timestamp.2554e09518": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "event_timestamp",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_aed3ffd30696830a8a6ad51803ce0b58",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_timestamp"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_timestamp.2554e09518",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_aed3ffd30696830a8a6ad51803ce0b58\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_aed3ffd30696830a8a6ad51803ce0b58.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_timestamp",
            "alias": "dbt_expectations_source_expect_aed3ffd30696830a8a6ad51803ce0b58",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_aed3ffd30696830a8a6ad51803ce0b58.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_aed3ffd30696830a8a6ad51803ce0b58"
            },
            "created_at": 1705293862.3339586,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_TIMESTAMP' as STRING) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_aed3ffd30696830a8a6ad51803ce0b58`",
            "column_name": "event_timestamp",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_name.762d8ac1fb": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_name",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "source_not_null_raw_firebase_sipher_odyssey_events_event_name"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_name.762d8ac1fb",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_firebase_sipher_odyssey_events_event_name.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "source_not_null_raw_firebase_sipher_odyssey_events_event_name",
            "alias": "source_not_null_raw_firebase_sipher_odyssey_events_event_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/source_not_null_raw_firebase_sipher_odyssey_events_event_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3365006,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipherg1production`.`analytics_387396350`.`events_*`\nwhere event_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_firebase_sipher_odyssey_events_event_name`",
            "column_name": "event_name",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_params.d6f864d1b8": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "event_params",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_ff96f7455453a0f027e235725e7dcb9a",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_params"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_params.d6f864d1b8",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_ff96f7455453a0f027e235725e7dcb9a\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_ff96f7455453a0f027e235725e7dcb9a.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_params",
            "alias": "dbt_expectations_source_expect_ff96f7455453a0f027e235725e7dcb9a",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_ff96f7455453a0f027e235725e7dcb9a.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_ff96f7455453a0f027e235725e7dcb9a"
            },
            "created_at": 1705293862.3373132,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_PARAMS' as STRING) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_ff96f7455453a0f027e235725e7dcb9a`",
            "column_name": "event_params",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_user_properties.f09b4dd1a1": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "user_properties",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_72f90703432a5fe6c248849d21f37cb6",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_user_properties"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_user_properties.f09b4dd1a1",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_72f90703432a5fe6c248849d21f37cb6\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_72f90703432a5fe6c248849d21f37cb6.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_user_properties",
            "alias": "dbt_expectations_source_expect_72f90703432a5fe6c248849d21f37cb6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_72f90703432a5fe6c248849d21f37cb6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_72f90703432a5fe6c248849d21f37cb6"
            },
            "created_at": 1705293862.3395398,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('USER_PROPERTIES' as STRING) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_72f90703432a5fe6c248849d21f37cb6`",
            "column_name": "user_properties",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_ecommerce.62d3f0249e": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "ecommerce",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_86d089983875393d051ae431577bead2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_ecommerce"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_ecommerce.62d3f0249e",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_86d089983875393d051ae431577bead2\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_86d089983875393d051ae431577bead2.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_ecommerce",
            "alias": "dbt_expectations_source_expect_86d089983875393d051ae431577bead2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_86d089983875393d051ae431577bead2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_86d089983875393d051ae431577bead2"
            },
            "created_at": 1705293862.341735,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ECOMMERCE' as STRING) as column_name,\n            21 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_86d089983875393d051ae431577bead2`",
            "column_name": "ecommerce",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_items.dc6acdf0a4": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "items",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_a713c22707317f66a458f58e8a11aae8",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_items"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_items.dc6acdf0a4",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a713c22707317f66a458f58e8a11aae8\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_a713c22707317f66a458f58e8a11aae8.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_items",
            "alias": "dbt_expectations_source_expect_a713c22707317f66a458f58e8a11aae8",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_a713c22707317f66a458f58e8a11aae8.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_a713c22707317f66a458f58e8a11aae8"
            },
            "created_at": 1705293862.3437397,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('ITEMS' as STRING) as column_name,\n            22 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_a713c22707317f66a458f58e8a11aae8`",
            "column_name": "items",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_collected_traffic_source.740db06810": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "collected_traffic_source",
                    "model": "{{ get_where_subquery(source('raw_firebase_sipher_odyssey', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_7571f48559b5d16f74ae818b0b044ab1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_collected_traffic_source"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_collected_traffic_source.740db06810",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7571f48559b5d16f74ae818b0b044ab1\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_7571f48559b5d16f74ae818b0b044ab1.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_collected_traffic_source",
            "alias": "dbt_expectations_source_expect_7571f48559b5d16f74ae818b0b044ab1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_sipher_odyssey",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_7571f48559b5d16f74ae818b0b044ab1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_7571f48559b5d16f74ae818b0b044ab1"
            },
            "created_at": 1705293862.346386,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('COLLECTED_TRAFFIC_SOURCE' as STRING) as column_name,\n            23 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_7571f48559b5d16f74ae818b0b044ab1`",
            "column_name": "collected_traffic_source",
            "file_key_name": "sources.raw_firebase_sipher_odyssey"
        },
        "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_timestamp.f225450ba4": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_timestamp",
                    "model": "{{ get_where_subquery(source('raw_firebase_hidden_atlas', 'events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_hidden_atlas.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_firebase_h_5d448eca2418d1be7d70df53468d34a6",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "source_not_null_raw_firebase_hidden_atlas_events_event_timestamp"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_timestamp.f225450ba4",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_firebase_h_5d448eca2418d1be7d70df53468d34a6\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_firebase_h_5d448eca2418d1be7d70df53468d34a6.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "source_not_null_raw_firebase_hidden_atlas_events_event_timestamp",
            "alias": "source_not_null_raw_firebase_h_5d448eca2418d1be7d70df53468d34a6",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_hidden_atlas",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/source_not_null_raw_firebase_h_5d448eca2418d1be7d70df53468d34a6.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_firebase_h_5d448eca2418d1be7d70df53468d34a6"
            },
            "created_at": 1705293862.3490772,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `hidden-atlas`.`analytics_402014087`.`events_*`\nwhere event_timestamp is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_firebase_h_5d448eca2418d1be7d70df53468d34a6`",
            "column_name": "event_timestamp",
            "file_key_name": "sources.raw_firebase_hidden_atlas"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_timestamp.a032dca918": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "event_timestamp",
                    "model": "{{ get_where_subquery(source('raw_firebase_hidden_atlas', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_hidden_atlas.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_edd94f8c35e866c64fadbdd6080b7c82",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_timestamp"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_timestamp.a032dca918",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_edd94f8c35e866c64fadbdd6080b7c82\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_edd94f8c35e866c64fadbdd6080b7c82.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_timestamp",
            "alias": "dbt_expectations_source_expect_edd94f8c35e866c64fadbdd6080b7c82",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_hidden_atlas",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_edd94f8c35e866c64fadbdd6080b7c82.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_edd94f8c35e866c64fadbdd6080b7c82"
            },
            "created_at": 1705293862.3498995,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_TIMESTAMP' as STRING) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_edd94f8c35e866c64fadbdd6080b7c82`",
            "column_name": "event_timestamp",
            "file_key_name": "sources.raw_firebase_hidden_atlas"
        },
        "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_name.e1d7be3511": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_name",
                    "model": "{{ get_where_subquery(source('raw_firebase_hidden_atlas', 'events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_hidden_atlas.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "source_not_null_raw_firebase_hidden_atlas_events_event_name"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_name.e1d7be3511",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_firebase_hidden_atlas_events_event_name.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "source_not_null_raw_firebase_hidden_atlas_events_event_name",
            "alias": "source_not_null_raw_firebase_hidden_atlas_events_event_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_hidden_atlas",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/source_not_null_raw_firebase_hidden_atlas_events_event_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3521092,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `hidden-atlas`.`analytics_402014087`.`events_*`\nwhere event_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_firebase_hidden_atlas_events_event_name`",
            "column_name": "event_name",
            "file_key_name": "sources.raw_firebase_hidden_atlas"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_params.424ad741b4": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "event_params",
                    "model": "{{ get_where_subquery(source('raw_firebase_hidden_atlas', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_hidden_atlas.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_15d3e1988cbb5d0a78010ce6363d36a2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_params"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_params.424ad741b4",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_15d3e1988cbb5d0a78010ce6363d36a2\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_15d3e1988cbb5d0a78010ce6363d36a2.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_params",
            "alias": "dbt_expectations_source_expect_15d3e1988cbb5d0a78010ce6363d36a2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_hidden_atlas",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_15d3e1988cbb5d0a78010ce6363d36a2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_15d3e1988cbb5d0a78010ce6363d36a2"
            },
            "created_at": 1705293862.352909,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_PARAMS' as STRING) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_15d3e1988cbb5d0a78010ce6363d36a2`",
            "column_name": "event_params",
            "file_key_name": "sources.raw_firebase_hidden_atlas"
        },
        "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_timestamp.b1c9baab46": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_timestamp",
                    "model": "{{ get_where_subquery(source('raw_firebase_artventure', 'events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_artventure.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "source_not_null_raw_firebase_artventure_events_event_timestamp"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_timestamp.b1c9baab46",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_firebase_artventure_events_event_timestamp.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "source_not_null_raw_firebase_artventure_events_event_timestamp",
            "alias": "source_not_null_raw_firebase_artventure_events_event_timestamp",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_artventure",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/source_not_null_raw_firebase_artventure_events_event_timestamp.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3551722,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `art-venture-387704`.`analytics_376091252`.`events_*`\nwhere event_timestamp is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_firebase_artventure_events_event_timestamp`",
            "column_name": "event_timestamp",
            "file_key_name": "sources.raw_firebase_artventure"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_timestamp.336cb29b91": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "event_timestamp",
                    "model": "{{ get_where_subquery(source('raw_firebase_artventure', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_artventure.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_2e15f19e649139ed1781e5a0f7f53a86",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_timestamp"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_timestamp.336cb29b91",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2e15f19e649139ed1781e5a0f7f53a86\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_2e15f19e649139ed1781e5a0f7f53a86.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_timestamp",
            "alias": "dbt_expectations_source_expect_2e15f19e649139ed1781e5a0f7f53a86",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_artventure",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_2e15f19e649139ed1781e5a0f7f53a86.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_2e15f19e649139ed1781e5a0f7f53a86"
            },
            "created_at": 1705293862.3560405,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_TIMESTAMP' as STRING) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_2e15f19e649139ed1781e5a0f7f53a86`",
            "column_name": "event_timestamp",
            "file_key_name": "sources.raw_firebase_artventure"
        },
        "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_name.3d7db8fa8d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "event_name",
                    "model": "{{ get_where_subquery(source('raw_firebase_artventure', 'events')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_artventure.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "source_not_null_raw_firebase_artventure_events_event_name"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_name.3d7db8fa8d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_firebase_artventure_events_event_name.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "source_not_null_raw_firebase_artventure_events_event_name",
            "alias": "source_not_null_raw_firebase_artventure_events_event_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_artventure",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/source_not_null_raw_firebase_artventure_events_event_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3585749,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `art-venture-387704`.`analytics_376091252`.`events_*`\nwhere event_name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_firebase_artventure_events_event_name`",
            "column_name": "event_name",
            "file_key_name": "sources.raw_firebase_artventure"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_params.d811f5cb62": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "event_params",
                    "model": "{{ get_where_subquery(source('raw_firebase_artventure', 'events')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_firebase_artventure.events"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_3196d8b556c2d09d65b83fff3b427d0e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_params"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_params.d811f5cb62",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_3196d8b556c2d09d65b83fff3b427d0e\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_3196d8b556c2d09d65b83fff3b427d0e.sql",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_params",
            "alias": "dbt_expectations_source_expect_3196d8b556c2d09d65b83fff3b427d0e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_firebase_artventure",
                    "events"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/firebase/src_firebase.yml/dbt_expectations_source_expect_3196d8b556c2d09d65b83fff3b427d0e.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_3196d8b556c2d09d65b83fff3b427d0e"
            },
            "created_at": 1705293862.3595648,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EVENT_PARAMS' as STRING) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_3196d8b556c2d09d65b83fff3b427d0e`",
            "column_name": "event_params",
            "file_key_name": "sources.raw_firebase_artventure"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.b3dfb1a43a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_777c057fa5275e4e5486ed0b761db4f0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.b3dfb1a43a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_777c057fa5275e4e5486ed0b761db4f0\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_777c057fa5275e4e5486ed0b761db4f0.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId",
            "alias": "source_not_null_raw_aws_billin_777c057fa5275e4e5486ed0b761db4f0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_777c057fa5275e4e5486ed0b761db4f0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_777c057fa5275e4e5486ed0b761db4f0"
            },
            "created_at": 1705293862.364508,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_blockchain_billing`\nwhere identity_LineItemId is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_777c057fa5275e4e5486ed0b761db4f0`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.7a6ed5f9c0": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_a02adae1ad6f1cdb34e6ed67104f465f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.7a6ed5f9c0",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a02adae1ad6f1cdb34e6ed67104f465f\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_a02adae1ad6f1cdb34e6ed67104f465f.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId",
            "alias": "dbt_expectations_source_expect_a02adae1ad6f1cdb34e6ed67104f465f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_a02adae1ad6f1cdb34e6ed67104f465f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_a02adae1ad6f1cdb34e6ed67104f465f"
            },
            "created_at": 1705293862.3653104,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_a02adae1ad6f1cdb34e6ed67104f465f`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_ProductCode.b682639c61": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_ProductCode",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_306b8beb2825adacd7aff43872ebd94d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_ProductCode"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_ProductCode.b682639c61",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_306b8beb2825adacd7aff43872ebd94d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_306b8beb2825adacd7aff43872ebd94d.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_ProductCode",
            "alias": "source_not_null_raw_aws_billin_306b8beb2825adacd7aff43872ebd94d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_306b8beb2825adacd7aff43872ebd94d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_306b8beb2825adacd7aff43872ebd94d"
            },
            "created_at": 1705293862.3674643,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_blockchain_billing`\nwhere lineItem_ProductCode is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_306b8beb2825adacd7aff43872ebd94d`",
            "column_name": "lineItem_ProductCode",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_UnblendedCost.3a5430697c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_UnblendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_2d8b9ecd345233ee4088699b484e5725",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_UnblendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_UnblendedCost.3a5430697c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_2d8b9ecd345233ee4088699b484e5725\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_2d8b9ecd345233ee4088699b484e5725.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_UnblendedCost",
            "alias": "source_not_null_raw_aws_billin_2d8b9ecd345233ee4088699b484e5725",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_2d8b9ecd345233ee4088699b484e5725.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_2d8b9ecd345233ee4088699b484e5725"
            },
            "created_at": 1705293862.3684218,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_blockchain_billing`\nwhere lineItem_UnblendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_2d8b9ecd345233ee4088699b484e5725`",
            "column_name": "lineItem_UnblendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_BlendedCost.d6dcc7ad94": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_BlendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_c4b7411e9db23e9884c3aa0dbdebb677",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_BlendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_BlendedCost.d6dcc7ad94",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_c4b7411e9db23e9884c3aa0dbdebb677\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_c4b7411e9db23e9884c3aa0dbdebb677.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_BlendedCost",
            "alias": "source_not_null_raw_aws_billin_c4b7411e9db23e9884c3aa0dbdebb677",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_c4b7411e9db23e9884c3aa0dbdebb677.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_c4b7411e9db23e9884c3aa0dbdebb677"
            },
            "created_at": 1705293862.3694057,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_blockchain_billing`\nwhere lineItem_BlendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_c4b7411e9db23e9884c3aa0dbdebb677`",
            "column_name": "lineItem_BlendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_LineItemDescription.9c0b052bd1": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "lineItem_LineItemDescription",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_e04f2835702748565e727a652871522d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_LineItemDescription"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_LineItemDescription.9c0b052bd1",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_e04f2835702748565e727a652871522d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_e04f2835702748565e727a652871522d.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_LineItemDescription",
            "alias": "dbt_expectations_source_expect_e04f2835702748565e727a652871522d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_e04f2835702748565e727a652871522d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_e04f2835702748565e727a652871522d"
            },
            "created_at": 1705293862.3704937,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_e04f2835702748565e727a652871522d`",
            "column_name": "lineItem_LineItemDescription",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt.990ac578cf": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt.990ac578cf",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt",
            "alias": "source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.3730166,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_blockchain_billing`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_blockchain_dt__date.208f58e107": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_blockchain')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_6c7fe5563691d97b14a6589ad2ee1686",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_blockchain_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_blockchain_dt__date.208f58e107",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6c7fe5563691d97b14a6589ad2ee1686\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_6c7fe5563691d97b14a6589ad2ee1686.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_blockchain_dt__date",
            "alias": "dbt_expectations_source_expect_6c7fe5563691d97b14a6589ad2ee1686",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_blockchain"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_6c7fe5563691d97b14a6589ad2ee1686.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_6c7fe5563691d97b14a6589ad2ee1686"
            },
            "created_at": 1705293862.3739634,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BILL_BILLINGPERIODSTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_USAGESTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_PRODUCTCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_UNBLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_BLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PRODUCT_REGION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_EKS_CLUSTER_NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_PROJECT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_6c7fe5563691d97b14a6589ad2ee1686`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.3cee6eefbb": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_g1')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_8c46f1dc164d1d7863b702b98a284b8c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.3cee6eefbb",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_8c46f1dc164d1d7863b702b98a284b8c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_8c46f1dc164d1d7863b702b98a284b8c.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId",
            "alias": "source_not_null_raw_aws_billin_8c46f1dc164d1d7863b702b98a284b8c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_8c46f1dc164d1d7863b702b98a284b8c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_8c46f1dc164d1d7863b702b98a284b8c"
            },
            "created_at": 1705293862.3763885,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_g1_billing`\nwhere identity_LineItemId is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_8c46f1dc164d1d7863b702b98a284b8c`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.88c03ad13c": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_g1')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_9d201323ff3b75a12460082cdb12da0c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.88c03ad13c",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_9d201323ff3b75a12460082cdb12da0c\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_9d201323ff3b75a12460082cdb12da0c.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId",
            "alias": "dbt_expectations_source_expect_9d201323ff3b75a12460082cdb12da0c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_9d201323ff3b75a12460082cdb12da0c.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_9d201323ff3b75a12460082cdb12da0c"
            },
            "created_at": 1705293862.377378,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_9d201323ff3b75a12460082cdb12da0c`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_ProductCode.1ea0f6c89d": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_ProductCode",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_g1')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_6ccd797327bc5777927c00230dc76788",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_ProductCode"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_ProductCode.1ea0f6c89d",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_6ccd797327bc5777927c00230dc76788\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_6ccd797327bc5777927c00230dc76788.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_ProductCode",
            "alias": "source_not_null_raw_aws_billin_6ccd797327bc5777927c00230dc76788",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_6ccd797327bc5777927c00230dc76788.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_6ccd797327bc5777927c00230dc76788"
            },
            "created_at": 1705293862.3797338,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_g1_billing`\nwhere lineItem_ProductCode is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_6ccd797327bc5777927c00230dc76788`",
            "column_name": "lineItem_ProductCode",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_UnblendedCost.d1a99f177e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_UnblendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_g1')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_defc359ac1f287d2b9b7b53bf683076d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_UnblendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_UnblendedCost.d1a99f177e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_defc359ac1f287d2b9b7b53bf683076d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_defc359ac1f287d2b9b7b53bf683076d.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_UnblendedCost",
            "alias": "source_not_null_raw_aws_billin_defc359ac1f287d2b9b7b53bf683076d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_defc359ac1f287d2b9b7b53bf683076d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_defc359ac1f287d2b9b7b53bf683076d"
            },
            "created_at": 1705293862.3807635,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_g1_billing`\nwhere lineItem_UnblendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_defc359ac1f287d2b9b7b53bf683076d`",
            "column_name": "lineItem_UnblendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_BlendedCost.78e58de029": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_BlendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_g1')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_77985f8fd55275be2621fd1f15fbb91d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_BlendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_BlendedCost.78e58de029",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_77985f8fd55275be2621fd1f15fbb91d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_77985f8fd55275be2621fd1f15fbb91d.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_BlendedCost",
            "alias": "source_not_null_raw_aws_billin_77985f8fd55275be2621fd1f15fbb91d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_77985f8fd55275be2621fd1f15fbb91d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_77985f8fd55275be2621fd1f15fbb91d"
            },
            "created_at": 1705293862.3816202,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_g1_billing`\nwhere lineItem_BlendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_77985f8fd55275be2621fd1f15fbb91d`",
            "column_name": "lineItem_BlendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_lineItem_LineItemDescription.ace5932803": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "lineItem_LineItemDescription",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_g1')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_891a27f088188a77aa6583e49af758bf",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_lineItem_LineItemDescription"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_lineItem_LineItemDescription.ace5932803",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_891a27f088188a77aa6583e49af758bf\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_891a27f088188a77aa6583e49af758bf.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_lineItem_LineItemDescription",
            "alias": "dbt_expectations_source_expect_891a27f088188a77aa6583e49af758bf",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_891a27f088188a77aa6583e49af758bf.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_891a27f088188a77aa6583e49af758bf"
            },
            "created_at": 1705293862.382415,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_891a27f088188a77aa6583e49af758bf`",
            "column_name": "lineItem_LineItemDescription",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_g1_dt__date.7e67c3bf92": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_g1')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_2ccb0bdf615dfd765a8923229e4d59a2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_g1_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_g1_dt__date.7e67c3bf92",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2ccb0bdf615dfd765a8923229e4d59a2\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_2ccb0bdf615dfd765a8923229e4d59a2.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_g1_dt__date",
            "alias": "dbt_expectations_source_expect_2ccb0bdf615dfd765a8923229e4d59a2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_g1"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_2ccb0bdf615dfd765a8923229e4d59a2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_2ccb0bdf615dfd765a8923229e4d59a2"
            },
            "created_at": 1705293862.3847191,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BILL_BILLINGPERIODSTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_USAGESTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_PRODUCTCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_UNBLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_BLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PRODUCT_REGION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_EKS_CLUSTER_NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_PROJECT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_2ccb0bdf615dfd765a8923229e4d59a2`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.9301958534": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_3997ca135f098329fd0458bf55e58d34",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.9301958534",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_3997ca135f098329fd0458bf55e58d34\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_3997ca135f098329fd0458bf55e58d34.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId",
            "alias": "source_not_null_raw_aws_billin_3997ca135f098329fd0458bf55e58d34",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_3997ca135f098329fd0458bf55e58d34.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_3997ca135f098329fd0458bf55e58d34"
            },
            "created_at": 1705293862.3872395,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_marketplace_billing`\nwhere identity_LineItemId is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_3997ca135f098329fd0458bf55e58d34`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.058f341f55": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_a6518a82f797bcab265b2e2ff6ea3716",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.058f341f55",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a6518a82f797bcab265b2e2ff6ea3716\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_a6518a82f797bcab265b2e2ff6ea3716.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId",
            "alias": "dbt_expectations_source_expect_a6518a82f797bcab265b2e2ff6ea3716",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_a6518a82f797bcab265b2e2ff6ea3716.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_a6518a82f797bcab265b2e2ff6ea3716"
            },
            "created_at": 1705293862.3880486,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_a6518a82f797bcab265b2e2ff6ea3716`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_ProductCode.694387d42e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_ProductCode",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_366caf60a5326d2c42fc95f6abc7e1c0",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_ProductCode"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_ProductCode.694387d42e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_366caf60a5326d2c42fc95f6abc7e1c0\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_366caf60a5326d2c42fc95f6abc7e1c0.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_ProductCode",
            "alias": "source_not_null_raw_aws_billin_366caf60a5326d2c42fc95f6abc7e1c0",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_366caf60a5326d2c42fc95f6abc7e1c0.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_366caf60a5326d2c42fc95f6abc7e1c0"
            },
            "created_at": 1705293862.390089,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_marketplace_billing`\nwhere lineItem_ProductCode is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_366caf60a5326d2c42fc95f6abc7e1c0`",
            "column_name": "lineItem_ProductCode",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_UnblendedCost.6a47fae0b2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_UnblendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_5995b982359d6f2715c7e973f90d46df",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_UnblendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_UnblendedCost.6a47fae0b2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_5995b982359d6f2715c7e973f90d46df\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_5995b982359d6f2715c7e973f90d46df.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_UnblendedCost",
            "alias": "source_not_null_raw_aws_billin_5995b982359d6f2715c7e973f90d46df",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_5995b982359d6f2715c7e973f90d46df.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_5995b982359d6f2715c7e973f90d46df"
            },
            "created_at": 1705293862.3910336,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_marketplace_billing`\nwhere lineItem_UnblendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_5995b982359d6f2715c7e973f90d46df`",
            "column_name": "lineItem_UnblendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_BlendedCost.45b3432709": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_BlendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_05b06730c748fc360d457b1efc3696ad",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_BlendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_BlendedCost.45b3432709",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_05b06730c748fc360d457b1efc3696ad\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_05b06730c748fc360d457b1efc3696ad.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_BlendedCost",
            "alias": "source_not_null_raw_aws_billin_05b06730c748fc360d457b1efc3696ad",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_05b06730c748fc360d457b1efc3696ad.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_05b06730c748fc360d457b1efc3696ad"
            },
            "created_at": 1705293862.3917994,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_marketplace_billing`\nwhere lineItem_BlendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_05b06730c748fc360d457b1efc3696ad`",
            "column_name": "lineItem_BlendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_LineItemDescription.8b6ac9f5b0": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "lineItem_LineItemDescription",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_5aa3c495a0a9460e3da27af3e0de5e33",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_LineItemDescription"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_LineItemDescription.8b6ac9f5b0",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_5aa3c495a0a9460e3da27af3e0de5e33\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_5aa3c495a0a9460e3da27af3e0de5e33.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_LineItemDescription",
            "alias": "dbt_expectations_source_expect_5aa3c495a0a9460e3da27af3e0de5e33",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_5aa3c495a0a9460e3da27af3e0de5e33.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_5aa3c495a0a9460e3da27af3e0de5e33"
            },
            "created_at": 1705293862.392586,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_5aa3c495a0a9460e3da27af3e0de5e33`",
            "column_name": "lineItem_LineItemDescription",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt.06b082bea7": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt.06b082bea7",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt",
            "alias": "source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.394748,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_marketplace_billing`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_marketplace_dt__date.5d596bb64e": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_marketplace')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_031dffcbab14a903b203edf78d350da1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_marketplace_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_marketplace_dt__date.5d596bb64e",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_031dffcbab14a903b203edf78d350da1\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_031dffcbab14a903b203edf78d350da1.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_marketplace_dt__date",
            "alias": "dbt_expectations_source_expect_031dffcbab14a903b203edf78d350da1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_marketplace"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_031dffcbab14a903b203edf78d350da1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_031dffcbab14a903b203edf78d350da1"
            },
            "created_at": 1705293862.3955333,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BILL_BILLINGPERIODSTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_USAGESTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_PRODUCTCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_UNBLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_BLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PRODUCT_REGION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_EKS_CLUSTER_NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_PROJECT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_031dffcbab14a903b203edf78d350da1`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.7bde2004ca": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_faa42511bd35c11579c3dae5d705353d",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.7bde2004ca",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_faa42511bd35c11579c3dae5d705353d\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_faa42511bd35c11579c3dae5d705353d.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId",
            "alias": "source_not_null_raw_aws_billin_faa42511bd35c11579c3dae5d705353d",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_faa42511bd35c11579c3dae5d705353d.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_faa42511bd35c11579c3dae5d705353d"
            },
            "created_at": 1705293862.3979902,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_game_production_billing`\nwhere identity_LineItemId is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_faa42511bd35c11579c3dae5d705353d`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.fb580d52b2": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_8eb475177815b54f71526b69f5f15d83",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.fb580d52b2",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_8eb475177815b54f71526b69f5f15d83\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_8eb475177815b54f71526b69f5f15d83.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId",
            "alias": "dbt_expectations_source_expect_8eb475177815b54f71526b69f5f15d83",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_8eb475177815b54f71526b69f5f15d83.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_8eb475177815b54f71526b69f5f15d83"
            },
            "created_at": 1705293862.3987775,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_8eb475177815b54f71526b69f5f15d83`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_ProductCode.a4a645fc7e": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_ProductCode",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_9dc28e9b9fb8ca64099f77d4b4dd2c2a",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_ProductCode"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_ProductCode.a4a645fc7e",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_9dc28e9b9fb8ca64099f77d4b4dd2c2a\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_9dc28e9b9fb8ca64099f77d4b4dd2c2a.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_ProductCode",
            "alias": "source_not_null_raw_aws_billin_9dc28e9b9fb8ca64099f77d4b4dd2c2a",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_9dc28e9b9fb8ca64099f77d4b4dd2c2a.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_9dc28e9b9fb8ca64099f77d4b4dd2c2a"
            },
            "created_at": 1705293862.4009194,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_game_production_billing`\nwhere lineItem_ProductCode is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_9dc28e9b9fb8ca64099f77d4b4dd2c2a`",
            "column_name": "lineItem_ProductCode",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_UnblendedCost.3d9a5e17d1": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_UnblendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_0b44f931d0c64aa16eefbf16e4740a74",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_UnblendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_UnblendedCost.3d9a5e17d1",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_0b44f931d0c64aa16eefbf16e4740a74\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_0b44f931d0c64aa16eefbf16e4740a74.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_UnblendedCost",
            "alias": "source_not_null_raw_aws_billin_0b44f931d0c64aa16eefbf16e4740a74",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_0b44f931d0c64aa16eefbf16e4740a74.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_0b44f931d0c64aa16eefbf16e4740a74"
            },
            "created_at": 1705293862.4016917,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_game_production_billing`\nwhere lineItem_UnblendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_0b44f931d0c64aa16eefbf16e4740a74`",
            "column_name": "lineItem_UnblendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_BlendedCost.0ede38da9b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_BlendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_6160fe3235518e4bf2b60188bae45500",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_BlendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_BlendedCost.0ede38da9b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_6160fe3235518e4bf2b60188bae45500\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_6160fe3235518e4bf2b60188bae45500.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_BlendedCost",
            "alias": "source_not_null_raw_aws_billin_6160fe3235518e4bf2b60188bae45500",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_6160fe3235518e4bf2b60188bae45500.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_6160fe3235518e4bf2b60188bae45500"
            },
            "created_at": 1705293862.402464,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_game_production_billing`\nwhere lineItem_BlendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_6160fe3235518e4bf2b60188bae45500`",
            "column_name": "lineItem_BlendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_lineItem_LineItemDescription.b5b1c31618": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "lineItem_LineItemDescription",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_cb62e8fa208274e7166a8c7f492f385f",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_lineItem_LineItemDescription"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_lineItem_LineItemDescription.b5b1c31618",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_cb62e8fa208274e7166a8c7f492f385f\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_cb62e8fa208274e7166a8c7f492f385f.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_lineItem_LineItemDescription",
            "alias": "dbt_expectations_source_expect_cb62e8fa208274e7166a8c7f492f385f",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_cb62e8fa208274e7166a8c7f492f385f.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_cb62e8fa208274e7166a8c7f492f385f"
            },
            "created_at": 1705293862.4035985,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_cb62e8fa208274e7166a8c7f492f385f`",
            "column_name": "lineItem_LineItemDescription",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_dt.78713742f0": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_ac2df29fcebf1aa704cd34df4da91305",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_dt.78713742f0",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_ac2df29fcebf1aa704cd34df4da91305\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_ac2df29fcebf1aa704cd34df4da91305.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_game_production_dt",
            "alias": "source_not_null_raw_aws_billin_ac2df29fcebf1aa704cd34df4da91305",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_ac2df29fcebf1aa704cd34df4da91305.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_ac2df29fcebf1aa704cd34df4da91305"
            },
            "created_at": 1705293862.405734,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_game_production_billing`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_ac2df29fcebf1aa704cd34df4da91305`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_game_production_dt__date.082cf5f767": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_game_production')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_94fc9d189f64bce3d6f1d466c724eec5",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_game_production_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_game_production_dt__date.082cf5f767",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_94fc9d189f64bce3d6f1d466c724eec5\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_94fc9d189f64bce3d6f1d466c724eec5.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_game_production_dt__date",
            "alias": "dbt_expectations_source_expect_94fc9d189f64bce3d6f1d466c724eec5",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_game_production"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_94fc9d189f64bce3d6f1d466c724eec5.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_94fc9d189f64bce3d6f1d466c724eec5"
            },
            "created_at": 1705293862.4065254,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BILL_BILLINGPERIODSTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_USAGESTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_PRODUCTCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_UNBLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_BLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PRODUCT_REGION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_EKS_CLUSTER_NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_PROJECT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_94fc9d189f64bce3d6f1d466c724eec5`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.f9038febbd": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_e5a755779fb73acd22402fc1f4e9a0ec",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.f9038febbd",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_e5a755779fb73acd22402fc1f4e9a0ec\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_e5a755779fb73acd22402fc1f4e9a0ec.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId",
            "alias": "source_not_null_raw_aws_billin_e5a755779fb73acd22402fc1f4e9a0ec",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_e5a755779fb73acd22402fc1f4e9a0ec.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_e5a755779fb73acd22402fc1f4e9a0ec"
            },
            "created_at": 1705293862.4090033,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_metaverse_billing`\nwhere identity_LineItemId is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_e5a755779fb73acd22402fc1f4e9a0ec`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.6e5cddcc3d": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "identity_LineItemId",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_1720d87c0132ce17183b94d7bcd6c862",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.6e5cddcc3d",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1720d87c0132ce17183b94d7bcd6c862\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_1720d87c0132ce17183b94d7bcd6c862.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId",
            "alias": "dbt_expectations_source_expect_1720d87c0132ce17183b94d7bcd6c862",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_1720d87c0132ce17183b94d7bcd6c862.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_1720d87c0132ce17183b94d7bcd6c862"
            },
            "created_at": 1705293862.4099047,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_1720d87c0132ce17183b94d7bcd6c862`",
            "column_name": "identity_LineItemId",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_ProductCode.fd1699b097": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_ProductCode",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_302381d6a2222bbbc548d7afb36eeb70",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_ProductCode"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_ProductCode.fd1699b097",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_302381d6a2222bbbc548d7afb36eeb70\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_302381d6a2222bbbc548d7afb36eeb70.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_ProductCode",
            "alias": "source_not_null_raw_aws_billin_302381d6a2222bbbc548d7afb36eeb70",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_302381d6a2222bbbc548d7afb36eeb70.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_302381d6a2222bbbc548d7afb36eeb70"
            },
            "created_at": 1705293862.4121141,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_metaverse_billing`\nwhere lineItem_ProductCode is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_302381d6a2222bbbc548d7afb36eeb70`",
            "column_name": "lineItem_ProductCode",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_UnblendedCost.d6d155d47a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_UnblendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_6bac5554d93d6faa0e950f0835ba3cfd",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_UnblendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_UnblendedCost.d6d155d47a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_6bac5554d93d6faa0e950f0835ba3cfd\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_6bac5554d93d6faa0e950f0835ba3cfd.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_UnblendedCost",
            "alias": "source_not_null_raw_aws_billin_6bac5554d93d6faa0e950f0835ba3cfd",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_6bac5554d93d6faa0e950f0835ba3cfd.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_6bac5554d93d6faa0e950f0835ba3cfd"
            },
            "created_at": 1705293862.4129531,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_metaverse_billing`\nwhere lineItem_UnblendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_6bac5554d93d6faa0e950f0835ba3cfd`",
            "column_name": "lineItem_UnblendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_BlendedCost.251f1d81be": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "lineItem_BlendedCost",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_aws_billin_780b80acf5c04e9b1c72a5f088938d64",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_BlendedCost"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_BlendedCost.251f1d81be",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_aws_billin_780b80acf5c04e9b1c72a5f088938d64\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billin_780b80acf5c04e9b1c72a5f088938d64.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_BlendedCost",
            "alias": "source_not_null_raw_aws_billin_780b80acf5c04e9b1c72a5f088938d64",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billin_780b80acf5c04e9b1c72a5f088938d64.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_aws_billin_780b80acf5c04e9b1c72a5f088938d64"
            },
            "created_at": 1705293862.413871,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_metaverse_billing`\nwhere lineItem_BlendedCost is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billin_780b80acf5c04e9b1c72a5f088938d64`",
            "column_name": "lineItem_BlendedCost",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_LineItemDescription.f8e8b976f5": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "lineItem_LineItemDescription",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_58c759108d9eef747f65c9959898ffaa",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_LineItemDescription"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_LineItemDescription.f8e8b976f5",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_58c759108d9eef747f65c9959898ffaa\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_58c759108d9eef747f65c9959898ffaa.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_LineItemDescription",
            "alias": "dbt_expectations_source_expect_58c759108d9eef747f65c9959898ffaa",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_58c759108d9eef747f65c9959898ffaa.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_58c759108d9eef747f65c9959898ffaa"
            },
            "created_at": 1705293862.414659,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_58c759108d9eef747f65c9959898ffaa`",
            "column_name": "lineItem_LineItemDescription",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt.f42190344c": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt.f42190344c",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt",
            "alias": "source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.41673,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_metaverse_billing`\nwhere dt is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_metaverse_dt__date.ff1180caa1": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "date",
                    "column_name": "dt",
                    "model": "{{ get_where_subquery(source('raw_aws_billing_gcs', 'billing__raw_metaverse')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_4b30daf96bcdb6ac23462a03e0da7928",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_metaverse_dt__date"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_metaverse_dt__date.ff1180caa1",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_4b30daf96bcdb6ac23462a03e0da7928\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_4b30daf96bcdb6ac23462a03e0da7928.sql",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_metaverse_dt__date",
            "alias": "dbt_expectations_source_expect_4b30daf96bcdb6ac23462a03e0da7928",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_aws_billing_gcs",
                    "billing__raw_metaverse"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/aws__billing/src_aws__billing.yml/dbt_expectations_source_expect_4b30daf96bcdb6ac23462a03e0da7928.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_4b30daf96bcdb6ac23462a03e0da7928"
            },
            "created_at": 1705293862.4176588,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('IDENTITY_LINEITEMID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BILL_BILLINGPERIODSTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_USAGESTARTDATE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_PRODUCTCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_UNBLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_BLENDEDCOST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMDESCRIPTION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LINEITEM_LINEITEMTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PRODUCT_REGION' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_EKS_CLUSTER_NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_PROJECT' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RESOURCETAGS_USER_TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DT' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DT'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_4b30daf96bcdb6ac23462a03e0da7928`",
            "column_name": "dt",
            "file_key_name": "sources.raw_aws_billing_gcs"
        },
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_name.d3dd1ed862": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "name",
                    "model": "{{ get_where_subquery(source('raw_coinmarketcap', 'main_token_quotes')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "source_not_null_raw_coinmarketcap_main_token_quotes_name"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_name.d3dd1ed862",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_coinmarketcap_main_token_quotes_name.sql",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "source_not_null_raw_coinmarketcap_main_token_quotes_name",
            "alias": "source_not_null_raw_coinmarketcap_main_token_quotes_name",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/src_coinmarketcap.yml/source_not_null_raw_coinmarketcap_main_token_quotes_name.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.4201245,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes`\nwhere name is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_coinmarketcap_main_token_quotes_name`",
            "column_name": "name",
            "file_key_name": "sources.raw_coinmarketcap"
        },
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_timestamp.873137cb3b": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "timestamp",
                    "model": "{{ get_where_subquery(source('raw_coinmarketcap', 'main_token_quotes')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "source_not_null_raw_coinmarketcap_main_token_quotes_timestamp"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_timestamp.873137cb3b",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_coinmarketcap_main_token_quotes_timestamp.sql",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "source_not_null_raw_coinmarketcap_main_token_quotes_timestamp",
            "alias": "source_not_null_raw_coinmarketcap_main_token_quotes_timestamp",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/src_coinmarketcap.yml/source_not_null_raw_coinmarketcap_main_token_quotes_timestamp.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705293862.420929,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes`\nwhere timestamp is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_coinmarketcap_main_token_quotes_timestamp`",
            "column_name": "timestamp",
            "file_key_name": "sources.raw_coinmarketcap"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_timestamp.25c4cb59c8": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "timestamp",
                    "model": "{{ get_where_subquery(source('raw_coinmarketcap', 'main_token_quotes')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_ee3870e976f68aca1909ebd981890451",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_timestamp"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_timestamp.25c4cb59c8",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_ee3870e976f68aca1909ebd981890451\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_ee3870e976f68aca1909ebd981890451.sql",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_timestamp",
            "alias": "dbt_expectations_source_expect_ee3870e976f68aca1909ebd981890451",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/src_coinmarketcap.yml/dbt_expectations_source_expect_ee3870e976f68aca1909ebd981890451.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_ee3870e976f68aca1909ebd981890451"
            },
            "created_at": 1705293862.4216976,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TIMESTAMP' as STRING) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_ee3870e976f68aca1909ebd981890451`",
            "column_name": "timestamp",
            "file_key_name": "sources.raw_coinmarketcap"
        },
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_timestamp.e358fedf2f": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "timestamp",
                    "model": "{{ get_where_subquery(source('raw_coinmarketcap', 'main_token_quotes_intraday')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_coinmarket_ebb9180f342556375b1a8cfa68d6da23",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "source_not_null_raw_coinmarketcap_main_token_quotes_intraday_timestamp"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_timestamp.e358fedf2f",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_coinmarket_ebb9180f342556375b1a8cfa68d6da23\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_coinmarket_ebb9180f342556375b1a8cfa68d6da23.sql",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "source_not_null_raw_coinmarketcap_main_token_quotes_intraday_timestamp",
            "alias": "source_not_null_raw_coinmarket_ebb9180f342556375b1a8cfa68d6da23",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes_intraday"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/src_coinmarketcap.yml/source_not_null_raw_coinmarket_ebb9180f342556375b1a8cfa68d6da23.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_coinmarket_ebb9180f342556375b1a8cfa68d6da23"
            },
            "created_at": 1705293862.4240592,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes_intraday`\nwhere timestamp is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_coinmarket_ebb9180f342556375b1a8cfa68d6da23`",
            "column_name": "timestamp",
            "file_key_name": "sources.raw_coinmarketcap"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_intraday_timestamp.7fb340058b": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "timestamp",
                    "model": "{{ get_where_subquery(source('raw_coinmarketcap', 'main_token_quotes_intraday')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_6799371dbdb23a3789267194c46adbce",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_intraday_timestamp"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_intraday_timestamp.7fb340058b",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6799371dbdb23a3789267194c46adbce\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_6799371dbdb23a3789267194c46adbce.sql",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_intraday_timestamp",
            "alias": "dbt_expectations_source_expect_6799371dbdb23a3789267194c46adbce",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes_intraday"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/src_coinmarketcap.yml/dbt_expectations_source_expect_6799371dbdb23a3789267194c46adbce.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_6799371dbdb23a3789267194c46adbce"
            },
            "created_at": 1705293862.4249346,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TIMESTAMP' as STRING) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_6799371dbdb23a3789267194c46adbce`",
            "column_name": "timestamp",
            "file_key_name": "sources.raw_coinmarketcap"
        },
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_token_symbol.a8d79ff1a2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "token_symbol",
                    "model": "{{ get_where_subquery(source('raw_coinmarketcap', 'main_token_quotes_intraday')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_coinmarket_f42128dfe0797873408fa43b30c23193",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "source_not_null_raw_coinmarketcap_main_token_quotes_intraday_token_symbol"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_token_symbol.a8d79ff1a2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_coinmarket_f42128dfe0797873408fa43b30c23193\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_coinmarket_f42128dfe0797873408fa43b30c23193.sql",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "source_not_null_raw_coinmarketcap_main_token_quotes_intraday_token_symbol",
            "alias": "source_not_null_raw_coinmarket_f42128dfe0797873408fa43b30c23193",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_coinmarketcap",
                    "main_token_quotes_intraday"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/coinmarketcap/src_coinmarketcap.yml/source_not_null_raw_coinmarket_f42128dfe0797873408fa43b30c23193.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_coinmarket_f42128dfe0797873408fa43b30c23193"
            },
            "created_at": 1705293862.427451,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes_intraday`\nwhere token_symbol is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_coinmarket_f42128dfe0797873408fa43b30c23193`",
            "column_name": "token_symbol",
            "file_key_name": "sources.raw_coinmarketcap"
        },
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_wallet_address.fa1d03bcdc": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "wallet_address",
                    "model": "{{ get_where_subquery(source('raw_etherscan', 'etherscan_polygon_important_wallet_accounts_balance')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_etherscan__f269db01e79c9c7bdb1a68b833e5d92b",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "etherscan",
                "source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_wallet_address"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_wallet_address.fa1d03bcdc",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_etherscan__f269db01e79c9c7bdb1a68b833e5d92b\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_etherscan__f269db01e79c9c7bdb1a68b833e5d92b.sql",
            "original_file_path": "models/staging/etherscan/src_etherscan.yml",
            "name": "source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_wallet_address",
            "alias": "source_not_null_raw_etherscan__f269db01e79c9c7bdb1a68b833e5d92b",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_etherscan",
                    "etherscan_polygon_important_wallet_accounts_balance"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/etherscan/src_etherscan.yml/source_not_null_raw_etherscan__f269db01e79c9c7bdb1a68b833e5d92b.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_etherscan__f269db01e79c9c7bdb1a68b833e5d92b"
            },
            "created_at": 1705293862.4283915,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_etherscan`.`etherscan_polygon_important_wallet_accounts_balance`\nwhere wallet_address is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_etherscan__f269db01e79c9c7bdb1a68b833e5d92b`",
            "column_name": "wallet_address",
            "file_key_name": "sources.raw_etherscan"
        },
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_token_symbol.399f726266": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "token_symbol",
                    "model": "{{ get_where_subquery(source('raw_etherscan', 'etherscan_polygon_important_wallet_accounts_balance')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_etherscan__a6371963a4527590c296d21238485bd1",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "etherscan",
                "source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_token_symbol"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_token_symbol.399f726266",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_etherscan__a6371963a4527590c296d21238485bd1\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_etherscan__a6371963a4527590c296d21238485bd1.sql",
            "original_file_path": "models/staging/etherscan/src_etherscan.yml",
            "name": "source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_token_symbol",
            "alias": "source_not_null_raw_etherscan__a6371963a4527590c296d21238485bd1",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_etherscan",
                    "etherscan_polygon_important_wallet_accounts_balance"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/etherscan/src_etherscan.yml/source_not_null_raw_etherscan__a6371963a4527590c296d21238485bd1.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_etherscan__a6371963a4527590c296d21238485bd1"
            },
            "created_at": 1705293862.4291863,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_etherscan`.`etherscan_polygon_important_wallet_accounts_balance`\nwhere token_symbol is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_etherscan__a6371963a4527590c296d21238485bd1`",
            "column_name": "token_symbol",
            "file_key_name": "sources.raw_etherscan"
        },
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.7f047ffc17": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "timestamp",
                    "model": "{{ get_where_subquery(source('raw_etherscan', 'etherscan_polygon_important_wallet_accounts_balance')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_not_null_raw_etherscan__6b636b9419606d0ec7ef43621e1d6f30",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "etherscan",
                "source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.7f047ffc17",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_raw_etherscan__6b636b9419606d0ec7ef43621e1d6f30\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_etherscan__6b636b9419606d0ec7ef43621e1d6f30.sql",
            "original_file_path": "models/staging/etherscan/src_etherscan.yml",
            "name": "source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp",
            "alias": "source_not_null_raw_etherscan__6b636b9419606d0ec7ef43621e1d6f30",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_etherscan",
                    "etherscan_polygon_important_wallet_accounts_balance"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/etherscan/src_etherscan.yml/source_not_null_raw_etherscan__6b636b9419606d0ec7ef43621e1d6f30.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "source_not_null_raw_etherscan__6b636b9419606d0ec7ef43621e1d6f30"
            },
            "created_at": 1705293862.4300277,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_etherscan`.`etherscan_polygon_important_wallet_accounts_balance`\nwhere timestamp is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_etherscan__6b636b9419606d0ec7ef43621e1d6f30`",
            "column_name": "timestamp",
            "file_key_name": "sources.raw_etherscan"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.8a17b876b7": {
            "test_metadata": {
                "name": "expect_column_to_exist",
                "kwargs": {
                    "column_name": "timestamp",
                    "model": "{{ get_where_subquery(source('raw_etherscan', 'etherscan_polygon_important_wallet_accounts_balance')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_to_exist",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_f7f7e7dc4bca6027969e9290f3fc5800",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "etherscan",
                "dbt_expectations_source_expect_column_to_exist_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.8a17b876b7",
            "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f7f7e7dc4bca6027969e9290f3fc5800\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_f7f7e7dc4bca6027969e9290f3fc5800.sql",
            "original_file_path": "models/staging/etherscan/src_etherscan.yml",
            "name": "dbt_expectations_source_expect_column_to_exist_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp",
            "alias": "dbt_expectations_source_expect_f7f7e7dc4bca6027969e9290f3fc5800",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_etherscan",
                    "etherscan_polygon_important_wallet_accounts_balance"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/etherscan/src_etherscan.yml/dbt_expectations_source_expect_f7f7e7dc4bca6027969e9290f3fc5800.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_f7f7e7dc4bca6027969e9290f3fc5800"
            },
            "created_at": 1705293862.4311426,
            "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('TIMESTAMP' as STRING) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_f7f7e7dc4bca6027969e9290f3fc5800`",
            "column_name": "timestamp",
            "file_key_name": "sources.raw_etherscan"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__blueprint": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.blueprint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__blueprint"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__blueprint",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'blueprint') }}\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName AS display_name,\n        type,\n        gearType AS gear_type,\n        CASE WHEN race = 'Buru' THEN 'BURU' ELSE race END AS race,\n        weaponType AS weapon_type,\n        baseId AS base_id,\n        rarity,\n        tier\n    FROM  \n        source\n)\n\nSELECT DISTINCT race FROM renamed_column",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__blueprint.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__blueprint.sql",
            "name": "stg_sipher_meta_equipment__blueprint",
            "alias": "stg_sipher_meta_equipment__blueprint",
            "checksum": {
                "name": "sha256",
                "checksum": "3e3d5c81714984e2fc68bdc870942b6d45b59a2db77368d14141c789a09e6261"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "blueprint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__blueprint.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318295.396102,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`blueprint`\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName AS display_name,\n        type,\n        gearType AS gear_type,\n        CASE WHEN race = 'Buru' THEN 'BURU' ELSE race END AS race,\n        weaponType AS weapon_type,\n        baseId AS base_id,\n        rarity,\n        tier\n    FROM  \n        source\n)\n\nSELECT DISTINCT race FROM renamed_column",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__blueprint`"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__capsule": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.capsule"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__capsule"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__capsule",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'capsule') }}\n)\n\n,renamed_column AS (\n    SELECT\n        *\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__capsule.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__capsule.sql",
            "name": "stg_sipher_meta_equipment__capsule",
            "alias": "stg_sipher_meta_equipment__capsule",
            "checksum": {
                "name": "sha256",
                "checksum": "e73b26e09cb64816b9cd3640bab690de231a711ba4db092e577e9249aab905ca"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "capsule"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__capsule.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318295.3988278,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`capsule`\n)\n\n,renamed_column AS (\n    SELECT\n        *\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__capsule`"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__character": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.character"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__character"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__character",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'character') }}\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        name,\n        subRace AS sub_race,\n        variants,\n        accessories,\n        body,\n        hands,\n        legs,\n        feet\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__character.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__character.sql",
            "name": "stg_sipher_meta_equipment__character",
            "alias": "stg_sipher_meta_equipment__character",
            "checksum": {
                "name": "sha256",
                "checksum": "6ed6a832caf8e85d2e7907d4d2d4aa6af832051ce23f7f6fd19436d008b641ad"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "character"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__character.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318295.400075,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`character`\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        name,\n        subRace AS sub_race,\n        variants,\n        accessories,\n        body,\n        hands,\n        legs,\n        feet\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__character`"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__currency": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.currency"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__currency"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__currency",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'currency') }}\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        categories,\n        baseId AS base_id,\n        rarity,\n        displayName AS display_name\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__currency.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__currency.sql",
            "name": "stg_sipher_meta_equipment__currency",
            "alias": "stg_sipher_meta_equipment__currency",
            "checksum": {
                "name": "sha256",
                "checksum": "7fbfd8b74e55b5560376fb14322457830dbd8b485e729c8d250b5bb5ff782caf"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "currency"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__currency.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318295.4013343,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`currency`\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        categories,\n        baseId AS base_id,\n        rarity,\n        displayName AS display_name\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__currency`"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__equipment": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.equipment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__equipment"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__equipment",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'equipment') }}\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName AS display_name,\n        gearType AS gear_type,\n        rarity,\n        tier\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__equipment.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__equipment.sql",
            "name": "stg_sipher_meta_equipment__equipment",
            "alias": "stg_sipher_meta_equipment__equipment",
            "checksum": {
                "name": "sha256",
                "checksum": "b353a1cd74c1a0455387a14520513fbe2c40c036f934f4447bd263f42bb63ac2"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "equipment"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__equipment.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318295.4028385,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`equipment`\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName AS display_name,\n        gearType AS gear_type,\n        rarity,\n        tier\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__equipment`"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__equipment_part": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.equipment_part"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__equipment_part"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__equipment_part",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'equipment_part') }}\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName,\n        rarity,\n        tier,\n        boostPools_List AS boost_pools_list,  \n        assetId AS asset_id,  \n        partType AS part_type,  \n        partModelId AS part_model_id,\n        weaponType AS weapon_type,\n    FROM  \n        source\n    WHERE \n        id IS NOT NULL\n)\n\nSELECT * FROM renamed_column",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__equipment_part.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__equipment_part.sql",
            "name": "stg_sipher_meta_equipment__equipment_part",
            "alias": "stg_sipher_meta_equipment__equipment_part",
            "checksum": {
                "name": "sha256",
                "checksum": "03c492ceb9ae418ab0f8360a20480b6a41cd9a26510bf8959fa7ea2cbc1a17e8"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "equipment_part"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__equipment_part.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318295.4041035,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`equipment_part`\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName,\n        rarity,\n        tier,\n        boostPools_List AS boost_pools_list,  \n        assetId AS asset_id,  \n        partType AS part_type,  \n        partModelId AS part_model_id,\n        weaponType AS weapon_type,\n    FROM  \n        source\n    WHERE \n        id IS NOT NULL\n)\n\nSELECT * FROM renamed_column",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__equipment_part`"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__weapon": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.weapon"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__weapon"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__weapon",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'weapon') }}\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName AS display_name,\n        weaponType AS weapon_type,\n        rarity,\n        tier,\n        assetId AS asset_id\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column ORDER BY id",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__weapon.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__weapon.sql",
            "name": "stg_sipher_meta_equipment__weapon",
            "alias": "stg_sipher_meta_equipment__weapon",
            "checksum": {
                "name": "sha256",
                "checksum": "7386e0c16fddef901dc9a929af61f51aa7492ac875f06595c069c2324b3ae6fc"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "weapon"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__weapon.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318295.4052534,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`weapon`\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        displayName AS display_name,\n        weaponType AS weapon_type,\n        rarity,\n        tier,\n        assetId AS asset_id\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column ORDER BY id",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__weapon`"
        },
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_type__Gear.c8aa9cfe3a": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        "Gear"
                    ],
                    "column_name": "type",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'blueprint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.blueprint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": "gearType IS NOT NULL",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_accepted_values_raw_meta_equipment_blueprint_type__Gear"
            ],
            "unique_id": "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_type__Gear.c8aa9cfe3a",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(where=\"gearType IS NOT NULL\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_accepted_values_raw_meta_equipment_blueprint_type__Gear.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_accepted_values_raw_meta_equipment_blueprint_type__Gear",
            "alias": "source_accepted_values_raw_meta_equipment_blueprint_type__Gear",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "blueprint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_accepted_values_raw_meta_equipment_blueprint_type__Gear.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "where": "gearType IS NOT NULL"
            },
            "created_at": 1705318295.426281,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from (select * from `sipher-data-platform`.`raw_meta_equipment`.`blueprint` where gearType IS NOT NULL) dbt_subquery\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Gear'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_accepted_values_raw_meta_equipment_blueprint_type__Gear`",
            "column_name": "type",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_weaponType__None.3705c6993f": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        null
                    ],
                    "column_name": "weaponType",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'blueprint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.blueprint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_accepted_values_raw_met_b921c5284f07d6237a1e6ad4800cc454",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": "gearType IS NOT NULL",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_accepted_values_raw_meta_equipment_blueprint_weaponType__None"
            ],
            "unique_id": "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_weaponType__None.3705c6993f",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(where=\"gearType IS NOT NULL\",alias=\"source_accepted_values_raw_met_b921c5284f07d6237a1e6ad4800cc454\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_accepted_values_raw_met_b921c5284f07d6237a1e6ad4800cc454.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_accepted_values_raw_meta_equipment_blueprint_weaponType__None",
            "alias": "source_accepted_values_raw_met_b921c5284f07d6237a1e6ad4800cc454",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "blueprint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_accepted_values_raw_met_b921c5284f07d6237a1e6ad4800cc454.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "where": "gearType IS NOT NULL",
                "alias": "source_accepted_values_raw_met_b921c5284f07d6237a1e6ad4800cc454"
            },
            "created_at": 1705318295.4301553,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        weaponType as value_field,\n        count(*) as n_records\n\n    from (select * from `sipher-data-platform`.`raw_meta_equipment`.`blueprint` where gearType IS NOT NULL) dbt_subquery\n    group by weaponType\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'None'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_accepted_values_raw_met_b921c5284f07d6237a1e6ad4800cc454`",
            "column_name": "weaponType",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_race__None.7cdeedb364": {
            "test_metadata": {
                "name": "accepted_values",
                "kwargs": {
                    "values": [
                        null
                    ],
                    "column_name": "race",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'blueprint')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_accepted_values",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.blueprint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": "gearType IS NULL",
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_accepted_values_raw_meta_equipment_blueprint_race__None"
            ],
            "unique_id": "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_race__None.7cdeedb364",
            "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(where=\"gearType IS NULL\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_accepted_values_raw_meta_equipment_blueprint_race__None.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_accepted_values_raw_meta_equipment_blueprint_race__None",
            "alias": "source_accepted_values_raw_meta_equipment_blueprint_race__None",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "blueprint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_accepted_values_raw_meta_equipment_blueprint_race__None.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "where": "gearType IS NULL"
            },
            "created_at": 1705318295.4334424,
            "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        race as value_field,\n        count(*) as n_records\n\n    from (select * from `sipher-data-platform`.`raw_meta_equipment`.`blueprint` where gearType IS NULL) dbt_subquery\n    group by race\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'None'\n)\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_accepted_values_raw_meta_equipment_blueprint_race__None`",
            "column_name": "race",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_blueprint_tier__int64.0bcf46c350": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "int64",
                    "column_name": "tier",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'blueprint')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.blueprint"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_b40134b1ed40b3abc1e9ce58707af6b7",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_blueprint_tier__int64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_blueprint_tier__int64.0bcf46c350",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b40134b1ed40b3abc1e9ce58707af6b7\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_b40134b1ed40b3abc1e9ce58707af6b7.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_blueprint_tier__int64",
            "alias": "dbt_expectations_source_expect_b40134b1ed40b3abc1e9ce58707af6b7",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "blueprint"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/dbt_expectations_source_expect_b40134b1ed40b3abc1e9ce58707af6b7.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_b40134b1ed40b3abc1e9ce58707af6b7"
            },
            "created_at": 1705318295.4363275,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DISPLAYNAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('GEARTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RACE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('WEAPONTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BASEID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RARITY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TIER' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIER'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_b40134b1ed40b3abc1e9ce58707af6b7`",
            "column_name": "tier",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_not_null_raw_meta_equipment_capsule_id.c1ae4762b2": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'capsule')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.capsule"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_not_null_raw_meta_equipment_capsule_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_meta_equipment_capsule_id.c1ae4762b2",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_meta_equipment_capsule_id.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_not_null_raw_meta_equipment_capsule_id",
            "alias": "source_not_null_raw_meta_equipment_capsule_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "capsule"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_not_null_raw_meta_equipment_capsule_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705318295.439646,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_meta_equipment`.`capsule`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_meta_equipment_capsule_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_capsule_tier__int64.3dcfc0113b": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "int64",
                    "column_name": "tier",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'capsule')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.capsule"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_3a5f73255132813fef8b5b912b8439f2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_capsule_tier__int64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_capsule_tier__int64.3dcfc0113b",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_3a5f73255132813fef8b5b912b8439f2\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_3a5f73255132813fef8b5b912b8439f2.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_capsule_tier__int64",
            "alias": "dbt_expectations_source_expect_3a5f73255132813fef8b5b912b8439f2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "capsule"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/dbt_expectations_source_expect_3a5f73255132813fef8b5b912b8439f2.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_3a5f73255132813fef8b5b912b8439f2"
            },
            "created_at": 1705318295.440718,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RARITY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CAPSULETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DISPLAYNAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIER'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_3a5f73255132813fef8b5b912b8439f2`",
            "column_name": "tier",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_not_null_raw_meta_equipment_character_id.79fdb4a15a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'character')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.character"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_not_null_raw_meta_equipment_character_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_meta_equipment_character_id.79fdb4a15a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_meta_equipment_character_id.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_not_null_raw_meta_equipment_character_id",
            "alias": "source_not_null_raw_meta_equipment_character_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "character"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_not_null_raw_meta_equipment_character_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705318295.4437776,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_meta_equipment`.`character`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_meta_equipment_character_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_character_tier__int64.f1bc17dd99": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "int64",
                    "column_name": "tier",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'character')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.character"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_c7b6ee721ecc5a29a480066d7855b1e9",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_character_tier__int64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_character_tier__int64.f1bc17dd99",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c7b6ee721ecc5a29a480066d7855b1e9\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_c7b6ee721ecc5a29a480066d7855b1e9.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_character_tier__int64",
            "alias": "dbt_expectations_source_expect_c7b6ee721ecc5a29a480066d7855b1e9",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "character"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/dbt_expectations_source_expect_c7b6ee721ecc5a29a480066d7855b1e9.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_c7b6ee721ecc5a29a480066d7855b1e9"
            },
            "created_at": 1705318295.444962,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ASSETID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SUBRACE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('VARIANTS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ACCESSORIES' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BODY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('HANDS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LEGS' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('FEET' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIER'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_c7b6ee721ecc5a29a480066d7855b1e9`",
            "column_name": "tier",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_not_null_raw_meta_equipment_currency_id.04b38be9d4": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'currency')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.currency"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_not_null_raw_meta_equipment_currency_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_meta_equipment_currency_id.04b38be9d4",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_meta_equipment_currency_id.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_not_null_raw_meta_equipment_currency_id",
            "alias": "source_not_null_raw_meta_equipment_currency_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "currency"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_not_null_raw_meta_equipment_currency_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705318295.4482622,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_meta_equipment`.`currency`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_meta_equipment_currency_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_currency_tier__int64.e7949fffcc": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "int64",
                    "column_name": "tier",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'currency')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.currency"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_e3dd03111a0782a9b4c633cb2e2cd336",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_currency_tier__int64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_currency_tier__int64.e7949fffcc",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_e3dd03111a0782a9b4c633cb2e2cd336\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_e3dd03111a0782a9b4c633cb2e2cd336.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_currency_tier__int64",
            "alias": "dbt_expectations_source_expect_e3dd03111a0782a9b4c633cb2e2cd336",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "currency"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/dbt_expectations_source_expect_e3dd03111a0782a9b4c633cb2e2cd336.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_e3dd03111a0782a9b4c633cb2e2cd336"
            },
            "created_at": 1705318295.449279,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CATEGORIES' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BASEID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ICONASSETID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RARITY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DISPLAYNAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DETAILINFO' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIER'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_e3dd03111a0782a9b4c633cb2e2cd336`",
            "column_name": "tier",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_not_null_raw_meta_equipment_equipment_id.ed8ed28acb": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'equipment')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.equipment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_not_null_raw_meta_equipment_equipment_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_meta_equipment_equipment_id.ed8ed28acb",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_meta_equipment_equipment_id.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_not_null_raw_meta_equipment_equipment_id",
            "alias": "source_not_null_raw_meta_equipment_equipment_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "equipment"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_not_null_raw_meta_equipment_equipment_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705318295.4526098,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_meta_equipment`.`equipment`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_meta_equipment_equipment_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_tier__int64.3d37d2b642": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "int64",
                    "column_name": "tier",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'equipment')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.equipment"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_64df7e5ebe46ff479ae0c779d0dbb160",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_tier__int64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_tier__int64.3d37d2b642",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_64df7e5ebe46ff479ae0c779d0dbb160\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_64df7e5ebe46ff479ae0c779d0dbb160.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_tier__int64",
            "alias": "dbt_expectations_source_expect_64df7e5ebe46ff479ae0c779d0dbb160",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "equipment"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/dbt_expectations_source_expect_64df7e5ebe46ff479ae0c779d0dbb160.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_64df7e5ebe46ff479ae0c779d0dbb160"
            },
            "created_at": 1705318295.4538171,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DISPLAYNAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('GEARTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RARITY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TIER' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIER'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_64df7e5ebe46ff479ae0c779d0dbb160`",
            "column_name": "tier",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_part_tier__int64.7b68996a52": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "int64",
                    "column_name": "tier",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'equipment_part')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.equipment_part"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_94a16fa37e28505fa0bf7adcc430b534",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_part_tier__int64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_part_tier__int64.7b68996a52",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_94a16fa37e28505fa0bf7adcc430b534\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_94a16fa37e28505fa0bf7adcc430b534.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_part_tier__int64",
            "alias": "dbt_expectations_source_expect_94a16fa37e28505fa0bf7adcc430b534",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "equipment_part"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/dbt_expectations_source_expect_94a16fa37e28505fa0bf7adcc430b534.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_94a16fa37e28505fa0bf7adcc430b534"
            },
            "created_at": 1705318295.4572175,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DISPLAYNAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RARITY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TIER' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PRIMARYSTATS_LIST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('BOOSTPOOLS_LIST' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('SECONDARYSTATPOOLID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ASSETID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PARTTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('PARTMODELID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('WEAPONTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIER'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_94a16fa37e28505fa0bf7adcc430b534`",
            "column_name": "tier",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_not_null_raw_meta_equipment_sipher_game_reward_id.aa3a5ba67a": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'sipher_game_reward')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.sipher_game_reward"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_not_null_raw_meta_equipment_sipher_game_reward_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_meta_equipment_sipher_game_reward_id.aa3a5ba67a",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_meta_equipment_sipher_game_reward_id.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_not_null_raw_meta_equipment_sipher_game_reward_id",
            "alias": "source_not_null_raw_meta_equipment_sipher_game_reward_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "sipher_game_reward"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_not_null_raw_meta_equipment_sipher_game_reward_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705318295.4628346,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_meta_equipment`.`sipher_game_reward`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_meta_equipment_sipher_game_reward_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.source_not_null_raw_meta_equipment_weapon_id.3430d0c231": {
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'weapon')) }}"
                },
                "namespace": null
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.weapon"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "source_not_null_raw_meta_equipment_weapon_id"
            ],
            "unique_id": "test.dbt_sipher.source_not_null_raw_meta_equipment_weapon_id.3430d0c231",
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "source_not_null_raw_meta_equipment_weapon_id.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "source_not_null_raw_meta_equipment_weapon_id",
            "alias": "source_not_null_raw_meta_equipment_weapon_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "weapon"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/source_not_null_raw_meta_equipment_weapon_id.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true
            },
            "created_at": 1705318295.4651482,
            "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom `sipher-data-platform`.`raw_meta_equipment`.`weapon`\nwhere id is null\n\n\n",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`source_not_null_raw_meta_equipment_weapon_id`",
            "column_name": "id",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_weapon_tier__int64.c8ae55ef69": {
            "test_metadata": {
                "name": "expect_column_values_to_be_of_type",
                "kwargs": {
                    "column_type": "int64",
                    "column_name": "tier",
                    "model": "{{ get_where_subquery(source('raw_meta_equipment', 'weapon')) }}"
                },
                "namespace": "dbt_expectations"
            },
            "compiled": true,
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.weapon"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_expectations_source_expect_933b47e689d09630973c696d5d694492",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": true,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "sipher-data-testing",
            "schema": "dbt_test__audit",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_weapon_tier__int64"
            ],
            "unique_id": "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_weapon_tier__int64.c8ae55ef69",
            "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_933b47e689d09630973c696d5d694492\") }}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "dbt_expectations_source_expect_933b47e689d09630973c696d5d694492.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_weapon_tier__int64",
            "alias": "dbt_expectations_source_expect_933b47e689d09630973c696d5d694492",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "weapon"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml/dbt_expectations_source_expect_933b47e689d09630973c696d5d694492.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "store_failures": true,
                "alias": "dbt_expectations_source_expect_933b47e689d09630973c696d5d694492"
            },
            "created_at": 1705318295.46657,
            "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('DISPLAYNAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('WEAPONTYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('RARITY' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('TIER' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('ASSETID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TIER'\n            and\n            relation_column_type not in ('INT64')\n\n    )\n    select *\n    from test_data",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`dbt_test__audit`.`dbt_expectations_source_expect_933b47e689d09630973c696d5d694492`",
            "column_name": "tier",
            "file_key_name": "sources.raw_meta_equipment"
        },
        "model.dbt_sipher.stg_sipher_meta_equipment__sipher_game_reward": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "source.dbt_sipher.raw_meta_equipment.sipher_game_reward"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "tmp_dbt",
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "stg_sipher_meta_equipment__sipher_game_reward"
            ],
            "unique_id": "model.dbt_sipher.stg_sipher_meta_equipment__sipher_game_reward",
            "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        {{ source('raw_meta_equipment', 'sipher_game_reward') }}\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        type,\n        displayName AS display_name,\n        rarity,\n        tier,\n        category\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "staging/sipher_meta_equipment/stg_sipher_meta_equipment__sipher_game_reward.sql",
            "original_file_path": "models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__sipher_game_reward.sql",
            "name": "stg_sipher_meta_equipment__sipher_game_reward",
            "alias": "stg_sipher_meta_equipment__sipher_game_reward",
            "checksum": {
                "name": "sha256",
                "checksum": "2df2d38af68d910d07bf4707aa26be8a32051e2eb10722d2bddaec4902834b29"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "raw_meta_equipment",
                    "sipher_game_reward"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/staging/sipher_meta_equipment/stg_sipher_meta_equipment__sipher_game_reward.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1705318424.41949,
            "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM    \n        `sipher-data-platform`.`raw_meta_equipment`.`sipher_game_reward`\n)\n\n,renamed_column AS (\n    SELECT\n        id,\n        type,\n        displayName AS display_name,\n        rarity,\n        tier,\n        category\n    FROM  \n        source\n)\n\nSELECT * FROM renamed_column",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`tmp_dbt`.`stg_sipher_meta_equipment__sipher_game_reward`"
        },
        "model.dbt_sipher.dim_sipher_odyssey_characters": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "sipher_odyssey_core",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "sipher_odyssey_core",
            "fqn": [
                "dbt_sipher",
                "marts",
                "sipher_odyssey_core",
                "dim_sipher_odyssey_characters"
            ],
            "unique_id": "model.dbt_sipher.dim_sipher_odyssey_characters",
            "raw_code": "{{- config(\n  materialized='table',\n) -}}\n\nSELECT\n  'INU.Normal' AS id,\n  'Canis' AS sub_race,\n  '0' AS ranking,\n  'INU' AS race,\n  'INU_Canis' AS character, \n  'AssaultRifle_Default_ID1' AS gun,\n  'Katana_Default_ID4' AS melee,\n  'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n  'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n  'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n  'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n  'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n  'SipherCharacterSubraceDataAsset:SDA_INU_SubraceNormal' AS asset_id\nUNION ALL\nSELECT\n'INU.Cyborg' AS id,\n'Cyborg' AS sub_race,\n'2' AS ranking,\n'INU' AS race,\n'INU_Cyborg' AS character, \n'AssaultRifle_Default_ID1' AS gun,\n'Katana_Default_ID4' AS melee,\n'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_INU_SubraceCyborg' AS asset_id\n\nUNION ALL\nSELECT\n'INU.Elemental' AS id,\n'BioZ' AS sub_race,\n'1' AS ranking,\n'INU' AS race,\n'INU_Bioz' AS character, \n'AssaultRifle_Default_ID1' AS gun,\n'Katana_Default_ID4' AS melee,\n'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_INU_SubraceElemental' AS asset_id\n\nUNION ALL\nSELECT\n'INU.Supernatural' AS id,\n'Cosmic' AS sub_race,\n'3' AS ranking,\n'INU' AS race,\n'INU_Cosmic' AS character, \n'AssaultRifle_Default_ID1' AS gun,\n'Katana_Default_ID4' AS melee,\n'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_INU_SubraceSupernatural' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Normal' AS id,\n'Felis' AS sub_race,\n'0' AS ranking,\n'NEKO' AS race,\n'NEKO_Felis' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceNormal' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Cyborg' AS id,\n'Synthetic' AS sub_race,\n'1' AS ranking,\n'NEKO' AS race,\n'NEKO_Synthetic' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceCyborg' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Elemental' AS id,\n'Crystalis' AS sub_race,\n'3' AS ranking,\n'NEKO' AS race,\n'NEKO_Crystalis' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceElemental' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Supernatural' AS id,\n'Phasewalker' AS sub_race,\n'2' AS ranking,\n'NEKO' AS race,\n'NEKO_Phasewalker' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceSupernatural' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Normal' AS id,\n'Taurus' AS sub_race,\n'0' AS ranking,\n'BURU' AS race,\n'BURU_Tribal' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceNormal' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Cyborg' AS id,\n'Mecha' AS sub_race,\n'1' AS ranking,\n'BURU' AS race,\n'BURU_Mecha' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceCyborg' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Supernatural' AS id,\n'Ancient' AS sub_race,\n'3' AS ranking,\n'BURU' AS race,\n'BURU_Ancient' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceSupernatural' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Elemental' AS id,\n'Inferno' AS sub_race,\n'2' AS ranking,\n'BURU' AS race,\n'BURU_Inferno' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceElemental' AS asset_id\n\n-- Sheet: https://docs.google.com/spreadsheets/d/1Fz_uumKc7pl3R-0wxRlw9Vp6Q1TwMztBQmg8JyaeZXg/edit#gid=870188627",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/sipher_odyssey_core/dim_sipher_odyssey_characters.sql",
            "original_file_path": "models/marts/sipher_odyssey_core/dim_sipher_odyssey_characters.sql",
            "name": "dim_sipher_odyssey_characters",
            "alias": "dim_sipher_odyssey_characters",
            "checksum": {
                "name": "sha256",
                "checksum": "30a11eec1aa034cb236b0c059da42605cf80b44ef14e045d90a8a2b581a5a67f"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/sipher_odyssey_core/dim_sipher_odyssey_characters.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "sipher_odyssey_core",
                "materialized": "table"
            },
            "created_at": 1705533006.1341088,
            "compiled_code": "SELECT\n  'INU.Normal' AS id,\n  'Canis' AS sub_race,\n  '0' AS ranking,\n  'INU' AS race,\n  'INU_Canis' AS character, \n  'AssaultRifle_Default_ID1' AS gun,\n  'Katana_Default_ID4' AS melee,\n  'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n  'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n  'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n  'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n  'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n  'SipherCharacterSubraceDataAsset:SDA_INU_SubraceNormal' AS asset_id\nUNION ALL\nSELECT\n'INU.Cyborg' AS id,\n'Cyborg' AS sub_race,\n'2' AS ranking,\n'INU' AS race,\n'INU_Cyborg' AS character, \n'AssaultRifle_Default_ID1' AS gun,\n'Katana_Default_ID4' AS melee,\n'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_INU_SubraceCyborg' AS asset_id\n\nUNION ALL\nSELECT\n'INU.Elemental' AS id,\n'BioZ' AS sub_race,\n'1' AS ranking,\n'INU' AS race,\n'INU_Bioz' AS character, \n'AssaultRifle_Default_ID1' AS gun,\n'Katana_Default_ID4' AS melee,\n'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_INU_SubraceElemental' AS asset_id\n\nUNION ALL\nSELECT\n'INU.Supernatural' AS id,\n'Cosmic' AS sub_race,\n'3' AS ranking,\n'INU' AS race,\n'INU_Cosmic' AS character, \n'AssaultRifle_Default_ID1' AS gun,\n'Katana_Default_ID4' AS melee,\n'NonNFT_Exclusive_Inu_Accessories_InuSuit_ID1' AS accessories,\n'NonNFT_Exclusive_Inu_Body_InuSuit_ID1' AS body,\n'NonNFT_Exclusive_Inu_Hands_InuSuit_ID1' AS hands,\n'NonNFT_Exclusive_Inu_Legs_InuSuit_ID1' AS legs,\n'NonNFT_Exclusive_Inu_Feet_InuSuit_ID1' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_INU_SubraceSupernatural' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Normal' AS id,\n'Felis' AS sub_race,\n'0' AS ranking,\n'NEKO' AS race,\n'NEKO_Felis' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceNormal' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Cyborg' AS id,\n'Synthetic' AS sub_race,\n'1' AS ranking,\n'NEKO' AS race,\n'NEKO_Synthetic' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceCyborg' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Elemental' AS id,\n'Crystalis' AS sub_race,\n'3' AS ranking,\n'NEKO' AS race,\n'NEKO_Crystalis' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceElemental' AS asset_id\n\nUNION ALL\nSELECT\n'NEKO.Supernatural' AS id,\n'Phasewalker' AS sub_race,\n'2' AS ranking,\n'NEKO' AS race,\n'NEKO_Phasewalker' AS character, \n'DualSMG_Default_ID2' AS gun,\n'LightningWhip_Default_ID5' AS melee,\n'NonNFT_Exclusive_NEKO_Accessories_NekoSuit_ID2' AS accessories,\n'NonNFT_Exclusive_NEKO_Body_NekoSuit_ID2' AS body,\n'NonNFT_Exclusive_NEKO_Hands_NekoSuit_ID2' AS hands,\n'NonNFT_Exclusive_NEKO_Legs_NekoSuit_ID2' AS legs,\n'NonNFT_Exclusive_NEKO_Feet_NekoSuit_ID2' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_NEKO_SubraceSupernatural' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Normal' AS id,\n'Taurus' AS sub_race,\n'0' AS ranking,\n'BURU' AS race,\n'BURU_Tribal' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceNormal' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Cyborg' AS id,\n'Mecha' AS sub_race,\n'1' AS ranking,\n'BURU' AS race,\n'BURU_Mecha' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceCyborg' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Supernatural' AS id,\n'Ancient' AS sub_race,\n'3' AS ranking,\n'BURU' AS race,\n'BURU_Ancient' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceSupernatural' AS asset_id\n\nUNION ALL\nSELECT\n'BURU.Elemental' AS id,\n'Inferno' AS sub_race,\n'2' AS ranking,\n'BURU' AS race,\n'BURU_Inferno' AS character, \n'Shotgun_Default_ID3' AS gun,\n'IronFist_Default_ID6' AS melee,\n'NonNFT_Exclusive_BURU_Accessories_BuruSuit_ID3' AS accessories,\n'NonNFT_Exclusive_BURU_Body_BuruSuit_ID3' AS body,\n'NonNFT_Exclusive_BURU_Hands_BuruSuit_ID3' AS hands,\n'NonNFT_Exclusive_BURU_Legs_BuruSuit_ID3' AS legs,\n'NonNFT_Exclusive_BURU_Feet_BuruSuit_ID3' AS feet,\n'SipherCharacterSubraceDataAsset:SDA_BURU_SubraceElemental' AS asset_id\n\n-- Sheet: https://docs.google.com/spreadsheets/d/1Fz_uumKc7pl3R-0wxRlw9Vp6Q1TwMztBQmg8JyaeZXg/edit#gid=870188627",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`sipher_odyssey_core`.`dim_sipher_odyssey_characters`"
        },
        "model.dbt_sipher.int_hidden_atlas_player_devices": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.clean_advertising_id",
                    "macro.dbt_utils.generate_surrogate_key",
                    "macro.dbt.is_incremental",
                    "macro.dbt_sipher.load_metadata"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time",
                    "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "hidden_atlas_core",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "device_sk",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "advertising_ids",
                    "vendor_ids",
                    "user_pseudo_ids",
                    "last_used_at",
                    "operating_system_version",
                    "browser",
                    "browser_version",
                    "web_info_browser",
                    "web_info_browser_version",
                    "web_info_hostname"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "hidden_atlas_core",
            "fqn": [
                "dbt_sipher",
                "marts",
                "hidden_atlas_core",
                "intermediate",
                "int_hidden_atlas_player_devices"
            ],
            "unique_id": "model.dbt_sipher.int_hidden_atlas_player_devices",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='device_sk',\n  merge_update_columns = [\n    'advertising_ids',\n    'vendor_ids',\n    'user_pseudo_ids',\n    'last_used_at',\n    'operating_system_version',\n    'browser',\n    'browser_version',\n    'web_info_browser',\n    'web_info_browser_version',\n    'web_info_hostname'\n  ],\n) -}}\n\nWITH raw AS (\n  SELECT\n    *,\n    {{ clean_advertising_id() }} AS cleaned_advertising_id\n  FROM {{ ref('stg_firebase__hidden_atlas_events_all_time') }}\n)\n\n,device_properties AS (\n  SELECT\n    cleaned_advertising_id AS advertising_id,\n    device.vendor_id,\n    user_pseudo_id,\n    {{ dbt_utils.generate_surrogate_key([\n      'device.category',\n      'device.mobile_model_name',\n      'device.mobile_marketing_name',\n      'device.mobile_os_hardware_model',\n      'device.operating_system'\n    ]) }} AS _device_model_key,\n    MAX(TIMESTAMP_MICROS(event_timestamp)) AS last_used_at,\n    MAX(device.mobile_brand_name) AS mobile_brand_name,\n    MAX(device.category) AS category,\n    MAX(device.mobile_model_name) AS mobile_model_name,\n    MAX(device.mobile_marketing_name) AS mobile_marketing_name,\n    MAX(device.mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(device.operating_system) AS operating_system,\n    MAX(device.operating_system_version) AS operating_system_version,\n    MAX(device.browser) AS browser,\n    MAX(device.browser_version) AS browser_version,\n    MAX(device.web_info.browser) AS web_info_browser,\n    MAX(device.web_info.browser_version) AS web_info_browser_version,\n    MAX(device.web_info.hostname) AS web_info_hostname,\n  FROM raw\n  GROUP BY advertising_id, vendor_id, user_pseudo_id, _device_model_key\n)\n\n,map_device_to_game_user_id AS (\n  SELECT\n    user_id AS game_user_id,\n    ather_id,\n    ARRAY_AGG(DISTINCT user_pseudo_id) AS user_pseudo_ids,\n  FROM raw\n  WHERE user_id IS NOT NULL\n  GROUP BY game_user_id, ather_id\n)\n\n,final AS (\n  SELECT\n    {{ dbt_utils.generate_surrogate_key([\n      'game_user_id',\n      'ather_id',\n      '_device_model_key'\n    ]) }} AS device_sk,\n    game_user_id,\n    ather_id,\n    _device_model_key,\n    ARRAY_AGG(DISTINCT advertising_id IGNORE NULLS) AS advertising_ids,\n    ARRAY_AGG(DISTINCT vendor_id IGNORE NULLS) AS vendor_ids,\n    ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n    MAX(last_used_at) AS last_used_at,\n    MAX(category) AS category,\n    MAX(mobile_brand_name) AS mobile_brand_name,\n    MAX(mobile_model_name) AS mobile_model_name,\n    MAX(mobile_marketing_name) AS mobile_marketing_name,\n    MAX(mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(operating_system) AS operating_system,\n    MAX(operating_system_version) AS operating_system_version,\n    MAX(browser) AS browser,\n    MAX(browser_version) AS browser_version,\n    MAX(web_info_browser) AS web_info_browser,\n    MAX(web_info_browser_version) AS web_info_browser_version,\n    MAX(web_info_hostname) AS web_info_hostname\n  FROM map_device_to_game_user_id, UNNEST(user_pseudo_ids) AS user_pseudo_id_map\n  LEFT JOIN device_properties ON device_properties.user_pseudo_id = user_pseudo_id_map\n  GROUP BY game_user_id, ather_id, _device_model_key\n)\n\n\n{% if is_incremental() -%}\n,current_ids_and_new_ids AS (\n  SELECT\n    device_sk,\n    advertising_id,\n    vendor_id,\n    user_pseudo_id\n  FROM {{ this }}\n  LEFT JOIN UNNEST(advertising_ids) AS advertising_id\n  LEFT JOIN UNNEST(vendor_ids) AS vendor_id\n  LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n\n  UNION DISTINCT\n\n  SELECT\n    device_sk,\n    advertising_id,\n    vendor_id,\n    user_pseudo_id\n  FROM final\n  LEFT JOIN UNNEST(advertising_ids) AS advertising_id\n  LEFT JOIN UNNEST(vendor_ids) AS vendor_id\n  LEFT JOIN UNNEST(user_pseudo_ids) AS user_pseudo_id\n)\n\n,combined_id AS (\n  SELECT\n    device_sk,\n    ARRAY_AGG(DISTINCT advertising_id IGNORE NULLS) AS advertising_ids,\n    ARRAY_AGG(DISTINCT vendor_id IGNORE NULLS) AS vendor_ids,\n    ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n  FROM current_ids_and_new_ids\n  GROUP BY device_sk\n)\n\nSELECT\n  final.*\n  EXCEPT(_device_model_key)\n  REPLACE (\n    combined_id.advertising_ids AS advertising_ids,\n    combined_id.vendor_ids AS vendor_ids,\n    combined_id.user_pseudo_ids AS user_pseudo_ids\n  ),\n  {{ load_metadata(sources=[ref('stg_firebase__hidden_atlas_events_all_time')]) }} AS load_metadata\nFROM final\nLEFT JOIN combined_id USING(device_sk)\n\n{%- else -%}\n\nSELECT\n  * EXCEPT(_device_model_key),\n  {{ load_metadata(sources=[ref('stg_firebase__hidden_atlas_events_all_time')]) }} AS load_metadata\nFROM final\n\n{%- endif -%}",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/hidden_atlas_core/intermediate/int_hidden_atlas_player_devices.sql",
            "original_file_path": "models/marts/hidden_atlas_core/intermediate/int_hidden_atlas_player_devices.sql",
            "name": "int_hidden_atlas_player_devices",
            "alias": "int_hidden_atlas_player_devices",
            "checksum": {
                "name": "sha256",
                "checksum": "15df61490c28798fe4656e636aa5a7770319cea604021b5b7eaef92c250183ab"
            },
            "tags": [],
            "refs": [
                [
                    "stg_firebase__hidden_atlas_events_all_time"
                ],
                [
                    "stg_firebase__hidden_atlas_events_all_time"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/hidden_atlas_core/intermediate/int_hidden_atlas_player_devices.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "hidden_atlas_core",
                "materialized": "incremental",
                "unique_key": "device_sk",
                "merge_update_columns": [
                    "advertising_ids",
                    "vendor_ids",
                    "user_pseudo_ids",
                    "last_used_at",
                    "operating_system_version",
                    "browser",
                    "browser_version",
                    "web_info_browser",
                    "web_info_browser_version",
                    "web_info_hostname"
                ]
            },
            "created_at": 1705636738.6587205,
            "compiled_code": "WITH raw AS (\n  SELECT\n    *,\n    CASE WHEN device.advertising_id IN ('', '00000000-0000-0000-0000-000000000000') THEN NULL ELSE device.advertising_id END AS cleaned_advertising_id\n  FROM `sipher-data-testing`.`staging_firebase`.`stg_firebase__hidden_atlas_events_all_time`\n)\n\n,device_properties AS (\n  SELECT\n    cleaned_advertising_id AS advertising_id,\n    device.vendor_id,\n    user_pseudo_id,\n    to_hex(md5(cast(coalesce(cast(device.category as STRING), '') || '-' || coalesce(cast(device.mobile_model_name as STRING), '') || '-' || coalesce(cast(device.mobile_marketing_name as STRING), '') || '-' || coalesce(cast(device.mobile_os_hardware_model as STRING), '') || '-' || coalesce(cast(device.operating_system as STRING), '') as STRING))) AS _device_model_key,\n    MAX(TIMESTAMP_MICROS(event_timestamp)) AS last_used_at,\n    MAX(device.mobile_brand_name) AS mobile_brand_name,\n    MAX(device.category) AS category,\n    MAX(device.mobile_model_name) AS mobile_model_name,\n    MAX(device.mobile_marketing_name) AS mobile_marketing_name,\n    MAX(device.mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(device.operating_system) AS operating_system,\n    MAX(device.operating_system_version) AS operating_system_version,\n    MAX(device.browser) AS browser,\n    MAX(device.browser_version) AS browser_version,\n    MAX(device.web_info.browser) AS web_info_browser,\n    MAX(device.web_info.browser_version) AS web_info_browser_version,\n    MAX(device.web_info.hostname) AS web_info_hostname,\n  FROM raw\n  GROUP BY advertising_id, vendor_id, user_pseudo_id, _device_model_key\n)\n\n,map_device_to_game_user_id AS (\n  SELECT\n    user_id AS game_user_id,\n    ather_id,\n    ARRAY_AGG(DISTINCT user_pseudo_id) AS user_pseudo_ids,\n  FROM raw\n  WHERE user_id IS NOT NULL\n  GROUP BY game_user_id, ather_id\n)\n\n,final AS (\n  SELECT\n    to_hex(md5(cast(coalesce(cast(game_user_id as STRING), '') || '-' || coalesce(cast(ather_id as STRING), '') || '-' || coalesce(cast(_device_model_key as STRING), '') as STRING))) AS device_sk,\n    game_user_id,\n    ather_id,\n    _device_model_key,\n    ARRAY_AGG(DISTINCT advertising_id IGNORE NULLS) AS advertising_ids,\n    ARRAY_AGG(DISTINCT vendor_id IGNORE NULLS) AS vendor_ids,\n    ARRAY_AGG(DISTINCT user_pseudo_id IGNORE NULLS) AS user_pseudo_ids,\n    MAX(last_used_at) AS last_used_at,\n    MAX(category) AS category,\n    MAX(mobile_brand_name) AS mobile_brand_name,\n    MAX(mobile_model_name) AS mobile_model_name,\n    MAX(mobile_marketing_name) AS mobile_marketing_name,\n    MAX(mobile_os_hardware_model) AS mobile_os_hardware_model,\n    MAX(operating_system) AS operating_system,\n    MAX(operating_system_version) AS operating_system_version,\n    MAX(browser) AS browser,\n    MAX(browser_version) AS browser_version,\n    MAX(web_info_browser) AS web_info_browser,\n    MAX(web_info_browser_version) AS web_info_browser_version,\n    MAX(web_info_hostname) AS web_info_hostname\n  FROM map_device_to_game_user_id, UNNEST(user_pseudo_ids) AS user_pseudo_id_map\n  LEFT JOIN device_properties ON device_properties.user_pseudo_id = user_pseudo_id_map\n  GROUP BY game_user_id, ather_id, _device_model_key\n)\n\n\nSELECT\n  * EXCEPT(_device_model_key),\n  ARRAY[STRUCT(\n      CURRENT_TIMESTAMP() AS data_load_timestamp,\n      \"`sipher-data-testing`.`staging_firebase`.`stg_firebase__hidden_atlas_events_all_time`\" AS data_sources\n    )] AS load_metadata\nFROM final",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`hidden_atlas_core`.`int_hidden_atlas_player_devices`"
        },
        "model.dbt_sipher.dim_twitter_profile": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_max_column_value"
                ],
                "nodes": [
                    "model.dbt_sipher.stg_twitter_profile_stats",
                    "model.dbt_sipher.stg_twitter_profile_stats"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "mart_social",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "merge_update_columns": [
                    "username",
                    "name",
                    "is_verified",
                    "user_defined_location",
                    "description",
                    "user_defined_url",
                    "is_protected",
                    "pinned_tweet_id"
                ],
                "post-hook": [],
                "pre-hook": []
            },
            "database": "sipher-data-testing",
            "schema": "mart_social",
            "fqn": [
                "dbt_sipher",
                "marts",
                "social",
                "dim_twitter_profile"
            ],
            "unique_id": "model.dbt_sipher.dim_twitter_profile",
            "raw_code": "{{- config(\n  materialized='incremental',\n  unique_key='id',\n  merge_update_columns = ['username', 'name', 'is_verified', 'user_defined_location', 'description', 'user_defined_url', 'is_protected', 'pinned_tweet_id'],\n) -}}\n\n{%- set date_filter = get_max_column_value(\n    table=ref('stg_twitter_profile_stats'),\n    column='snapshot_date'\n) -%}\n\n\nSELECT\n  id,\n  MAX(username) AS username,\n  MAX(name) AS name,\n  MAX(description) AS description,\n  MAX(is_verified) AS is_verified,\n  MAX(is_protected) AS is_protected,\n  MAX(user_defined_location) AS user_defined_location,\n  MAX(user_defined_url) AS user_defined_url,\n  MAX(pinned_tweet_id) AS pinned_tweet_id,\n  MAX(profile_created_at) AS profile_created_at\nFROM {{ ref('stg_twitter_profile_stats') }}\nWHERE snapshot_date = \"{{ date_filter }}\"\nGROUP BY id",
            "language": "sql",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "marts/social/dim_twitter_profile.sql",
            "original_file_path": "models/marts/social/dim_twitter_profile.sql",
            "name": "dim_twitter_profile",
            "alias": "dim_twitter_profile",
            "checksum": {
                "name": "sha256",
                "checksum": "a9e3946a7e51b198f79eda814e46261d9f1e26863fb553b90bfec8fb4c48470a"
            },
            "tags": [],
            "refs": [
                [
                    "stg_twitter_profile_stats"
                ],
                [
                    "stg_twitter_profile_stats"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target/compiled/dbt_sipher/models/marts/social/dim_twitter_profile.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "schema": "mart_social",
                "materialized": "incremental",
                "unique_key": "id",
                "merge_update_columns": [
                    "username",
                    "name",
                    "is_verified",
                    "user_defined_location",
                    "description",
                    "user_defined_url",
                    "is_protected",
                    "pinned_tweet_id"
                ]
            },
            "created_at": 1705636882.9667113,
            "compiled_code": "SELECT\n  id,\n  MAX(username) AS username,\n  MAX(name) AS name,\n  MAX(description) AS description,\n  MAX(is_verified) AS is_verified,\n  MAX(is_protected) AS is_protected,\n  MAX(user_defined_location) AS user_defined_location,\n  MAX(user_defined_url) AS user_defined_url,\n  MAX(pinned_tweet_id) AS pinned_tweet_id,\n  MAX(profile_created_at) AS profile_created_at\nFROM `sipher-data-testing`.`staging_social`.`stg_twitter_profile_stats`\nWHERE snapshot_date = \"2024-01-18\"\nGROUP BY id",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": "`sipher-data-testing`.`mart_social`.`dim_twitter_profile`"
        }
    },
    "sources": {
        "source.dbt_sipher.crypto_ethereum.token_transfers": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "bigquery_public__crypto_ethereum",
                "crypto_ethereum",
                "token_transfers"
            ],
            "database": "bigquery-public-data",
            "schema": "crypto_ethereum",
            "unique_id": "source.dbt_sipher.crypto_ethereum.token_transfers",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/bigquery_public__crypto_ethereum/src_bq_public__crypto_ethereum.yml",
            "original_file_path": "models/staging/bigquery_public__crypto_ethereum/src_bq_public__crypto_ethereum.yml",
            "name": "token_transfers",
            "source_name": "crypto_ethereum",
            "source_description": "",
            "loader": "",
            "identifier": "token_transfers",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(block_timestamp AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "block_timestamp": {
                    "name": "block_timestamp",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "token_name - not_nulls": {
                    "name": "token_name - not_nulls",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`bigquery-public-data`.`crypto_ethereum`.`token_transfers`",
            "created_at": 1705293862.2115095
        },
        "source.dbt_sipher.raw_max_mediation.raw_ad_revenue": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "raw_max_mediation",
                "raw_ad_revenue"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_max_mediation",
            "unique_id": "source.dbt_sipher.raw_max_mediation.raw_ad_revenue",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/max_mediation/src_max_mediation.yml",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "raw_ad_revenue",
            "source_name": "raw_max_mediation",
            "source_description": "",
            "loader": "",
            "identifier": "raw_ad_revenue",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_MICROS(__collected_ts)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "application": {
                    "name": "application",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "store_id": {
                    "name": "store_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "__collected_ts": {
                    "name": "__collected_ts",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_max_mediation`.`raw_ad_revenue`",
            "created_at": 1705293862.2162108
        },
        "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "max_mediation",
                "raw_max_mediation",
                "raw_user_ad_revenue"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_max_mediation",
            "unique_id": "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/max_mediation/src_max_mediation.yml",
            "original_file_path": "models/staging/max_mediation/src_max_mediation.yml",
            "name": "raw_user_ad_revenue",
            "source_name": "raw_max_mediation",
            "source_description": "",
            "loader": "",
            "identifier": "raw_user_ad_revenue",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_MICROS(__collected_ts)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "Ad_Unit_ID": {
                    "name": "Ad_Unit_ID",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "User_ID": {
                    "name": "User_ID",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "Revenue": {
                    "name": "Revenue",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "app_id": {
                    "name": "app_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "__collected_ts": {
                    "name": "__collected_ts",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_max_mediation`.`raw_user_ad_revenue`",
            "created_at": 1705293862.2236829
        },
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "raw_atherid_gcs",
                "aws__raw_ather_id_cognito"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_atherid_gcs",
            "unique_id": "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "aws__raw_ather_id_cognito",
            "source_name": "raw_atherid_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_ather_id_user_cognito",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "Username": {
                    "name": "Username",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "UserCreateDate": {
                    "name": "UserCreateDate",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_id": {
                    "name": "user_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "email": {
                    "name": "email",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user_cognito`",
            "created_at": 1705293862.2378638
        },
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "raw_atherid_gcs",
                "aws__raw_ather_id_user"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_atherid_gcs",
            "unique_id": "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "aws__raw_ather_id_user",
            "source_name": "raw_atherid_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_ather_id_user",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "email": {
                    "name": "email",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_user`",
            "created_at": 1705293862.2487354
        },
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__ather_id",
                "raw_atherid_gcs",
                "aws__raw_ather_id_wallet"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_atherid_gcs",
            "unique_id": "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "original_file_path": "models/staging/aws__ather_id/src_aws__ather_id.yml",
            "name": "aws__raw_ather_id_wallet",
            "source_name": "raw_atherid_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_ather_id_wallet",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "address": {
                    "name": "address",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "userId": {
                    "name": "userId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_atherid_gcs`.`gcs_external_raw_ather_id_wallet`",
            "created_at": 1705293862.2556336
        },
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "raw_loyalty_dashboard_gcs",
                "loyalty__raw_log_claim_lootbox"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_loyalty_dashboard_gcs",
            "unique_id": "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "loyalty__raw_log_claim_lootbox",
            "source_name": "raw_loyalty_dashboard_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_loyalty_log_claim_lootbox",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_claim_lootbox`",
            "created_at": 1705293862.260614
        },
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "raw_loyalty_dashboard_gcs",
                "loyalty__raw_log_open_lootbox"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_loyalty_dashboard_gcs",
            "unique_id": "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "loyalty__raw_log_open_lootbox",
            "source_name": "raw_loyalty_dashboard_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_loyalty_log_open_lootbox",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_open_lootbox`",
            "created_at": 1705293862.2659216
        },
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "raw_loyalty_dashboard_gcs",
                "loyalty__raw_log_spaceship"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_loyalty_dashboard_gcs",
            "unique_id": "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "loyalty__raw_log_spaceship",
            "source_name": "raw_loyalty_dashboard_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_loyalty_log_spaceship",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "publicAddress - not_null": {
                    "name": "publicAddress - not_null",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_spaceship`",
            "created_at": 1705293862.2707763
        },
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "raw_loyalty_dashboard_gcs",
                "loyalty__raw_log_scrap_spaceship_parts"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_loyalty_dashboard_gcs",
            "unique_id": "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "loyalty__raw_log_scrap_spaceship_parts",
            "source_name": "raw_loyalty_dashboard_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_loyalty_log_scrap_spaceship_parts",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_log_scrap_spaceship_parts`",
            "created_at": 1705293862.2758434
        },
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "raw_loyalty_dashboard_gcs",
                "loyalty__raw_pending_mint"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_loyalty_dashboard_gcs",
            "unique_id": "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "loyalty__raw_pending_mint",
            "source_name": "raw_loyalty_dashboard_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_loyalty_pending_mint",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "`to`": {
                    "name": "`to`",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "signature": {
                    "name": "signature",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_pending_mint`",
            "created_at": 1705293862.2826319
        },
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__loyalty",
                "raw_loyalty_dashboard_gcs",
                "loyalty__raw_burned"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_loyalty_dashboard_gcs",
            "unique_id": "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "original_file_path": "models/staging/aws__loyalty/src_aws__loyalty.yml",
            "name": "loyalty__raw_burned",
            "source_name": "raw_loyalty_dashboard_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_loyalty_burned",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "`to`": {
                    "name": "`to`",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "createdAt": {
                    "name": "createdAt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_loyalty_dashboard_gcs`.`gcs_external_raw_loyalty_burned`",
            "created_at": 1705293862.2884183
        },
        "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_server",
                "raw_game_meta",
                "raw_inventory_balancing_update"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_game_meta",
            "unique_id": "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_server/src_sipher_server.yml",
            "original_file_path": "models/staging/sipher_server/src_sipher_server.yml",
            "name": "raw_inventory_balancing_update",
            "source_name": "raw_game_meta",
            "source_description": "",
            "loader": "",
            "identifier": "raw_inventory_balancing_update",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_MILLIS(CAST(updated_balance_timestamp AS INT64))",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "hour"
                },
                "error_after": {
                    "count": 2,
                    "period": "hour"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_game_meta`.`raw_inventory_balancing_update`",
            "created_at": 1705293862.2884884
        },
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "raw_aws_opensearch_onchain_nft",
                "opensearch_onchain__raw_lootbox"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_opensearch_onchain_nft",
            "unique_id": "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "opensearch_onchain__raw_lootbox",
            "source_name": "raw_aws_opensearch_onchain_nft",
            "source_description": "",
            "loader": "",
            "identifier": "raw_opensearch_onchain_Lootbox",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "owner": {
                    "name": "owner",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Lootbox`",
            "created_at": 1705293862.292356
        },
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "raw_aws_opensearch_onchain_nft",
                "opensearch_onchain__raw_spaceship"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_opensearch_onchain_nft",
            "unique_id": "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "opensearch_onchain__raw_spaceship",
            "source_name": "raw_aws_opensearch_onchain_nft",
            "source_description": "",
            "loader": "",
            "identifier": "raw_opensearch_onchain_Spaceship",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "owner": {
                    "name": "owner",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Spaceship`",
            "created_at": 1705293862.2962408
        },
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "raw_aws_opensearch_onchain_nft",
                "opensearch_onchain__raw_spaceship_parts"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_opensearch_onchain_nft",
            "unique_id": "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "opensearch_onchain__raw_spaceship_parts",
            "source_name": "raw_aws_opensearch_onchain_nft",
            "source_description": "",
            "loader": "",
            "identifier": "raw_opensearch_onchain_SpaceshipParts",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "owner": {
                    "name": "owner",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_SpaceshipParts`",
            "created_at": 1705293862.3000717
        },
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "raw_aws_opensearch_onchain_nft",
                "opensearch_onchain__raw_sculpture"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_opensearch_onchain_nft",
            "unique_id": "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "opensearch_onchain__raw_sculpture",
            "source_name": "raw_aws_opensearch_onchain_nft",
            "source_description": "",
            "loader": "",
            "identifier": "raw_opensearch_onchain_Sculpture",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "owner": {
                    "name": "owner",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_Sculpture`",
            "created_at": 1705293862.304618
        },
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "raw_aws_opensearch_onchain_nft",
                "opensearch_onchain__raw_inu"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_opensearch_onchain_nft",
            "unique_id": "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "opensearch_onchain__raw_inu",
            "source_name": "raw_aws_opensearch_onchain_nft",
            "source_description": "",
            "loader": "",
            "identifier": "raw_opensearch_onchain_INU",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "owner": {
                    "name": "owner",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_INU`",
            "created_at": 1705293862.3085296
        },
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "opensearch_onchain",
                "raw_aws_opensearch_onchain_nft",
                "opensearch_onchain__raw_neko"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_opensearch_onchain_nft",
            "unique_id": "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "original_file_path": "models/staging/opensearch_onchain/src_opensearch_onchain.yml",
            "name": "opensearch_onchain__raw_neko",
            "source_name": "raw_aws_opensearch_onchain_nft",
            "source_description": "",
            "loader": "",
            "identifier": "raw_opensearch_onchain_NEKO",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "owner": {
                    "name": "owner",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_opensearch_onchain_nft`.`raw_opensearch_onchain_NEKO`",
            "created_at": 1705293862.3129249
        },
        "source.dbt_sipher.raw_social.discord_user_info": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "discord_user_info"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.discord_user_info",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "discord_user_info",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "discord_user_info__*",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "created_at": {
                    "name": "created_at",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`discord_user_info__*`",
            "created_at": 1705293862.3148367
        },
        "source.dbt_sipher.raw_social.discord_profile_stats": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "discord_profile_stats"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.discord_profile_stats",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "discord_profile_stats",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "discord_profile_stats__*",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "created_at": {
                    "name": "created_at",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`discord_profile_stats__*`",
            "created_at": 1705293862.3166833
        },
        "source.dbt_sipher.raw_social.tiktok_profile_stats": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "tiktok_profile_stats"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.tiktok_profile_stats",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "tiktok_profile_stats",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "tiktok_profile_stats",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "date": {
                    "name": "date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`tiktok_profile_stats`",
            "created_at": 1705293862.317564
        },
        "source.dbt_sipher.raw_social.tiktok_user_info": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "tiktok_user_info"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.tiktok_user_info",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "tiktok_user_info",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "tiktok_user_info",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`tiktok_user_info`",
            "created_at": 1705293862.3184695
        },
        "source.dbt_sipher.raw_social.tiktok_video_comment": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "tiktok_video_comment"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.tiktok_video_comment",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "tiktok_video_comment",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "tiktok_video_*",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "post_id": {
                    "name": "post_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "`desc`": {
                    "name": "`desc`",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`tiktok_video_*`",
            "created_at": 1705293862.32062
        },
        "source.dbt_sipher.raw_social.twitter_profile_stats": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "twitter_profile_stats"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.twitter_profile_stats",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "twitter_profile_stats",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "twitter_profile_stats__SIPHERxyz__",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`twitter_profile_stats__SIPHERxyz__`",
            "created_at": 1705293862.3215299
        },
        "source.dbt_sipher.raw_social.twitter_timeline": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "twitter_timeline"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.twitter_timeline",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "twitter_timeline",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "twitter_timeline",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "created_at": {
                    "name": "created_at",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`twitter_timeline`",
            "created_at": 1705293862.3233385
        },
        "source.dbt_sipher.raw_social.twitter_user_info": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "twitter_user_info"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.twitter_user_info",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "twitter_user_info",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "twitter_user_info__SIPHERxyz__*",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "created_at": {
                    "name": "created_at",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`twitter_user_info__SIPHERxyz__*`",
            "created_at": 1705293862.3252828
        },
        "source.dbt_sipher.raw_social.facebook_sipher_page_feed": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "facebook_sipher_page_feed"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.facebook_sipher_page_feed",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "facebook_sipher_page_feed",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "facebook_sipher_page_feed",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "__collected_ts": {
                    "name": "__collected_ts",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "page_id": {
                    "name": "page_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`facebook_sipher_page_feed`",
            "created_at": 1705293862.3277996
        },
        "source.dbt_sipher.raw_social.facebook_sipher_post_insights": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "facebook_sipher_post_insights"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.facebook_sipher_post_insights",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "facebook_sipher_post_insights",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "facebook_sipher_post_insights",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "name": {
                    "name": "name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "__collected_ts": {
                    "name": "__collected_ts",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`facebook_sipher_post_insights`",
            "created_at": 1705293862.3304174
        },
        "source.dbt_sipher.raw_social.facebook_sipher_post_comments": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "facebook_sipher_post_comments"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.facebook_sipher_post_comments",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "facebook_sipher_post_comments",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "facebook_sipher_post_comments",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "post_id": {
                    "name": "post_id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "__collected_ts": {
                    "name": "__collected_ts",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`facebook_sipher_post_comments`",
            "created_at": 1705293862.3322356
        },
        "source.dbt_sipher.raw_social.facebook_sipher_page_insights": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "facebook_sipher_page_insights"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.facebook_sipher_page_insights",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "facebook_sipher_page_insights",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "facebook_sipher_page_insights",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`facebook_sipher_page_insights`",
            "created_at": 1705293862.3323057
        },
        "source.dbt_sipher.raw_social.facebook_sipher_page_overall": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "facebook_sipher_page_overall"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.facebook_sipher_page_overall",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "facebook_sipher_page_overall",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "facebook_sipher_page_overall",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`facebook_sipher_page_overall`",
            "created_at": 1705293862.332365
        },
        "source.dbt_sipher.raw_social.facebook_sipher_page_impression_gender_locate": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "facebook_sipher_page_impression_gender_locate"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.facebook_sipher_page_impression_gender_locate",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "facebook_sipher_page_impression_gender_locate",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "facebook_sipher_page_impression_gender_locate",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`facebook_sipher_page_impression_gender_locate`",
            "created_at": 1705293862.332421
        },
        "source.dbt_sipher.raw_social.youtube_overview": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "youtube_overview"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.youtube_overview",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "youtube_overview",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "youtube_overview",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`youtube_overview`",
            "created_at": 1705293862.3324757
        },
        "source.dbt_sipher.raw_social.youtube_traffic_sources": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "youtube_traffic_sources"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.youtube_traffic_sources",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "youtube_traffic_sources",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "youtube_traffic_sources",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`youtube_traffic_sources`",
            "created_at": 1705293862.3325288
        },
        "source.dbt_sipher.raw_social.youtube_contents": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "youtube_contents"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.youtube_contents",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "youtube_contents",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "youtube_contents",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`youtube_contents`",
            "created_at": 1705293862.332581
        },
        "source.dbt_sipher.raw_social.youtube_demographics": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "youtube_demographics"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.youtube_demographics",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "youtube_demographics",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "youtube_demographics",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`youtube_demographics`",
            "created_at": 1705293862.3326316
        },
        "source.dbt_sipher.raw_social.youtube_geographic_areas": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "social",
                "raw_social",
                "youtube_geographic_areas"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_social",
            "unique_id": "source.dbt_sipher.raw_social.youtube_geographic_areas",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/social/src_social.yml",
            "original_file_path": "models/staging/social/src_social.yml",
            "name": "youtube_geographic_areas",
            "source_name": "raw_social",
            "source_description": "",
            "loader": "",
            "identifier": "youtube_geographic_areas",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_social`.`youtube_geographic_areas`",
            "created_at": 1705293862.3326814
        },
        "source.dbt_sipher.raw_firebase_sipher_odyssey.events": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "raw_firebase_sipher_odyssey",
                "events"
            ],
            "database": "sipherg1production",
            "schema": "analytics_387396350",
            "unique_id": "source.dbt_sipher.raw_firebase_sipher_odyssey.events",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/firebase/src_firebase.yml",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "events",
            "source_name": "raw_firebase_sipher_odyssey",
            "source_description": "",
            "loader": "",
            "identifier": "events_*",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_MICROS(event_timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "event_timestamp": {
                    "name": "event_timestamp",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "event_name": {
                    "name": "event_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "event_params": {
                    "name": "event_params",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "user_properties": {
                    "name": "user_properties",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "ecommerce": {
                    "name": "ecommerce",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "items": {
                    "name": "items",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "collected_traffic_source": {
                    "name": "collected_traffic_source",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipherg1production`.`analytics_387396350`.`events_*`",
            "created_at": 1705293862.348549
        },
        "source.dbt_sipher.raw_firebase_hidden_atlas.events": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "raw_firebase_hidden_atlas",
                "events"
            ],
            "database": "hidden-atlas",
            "schema": "analytics_402014087",
            "unique_id": "source.dbt_sipher.raw_firebase_hidden_atlas.events",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/firebase/src_firebase.yml",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "events",
            "source_name": "raw_firebase_hidden_atlas",
            "source_description": "",
            "loader": "",
            "identifier": "events_*",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_MICROS(event_timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "event_timestamp": {
                    "name": "event_timestamp",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "event_name": {
                    "name": "event_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "event_params": {
                    "name": "event_params",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`hidden-atlas`.`analytics_402014087`.`events_*`",
            "created_at": 1705293862.3545864
        },
        "source.dbt_sipher.raw_firebase_artventure.events": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "firebase",
                "raw_firebase_artventure",
                "events"
            ],
            "database": "art-venture-387704",
            "schema": "analytics_376091252",
            "unique_id": "source.dbt_sipher.raw_firebase_artventure.events",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/firebase/src_firebase.yml",
            "original_file_path": "models/staging/firebase/src_firebase.yml",
            "name": "events",
            "source_name": "raw_firebase_artventure",
            "source_description": "",
            "loader": "",
            "identifier": "events_*",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_MICROS(event_timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "event_timestamp": {
                    "name": "event_timestamp",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "event_name": {
                    "name": "event_name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "event_params": {
                    "name": "event_params",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`art-venture-387704`.`analytics_376091252`.`events_*`",
            "created_at": 1705293862.361275
        },
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "raw_aws_billing_gcs",
                "billing__raw_blockchain"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_billing_gcs",
            "unique_id": "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__billing/src_aws__billing.yml",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "billing__raw_blockchain",
            "source_name": "raw_aws_billing_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_blockchain_billing",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "identity_LineItemId": {
                    "name": "identity_LineItemId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_ProductCode": {
                    "name": "lineItem_ProductCode",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_UnblendedCost": {
                    "name": "lineItem_UnblendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_BlendedCost": {
                    "name": "lineItem_BlendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_LineItemDescription": {
                    "name": "lineItem_LineItemDescription",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_blockchain_billing`",
            "created_at": 1705293862.3759322
        },
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "raw_aws_billing_gcs",
                "billing__raw_g1"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_billing_gcs",
            "unique_id": "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__billing/src_aws__billing.yml",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "billing__raw_g1",
            "source_name": "raw_aws_billing_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_g1_billing",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "identity_LineItemId": {
                    "name": "identity_LineItemId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_ProductCode": {
                    "name": "lineItem_ProductCode",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_UnblendedCost": {
                    "name": "lineItem_UnblendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_BlendedCost": {
                    "name": "lineItem_BlendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_LineItemDescription": {
                    "name": "lineItem_LineItemDescription",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_g1_billing`",
            "created_at": 1705293862.386617
        },
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "raw_aws_billing_gcs",
                "billing__raw_marketplace"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_billing_gcs",
            "unique_id": "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__billing/src_aws__billing.yml",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "billing__raw_marketplace",
            "source_name": "raw_aws_billing_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_marketplace_billing",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "identity_LineItemId": {
                    "name": "identity_LineItemId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_ProductCode": {
                    "name": "lineItem_ProductCode",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_UnblendedCost": {
                    "name": "lineItem_UnblendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_BlendedCost": {
                    "name": "lineItem_BlendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_LineItemDescription": {
                    "name": "lineItem_LineItemDescription",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_marketplace_billing`",
            "created_at": 1705293862.3975277
        },
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "raw_aws_billing_gcs",
                "billing__raw_game_production"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_billing_gcs",
            "unique_id": "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__billing/src_aws__billing.yml",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "billing__raw_game_production",
            "source_name": "raw_aws_billing_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_game_production_billing",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "identity_LineItemId": {
                    "name": "identity_LineItemId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_ProductCode": {
                    "name": "lineItem_ProductCode",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_UnblendedCost": {
                    "name": "lineItem_UnblendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_BlendedCost": {
                    "name": "lineItem_BlendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_LineItemDescription": {
                    "name": "lineItem_LineItemDescription",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_game_production_billing`",
            "created_at": 1705293862.40854
        },
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "aws__billing",
                "raw_aws_billing_gcs",
                "billing__raw_metaverse"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_aws_billing_gcs",
            "unique_id": "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/aws__billing/src_aws__billing.yml",
            "original_file_path": "models/staging/aws__billing/src_aws__billing.yml",
            "name": "billing__raw_metaverse",
            "source_name": "raw_aws_billing_gcs",
            "source_description": "",
            "loader": "",
            "identifier": "gcs_external_raw_metaverse_billing",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(dt AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "identity_LineItemId": {
                    "name": "identity_LineItemId",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_ProductCode": {
                    "name": "lineItem_ProductCode",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_UnblendedCost": {
                    "name": "lineItem_UnblendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_BlendedCost": {
                    "name": "lineItem_BlendedCost",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "lineItem_LineItemDescription": {
                    "name": "lineItem_LineItemDescription",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "dt": {
                    "name": "dt",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_aws_billing_gcs`.`gcs_external_raw_metaverse_billing`",
            "created_at": 1705293862.4195285
        },
        "source.dbt_sipher.raw_coinmarketcap.main_token_quotes": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "raw_coinmarketcap",
                "main_token_quotes"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_coinmarketcap",
            "unique_id": "source.dbt_sipher.raw_coinmarketcap.main_token_quotes",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "main_token_quotes",
            "source_name": "raw_coinmarketcap",
            "source_description": "",
            "loader": "",
            "identifier": "main_token_quotes",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "CAST(timestamp AS timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "name": {
                    "name": "name",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes`",
            "created_at": 1705293862.4235375
        },
        "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "coinmarketcap",
                "raw_coinmarketcap",
                "main_token_quotes_intraday"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_coinmarketcap",
            "unique_id": "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "original_file_path": "models/staging/coinmarketcap/src_coinmarketcap.yml",
            "name": "main_token_quotes_intraday",
            "source_name": "raw_coinmarketcap",
            "source_description": "",
            "loader": "",
            "identifier": "main_token_quotes_intraday",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_SECONDS(CAST(timestamp AS INT64))",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "timestamp": {
                    "name": "timestamp",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "token_symbol": {
                    "name": "token_symbol",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_coinmarketcap`.`main_token_quotes_intraday`",
            "created_at": 1705293862.4279308
        },
        "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "etherscan",
                "raw_etherscan",
                "etherscan_polygon_important_wallet_accounts_balance"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_etherscan",
            "unique_id": "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/etherscan/src_etherscan.yml",
            "original_file_path": "models/staging/etherscan/src_etherscan.yml",
            "name": "etherscan_polygon_important_wallet_accounts_balance",
            "source_name": "raw_etherscan",
            "source_description": "",
            "loader": "",
            "identifier": "etherscan_polygon_important_wallet_accounts_balance",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "TIMESTAMP_SECONDS(timestamp)",
            "freshness": {
                "warn_after": {
                    "count": 1,
                    "period": "day"
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "wallet_address": {
                    "name": "wallet_address",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "token_symbol": {
                    "name": "token_symbol",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "timestamp": {
                    "name": "timestamp",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_etherscan`.`etherscan_polygon_important_wallet_accounts_balance`",
            "created_at": 1705293862.433149
        },
        "source.dbt_sipher.raw_meta_equipment.blueprint": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "blueprint"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.blueprint",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "blueprint",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "blueprint",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table containing information about blueprints.",
            "columns": {
                "type": {
                    "name": "type",
                    "description": "If column type has value 'Gear', column gearType will have values. Otherwise, it belongs to weaponType",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "weaponType": {
                    "name": "weaponType",
                    "description": "Test to check weaponType column has values only if gearType column is Null",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "race": {
                    "name": "race",
                    "description": "Test to check Race only has values if gearType is not null",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "tier": {
                    "name": "tier",
                    "description": "Tier of table blueprint",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`blueprint`",
            "created_at": 1705318295.4390109
        },
        "source.dbt_sipher.raw_meta_equipment.capsule": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "capsule"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.capsule",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "capsule",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "capsule",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table about capsule",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "Id of table capsule",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "tier": {
                    "name": "tier",
                    "description": "Tier of table capsule",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`capsule`",
            "created_at": 1705318295.443128
        },
        "source.dbt_sipher.raw_meta_equipment.character": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "character"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.character",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "character",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "character",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table about character",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "Id of table character",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "tier": {
                    "name": "tier",
                    "description": "Tier of table character",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`character`",
            "created_at": 1705318295.4475183
        },
        "source.dbt_sipher.raw_meta_equipment.currency": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "currency"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.currency",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "currency",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "currency",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table about currency",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "Id of table currency",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "tier": {
                    "name": "tier",
                    "description": "Tier of table currency",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`currency`",
            "created_at": 1705318295.4518359
        },
        "source.dbt_sipher.raw_meta_equipment.equipment": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "equipment"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.equipment",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "equipment",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "equipment",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table about equipment",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "Id of table equipment",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "tier": {
                    "name": "tier",
                    "description": "Tier of table equipment",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`equipment`",
            "created_at": 1705318295.4564912
        },
        "source.dbt_sipher.raw_meta_equipment.equipment_part": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "equipment_part"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.equipment_part",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "equipment_part",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "equipment_part",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table about equipment_part",
            "columns": {
                "tier": {
                    "name": "tier",
                    "description": "Tier of table equipment_part",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`equipment_part`",
            "created_at": 1705318295.4618356
        },
        "source.dbt_sipher.raw_meta_equipment.sipher_game_reward": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "sipher_game_reward"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.sipher_game_reward",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "sipher_game_reward",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "sipher_game_reward",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table about sipher reward",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "Id of table sipher_game_reward",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`sipher_game_reward`",
            "created_at": 1705318295.464485
        },
        "source.dbt_sipher.raw_meta_equipment.weapon": {
            "fqn": [
                "dbt_sipher",
                "staging",
                "sipher_meta_equipment",
                "raw_meta_equipment",
                "weapon"
            ],
            "database": "sipher-data-platform",
            "schema": "raw_meta_equipment",
            "unique_id": "source.dbt_sipher.raw_meta_equipment.weapon",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "original_file_path": "models/staging/sipher_meta_equipment/src_sipher_meta_equipment.yml",
            "name": "weapon",
            "source_name": "raw_meta_equipment",
            "source_description": "",
            "loader": "",
            "identifier": "weapon",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "Table about weapon",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "Id of table weapon",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                },
                "tier": {
                    "name": "tier",
                    "description": "Tier of table weapon",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "`sipher-data-platform`.`raw_meta_equipment`.`weapon`",
            "created_at": 1705318295.4696968
        }
    },
    "macros": {
        "macro.dbt_sipher.get_max_column_value": {
            "unique_id": "macro.dbt_sipher.get_max_column_value",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/get_max_column_value.sql",
            "original_file_path": "macros/get_max_column_value.sql",
            "name": "get_max_column_value",
            "macro_sql": "{% macro get_max_column_value(table, column) %}\n\n{% set max_value_column_query %}\n  SELECT MAX({{ column }}) FROM {{ table }}\n{% endset %}\n\n{% set results = run_query(max_value_column_query) %}\n\n{% if execute %}\n{# Return the first column #}\n{% set max_value = results.columns[0].values()[0] %}\n{% else %}\n{% set max_value = '' %}\n{% endif %}\n\n{{ return(max_value) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.672493,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_latest_table_suffix": {
            "unique_id": "macro.dbt_sipher.get_latest_table_suffix",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/get_max_column_value.sql",
            "original_file_path": "macros/get_max_column_value.sql",
            "name": "get_latest_table_suffix",
            "macro_sql": "{% macro get_latest_table_suffix(table) %}\n\n{% set results = get_max_column_value(table=table, column=\"_TABLE_SUFFIX\") %}\n\n{{ return(results) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.get_max_column_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.672758,
            "supported_languages": null
        },
        "macro.dbt_sipher.generate_schema_name": {
            "unique_id": "macro.dbt_sipher.generate_schema_name",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6731968,
            "supported_languages": null
        },
        "macro.dbt_sipher.load_metadata": {
            "unique_id": "macro.dbt_sipher.load_metadata",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/metadata.sql",
            "original_file_path": "macros/metadata.sql",
            "name": "load_metadata",
            "macro_sql": "{% macro load_metadata(sources=[]) -%}\n  ARRAY[STRUCT(\n      CURRENT_TIMESTAMP() AS data_load_timestamp,\n      \"{{ sources | join(\"|\") }}\" AS data_sources\n    )]\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.673473,
            "supported_languages": null
        },
        "macro.dbt_sipher.store_test_results": {
            "unique_id": "macro.dbt_sipher.store_test_results",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/store_test_results.sql",
            "original_file_path": "macros/store_test_results.sql",
            "name": "store_test_results",
            "macro_sql": "{% macro store_test_results(results) %}\n  {%- set test_results = [] -%}\n\n  {%- for result in results if result.node.resource_type == 'test' -%}\n    {%- set test_results = test_results.append(result) -%}\n  {%- endfor -%}\n\n  {% if test_results|length == 0 -%}\n    {{ log(\"store_test_results found no test results to process.\") if execute }}\n    {{ return('') }}\n  {% endif -%}\n\n  {%- set central_tbl -%} {{ target.project }}.{{ target.schema }}.test_results_central {%- endset -%}\n  {%- set history_tbl -%} {{ target.project }}.{{ target.schema }}.test_results_history {%- endset -%}\n  \n  {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" + central_tbl, info = true) if execute }}\n  {{ log(test_results, info=true) }}\n  create or replace table {{ central_tbl }} as (\n  \n  {%- for result in test_results %}\n\n    {%- set test_name = '' -%}\n    {%- set test_type = '' -%}\n    {%- set column_name = '' -%}\n\n    {%- if result.node.test_metadata is defined -%}\n      {%- set test_name = result.node.test_metadata.name -%}\n      {%- set test_type = 'generic' -%}\n      \n      {%- if test_name == 'relationships' -%}\n        {%- set column_name = result.node.test_metadata.kwargs.field ~ ',' ~ result.node.test_metadata.kwargs.column_name -%}\n      {%- else -%}\n        {%- set column_name = result.node.test_metadata.kwargs.column_name -%}\n      {%- endif -%}\n    {%- elif result.node.name is defined -%}\n      {%- set test_name = result.node.name -%}\n      {%- set test_type = 'singular' -%}\n    {%- endif %}\n    \n    select\n      cast('{{ test_name }}' as string) as test_name,\n      cast('{{ result.node.config.severity }}' as string) as test_severity_config,\n      cast('{{ result.status }}' as string) as test_result,\n      cast('{{ process_refs(result.node.refs) }}' as string) as model_refs,\n      cast('{{ process_refs(result.node.sources, is_src=true) }}' as string) as source_refs,\n      cast('{{ column_name|escape }}' as string) as column_names,\n      cast('{{ result.node.name }}' as string) as test_name_long,\n      cast('{{ test_type }}' as string) as test_type,\n      cast('{{ result.execution_time }}' as string) as execution_time_seconds,\n      cast('{{ result.node.original_file_path }}' as string) as file_test_defined,\n      cast('{{ var(\"pipeline_name\", \"variable_not_set\") }}' as string) as pipeline_name,\n      cast('{{ var(\"pipeline_type\", \"variable_not_set\") }}' as string) as pipeline_type,\n      cast('{{ target.name }}' as string) as dbt_cloud_target_name,\n      cast('{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"manual\") }}' as string) as _audit_project_id,\n      cast('{{ env_var(\"DBT_CLOUD_JOB_ID\", \"manual\") }}' as string) as _audit_job_id,\n      cast('{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' as string) as _audit_run_id,\n      '{{ env_var(\"DBT_CLOUD_URL\", \"https://cloud.getdbt.com/#/accounts/account_id/projects/\") }}'||cast('{{ env_var(\"DBT_CLOUD_PROJECT_ID\", \"manual\") }}' as string) ||'/runs/'|| cast('{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' as string) as _audit_run_url,\n      current_timestamp as _timestamp\n    {{ \"union all\" if not loop.last }}\n  \n  {%- endfor %}\n  \n  );\n\n  {% if target.name != 'default' %}\n      create table if not exists {{ history_tbl }} as (\n        select \n       -- must change into generate_surrogate_key, otherwise it will be ERROR\n          {{ dbt_utils.generate_surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n          * \n        from {{ central_tbl }}\n        where false\n      );\n\n    insert into {{ history_tbl }} \n      select \n       {{ dbt_utils.generate_surrogate_key([\"test_name\", \"test_result\", \"_timestamp\"]) }} as sk_id, \n       * \n      from {{ central_tbl }}\n    ;\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_sipher.process_refs",
                    "macro.dbt_utils.generate_surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6816888,
            "supported_languages": null
        },
        "macro.dbt_sipher.process_refs": {
            "unique_id": "macro.dbt_sipher.process_refs",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/store_test_results.sql",
            "original_file_path": "macros/store_test_results.sql",
            "name": "process_refs",
            "macro_sql": "{% macro process_refs( ref_list, is_src=false ) %}\n  {% set refs = [] %}\n\n  {% if ref_list is defined and ref_list|length > 0 %}\n      {% for ref in ref_list %}\n        {% if is_src %}\n          {{ refs.append(ref|join('.')) }}\n        {% else %}\n          {{ refs.append(ref[0]) }}\n        {% endif %} \n      {% endfor %}\n\n      {{ return(refs|join(',')) }}\n  {% else %}\n      {{ return('') }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6823907,
            "supported_languages": null
        },
        "macro.dbt_sipher.clean_advertising_id": {
            "unique_id": "macro.dbt_sipher.clean_advertising_id",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "clean_advertising_id",
            "macro_sql": "{% macro clean_advertising_id(advertising_id_column=\"device.advertising_id\") -%}\n    CASE WHEN {{ advertising_id_column }} IN ('', '00000000-0000-0000-0000-000000000000') THEN NULL ELSE {{ advertising_id_column }} END\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6832268,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_string_value_from_user_properties": {
            "unique_id": "macro.dbt_sipher.get_string_value_from_user_properties",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_string_value_from_user_properties",
            "macro_sql": "{% macro get_string_value_from_user_properties(key) -%}\n    (SELECT up.value.string_value FROM UNNEST(user_properties) AS up WHERE up.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6833339,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_int_value_from_user_properties": {
            "unique_id": "macro.dbt_sipher.get_int_value_from_user_properties",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_int_value_from_user_properties",
            "macro_sql": "{% macro get_int_value_from_user_properties(key) -%}\n    (SELECT up.value.int_value FROM UNNEST(user_properties) AS up WHERE up.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6834383,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_float_value_from_user_properties": {
            "unique_id": "macro.dbt_sipher.get_float_value_from_user_properties",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_float_value_from_user_properties",
            "macro_sql": "{% macro get_float_value_from_user_properties(key) -%}\n    (SELECT up.value.float_value FROM UNNEST(user_properties) AS up WHERE up.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.683545,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_double_value_from_user_properties": {
            "unique_id": "macro.dbt_sipher.get_double_value_from_user_properties",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_double_value_from_user_properties",
            "macro_sql": "{% macro get_double_value_from_user_properties(key) -%}\n    (SELECT up.value.double_value FROM UNNEST(user_properties) AS up WHERE up.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6836467,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_string_value_from_event_params": {
            "unique_id": "macro.dbt_sipher.get_string_value_from_event_params",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_string_value_from_event_params",
            "macro_sql": "{% macro get_string_value_from_event_params(key) -%}\n    (SELECT ep.value.string_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6837492,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_int_value_from_event_params": {
            "unique_id": "macro.dbt_sipher.get_int_value_from_event_params",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_int_value_from_event_params",
            "macro_sql": "{% macro get_int_value_from_event_params(key) -%}\n    (SELECT ep.value.int_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6838586,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_float_value_from_event_params": {
            "unique_id": "macro.dbt_sipher.get_float_value_from_event_params",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_float_value_from_event_params",
            "macro_sql": "{% macro get_float_value_from_event_params(key) -%}\n    (SELECT ep.value.float_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.683962,
            "supported_languages": null
        },
        "macro.dbt_sipher.get_double_value_from_event_params": {
            "unique_id": "macro.dbt_sipher.get_double_value_from_event_params",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "macros/preprocess_firebase.sql",
            "original_file_path": "macros/preprocess_firebase.sql",
            "name": "get_double_value_from_event_params",
            "macro_sql": "{% macro get_double_value_from_event_params(key) -%}\n    (SELECT ep.value.double_value FROM UNNEST(event_params) AS ep WHERE ep.key = \"{{ key }}\")\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6840649,
            "supported_languages": null
        },
        "macro.dbt_sipher.test_missing_dungeon": {
            "unique_id": "macro.dbt_sipher.test_missing_dungeon",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "tests/generic/missing_dungeon.sql",
            "original_file_path": "tests/generic/missing_dungeon.sql",
            "name": "test_missing_dungeon",
            "macro_sql": "{% test missing_dungeon(model  ) %}\n\nwith \n\ndungeon_id_difficulty as (\n  SELECT distinct dungeon_id_difficulty ,\n  dense_rank() over(order by dungeon_id_difficulty ) as stt\nFROM {{model}}\nWHERE true\nand REGEXP_CONTAINS(UPPER(dungeon_id),  'FTUE|ENDLESS') = FALSE \n)\n\n,gameplaytb AS (\nSELECT\n    DISTINCT g1.user_id,\n    g1.dungeon_id_difficulty,\n    gameplay_status,\n    stt\nFROM\n    {{model}} g1\nJOIN dungeon_id_difficulty dd using(dungeon_id_difficulty)\nWHERE TRUE\n    AND UPPER(dungeon_id) NOT LIKE '%FTUE%' \n    AND UPPER(dungeon_id) NOT LIKE '%ENDLESS%' \n    \n    )\n\n\n\nSELECT\ncur_dungeon.*\nFROM\ngameplaytb cur_dungeon\nLEFT JOIN\ngameplaytb pre_dungeon\nON\ncur_dungeon.user_id = pre_dungeon.user_id\nAND cur_dungeon.stt = pre_dungeon.stt + 1\nAND pre_dungeon.gameplay_status = 'SUCCESS'\nWHERE\nTRUE\nAND cur_dungeon.stt > 1\nAND pre_dungeon.gameplay_status IS NULL\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6844673,
            "supported_languages": null
        },
        "macro.dbt_sipher.test_hploss_non_zero_when_down_nonzero": {
            "unique_id": "macro.dbt_sipher.test_hploss_non_zero_when_down_nonzero",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "tests/generic/hploss_non_zero_when_down_nonzero.sql",
            "original_file_path": "tests/generic/hploss_non_zero_when_down_nonzero.sql",
            "name": "test_hploss_non_zero_when_down_nonzero",
            "macro_sql": "{% test hploss_non_zero_when_down_nonzero(model,hp_column, down_column) %}\nwith exceptions as (\n      SELECT\n              *        \n      FROM {{model}}\n      WHERE TRUE \n        AND IFNULL({{down_column}},0) > 0 AND IFNULL({{hp_column}},0) = 0\n      )\n\nselect * from exceptions\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6847615,
            "supported_languages": null
        },
        "macro.dbt_sipher.test_decode_dungeon_id_difficulty": {
            "unique_id": "macro.dbt_sipher.test_decode_dungeon_id_difficulty",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "tests/generic/decode_dungeon_id_difficulty.sql",
            "original_file_path": "tests/generic/decode_dungeon_id_difficulty.sql",
            "name": "test_decode_dungeon_id_difficulty",
            "macro_sql": "{% test decode_dungeon_id_difficulty(model) %}\nwith exceptions as (\n    SELECT distinct session_id, user_id, dungeon_id_difficulty \n    FROM{{model}}\n    WHERE true\n    AND  REGEXP_CONTAINS(dungeon_id_difficulty, r'DUNGEON') \n    AND NOT REGEXP_CONTAINS(dungeon_id_difficulty, r'^\\d{2}')  \n    AND NOT REGEXP_CONTAINS(dungeon_id_difficulty, r'\\d{2}$')  \n)\n\nselect * from exceptions\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.685011,
            "supported_languages": null
        },
        "macro.dbt_sipher.test_check_columns_for_nulls": {
            "unique_id": "macro.dbt_sipher.test_check_columns_for_nulls",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "tests/generic/check_columns_for_nulls.sql",
            "original_file_path": "tests/generic/check_columns_for_nulls.sql",
            "name": "test_check_columns_for_nulls",
            "macro_sql": "{% test check_columns_for_nulls(model, columns, condition ) %}\nwith exceptions as (\n      SELECT\n      COUNT(*) AS error_count\n        \n      FROM {{model}}\n      WHERE TRUE \n      AND {{condition}}\n      AND  {%- for column in columns %}\n\n      {{column}} IS NULL  \n      {{ \"AND\" if not loop.last }}\n\n        {%- endfor %}\n      )\n\nselect * from exceptions\nwhere error_count > 0\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.685453,
            "supported_languages": null
        },
        "macro.dbt_sipher.test_accepted_levels_in_dungeon": {
            "unique_id": "macro.dbt_sipher.test_accepted_levels_in_dungeon",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "tests/generic/accepted_levels_in_dungeon.sql",
            "original_file_path": "tests/generic/accepted_levels_in_dungeon.sql",
            "name": "test_accepted_levels_in_dungeon",
            "macro_sql": "{% test accepted_levels_in_dungeon(model) %}\nwith exceptions as (\n      SELECT\n      *\n        \n      FROM {{model}}\n      WHERE TRUE \n        AND IFNULL(gameplay_down,0) > 0 AND IFNULL(gameplay_hp_loss,0) = 0\n      )\n\nselect * from exceptions\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6856685,
            "supported_languages": null
        },
        "macro.dbt_sipher.test_missing_level": {
            "unique_id": "macro.dbt_sipher.test_missing_level",
            "package_name": "dbt_sipher",
            "root_path": "/dbt_sipher",
            "path": "tests/generic/missing_level.sql",
            "original_file_path": "tests/generic/missing_level.sql",
            "name": "test_missing_level",
            "macro_sql": "{% test missing_level(model  ) %}\n\n        WITH\n        lvltb AS (\n        SELECT\n            DISTINCT g1.user_id,\n            g1.session_id,\n            g1.level_start_level_count,\n            level_status\n        FROM\n           {{model}} g1\n        WHERE\n            mode = 'SINGLE'\n            AND UPPER(dungeon_id) NOT LIKE '%FTUE%' \n            AND UPPER(dungeon_id) NOT LIKE '%ENDLESS%' \n            \n            )\n        SELECT\n        cur_lvl.*\n        FROM\n        lvltb cur_lvl\n        LEFT JOIN\n        lvltb pre_lvl\n        ON\n        cur_lvl.user_id = pre_lvl.user_id\n        AND cur_lvl.session_id = pre_lvl.session_id\n        AND cur_lvl.level_start_level_count = pre_lvl.level_start_level_count + 1\n        AND pre_lvl.level_status = 'SUCCESS'\n        WHERE\n        TRUE\n        AND cur_lvl.level_start_level_count > 1\n        AND pre_lvl.level_status IS NULL\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6860096,
            "supported_languages": null
        },
        "macro.dbt_bigquery.date_sharded_table": {
            "unique_id": "macro.dbt_bigquery.date_sharded_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/etc.sql",
            "original_file_path": "macros/etc.sql",
            "name": "date_sharded_table",
            "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6863532,
            "supported_languages": null
        },
        "macro.dbt_bigquery.grant_access_to": {
            "unique_id": "macro.dbt_bigquery.grant_access_to",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/etc.sql",
            "original_file_path": "macros/etc.sql",
            "name": "grant_access_to",
            "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6865585,
            "supported_languages": null
        },
        "macro.dbt_bigquery.get_partitions_metadata": {
            "unique_id": "macro.dbt_bigquery.get_partitions_metadata",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/etc.sql",
            "original_file_path": "macros/etc.sql",
            "name": "get_partitions_metadata",
            "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6868095,
            "supported_languages": null
        },
        "macro.dbt_bigquery.partition_by": {
            "unique_id": "macro.dbt_bigquery.partition_by",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "partition_by",
            "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.691456,
            "supported_languages": null
        },
        "macro.dbt_bigquery.cluster_by": {
            "unique_id": "macro.dbt_bigquery.cluster_by",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "cluster_by",
            "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6919234,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_options",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery_options",
            "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6923327,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery_table_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_table_options",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery_table_options",
            "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6926136,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__create_table_as": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_table_as",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__create_table_as",
            "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.partition_by",
                    "macro.dbt_bigquery.cluster_by",
                    "macro.dbt_bigquery.bigquery_table_options",
                    "macro.dbt_bigquery.py_write_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6936545,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery_view_options": {
            "unique_id": "macro.dbt_bigquery.bigquery_view_options",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery_view_options",
            "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.693921,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__create_view_as": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_view_as",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__create_view_as",
            "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery_view_options"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.694243,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__drop_schema": {
            "unique_id": "macro.dbt_bigquery.bigquery__drop_schema",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__drop_schema",
            "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6943722,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__drop_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__drop_relation",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__drop_relation",
            "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.694575,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_columns_in_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__get_columns_in_relation",
            "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6947336,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__list_relations_without_caching": {
            "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__list_relations_without_caching",
            "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6948948,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__list_schemas": {
            "unique_id": "macro.dbt_bigquery.bigquery__list_schemas",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__list_schemas",
            "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6950498,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__check_schema_exists": {
            "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__check_schema_exists",
            "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6952424,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__persist_docs": {
            "unique_id": "macro.dbt_bigquery.bigquery__persist_docs",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__persist_docs",
            "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6955328,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_column_comment": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_column_comment",
            "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6956937,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__rename_relation": {
            "unique_id": "macro.dbt_bigquery.bigquery__rename_relation",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__rename_relation",
            "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6958628,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_relation_add_columns",
            "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6962845,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_relation_drop_columns",
            "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6966805,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__alter_column_type": {
            "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__alter_column_type",
            "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_relation",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6977248,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__test_unique": {
            "unique_id": "macro.dbt_bigquery.bigquery__test_unique",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__test_unique",
            "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6979113,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__upload_file": {
            "unique_id": "macro.dbt_bigquery.bigquery__upload_file",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "name": "bigquery__upload_file",
            "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.6982038,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_catalog": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_catalog",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "name": "bigquery__get_catalog",
            "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7017808,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_show_grant_sql": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "bigquery__get_show_grant_sql",
            "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7026138,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_grant_sql": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "bigquery__get_grant_sql",
            "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.702894,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__get_revoke_sql": {
            "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "bigquery__get_revoke_sql",
            "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7031431,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__safe_cast": {
            "unique_id": "macro.dbt_bigquery.bigquery__safe_cast",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "bigquery__safe_cast",
            "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7033825,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__except": {
            "unique_id": "macro.dbt_bigquery.bigquery__except",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "bigquery__except",
            "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7035422,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__position": {
            "unique_id": "macro.dbt_bigquery.bigquery__position",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "bigquery__position",
            "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.703777,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__bool_or": {
            "unique_id": "macro.dbt_bigquery.bigquery__bool_or",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "bigquery__bool_or",
            "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7039802,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__array_construct": {
            "unique_id": "macro.dbt_bigquery.bigquery__array_construct",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "name": "bigquery__array_construct",
            "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7043538,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__date_trunc": {
            "unique_id": "macro.dbt_bigquery.bigquery__date_trunc",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "bigquery__date_trunc",
            "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7045817,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__array_append": {
            "unique_id": "macro.dbt_bigquery.bigquery__array_append",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "name": "bigquery__array_append",
            "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.array_concat",
                    "macro.dbt.array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7048647,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__hash": {
            "unique_id": "macro.dbt_bigquery.bigquery__hash",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "bigquery__hash",
            "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7050805,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__current_timestamp": {
            "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "name": "bigquery__current_timestamp",
            "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7052984,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {
            "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "name": "bigquery__snapshot_string_as_time",
            "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.705494,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {
            "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/timestamps.sql",
            "original_file_path": "macros/utils/timestamps.sql",
            "name": "bigquery__current_timestamp_backcompat",
            "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7055745,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__array_concat": {
            "unique_id": "macro.dbt_bigquery.bigquery__array_concat",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "name": "bigquery__array_concat",
            "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7058046,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__datediff": {
            "unique_id": "macro.dbt_bigquery.bigquery__datediff",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "bigquery__datediff",
            "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7063692,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__intersect": {
            "unique_id": "macro.dbt_bigquery.bigquery__intersect",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "bigquery__intersect",
            "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7065246,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__escape_single_quotes": {
            "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "bigquery__escape_single_quotes",
            "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7067645,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__right": {
            "unique_id": "macro.dbt_bigquery.bigquery__right",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "bigquery__right",
            "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7071369,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__dateadd": {
            "unique_id": "macro.dbt_bigquery.bigquery__dateadd",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "bigquery__dateadd",
            "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7074103,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__split_part": {
            "unique_id": "macro.dbt_bigquery.bigquery__split_part",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "bigquery__split_part",
            "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7080297,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__listagg": {
            "unique_id": "macro.dbt_bigquery.bigquery__listagg",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "bigquery__listagg",
            "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.708477,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__handle_existing_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/view.sql",
            "original_file_path": "macros/materializations/view.sql",
            "name": "bigquery__handle_existing_table",
            "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7091088,
            "supported_languages": null
        },
        "macro.dbt_bigquery.materialization_view_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_view_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/view.sql",
            "original_file_path": "macros/materializations/view.sql",
            "name": "materialization_view_bigquery",
            "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_or_replace_view",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.709818,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_bigquery.declare_dbt_max_partition": {
            "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "declare_dbt_max_partition",
            "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, complied_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in complied_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7122629,
            "supported_languages": null
        },
        "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {
            "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "dbt_bigquery_validate_get_incremental_strategy",
            "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.712716,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bq_insert_overwrite": {
            "unique_id": "macro.dbt_bigquery.bq_insert_overwrite",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "bq_insert_overwrite",
            "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, compiled_code) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql",
                    "macro.dbt_bigquery.declare_dbt_max_partition",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7140174,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bq_generate_incremental_build_sql": {
            "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "bq_generate_incremental_build_sql",
            "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bq_insert_overwrite",
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7150686,
            "supported_languages": null
        },
        "macro.dbt_bigquery.materialization_incremental_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "name": "materialization_incremental_bigquery",
            "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           create_table_as(True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.load_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_bigquery.declare_dbt_max_partition",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt_bigquery.bq_generate_incremental_build_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.718687,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_bigquery.materialization_copy_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/copy.sql",
            "original_file_path": "macros/materializations/copy.sql",
            "name": "materialization_copy_bigquery",
            "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7200272,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {
            "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/snapshot.sql",
            "original_file_path": "macros/materializations/snapshot.sql",
            "name": "bigquery__snapshot_hash_arguments",
            "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7204933,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__create_columns": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_columns",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/snapshot.sql",
            "original_file_path": "macros/materializations/snapshot.sql",
            "name": "bigquery__create_columns",
            "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7206619,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__post_snapshot": {
            "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/snapshot.sql",
            "original_file_path": "macros/materializations/snapshot.sql",
            "name": "bigquery__post_snapshot",
            "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7207959,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__create_csv_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "name": "bigquery__create_csv_table",
            "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7211938,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__reset_csv_table": {
            "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "name": "bigquery__reset_csv_table",
            "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.721392,
            "supported_languages": null
        },
        "macro.dbt_bigquery.bigquery__load_csv_rows": {
            "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/seed.sql",
            "original_file_path": "macros/materializations/seed.sql",
            "name": "bigquery__load_csv_rows",
            "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.722072,
            "supported_languages": null
        },
        "macro.dbt_bigquery.materialization_table_bigquery": {
            "unique_id": "macro.dbt_bigquery.materialization_table_bigquery",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "name": "materialization_table_bigquery",
            "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7256505,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_bigquery.py_write_table": {
            "unique_id": "macro.dbt_bigquery.py_write_table",
            "package_name": "dbt_bigquery",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/bigquery",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "name": "py_write_table",
            "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7259984,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "unique_id": "macro.dbt.statement",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7275438,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "unique_id": "macro.dbt.noop_statement",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7281284,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "unique_id": "macro.dbt.run_query",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "name": "run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.728427,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "unique_id": "macro.dbt.convert_datetime",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7303276,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "unique_id": "macro.dbt.dates_in_range",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7316113,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "unique_id": "macro.dbt.partition_range",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7323813,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "unique_id": "macro.dbt.py_current_timestring",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "name": "py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7326128,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "unique_id": "macro.dbt.create_schema",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7330801,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "unique_id": "macro.dbt.default__create_schema",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7332623,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "unique_id": "macro.dbt.drop_schema",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.733425,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "unique_id": "macro.dbt.default__drop_schema",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "name": "default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.733609,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "unique_id": "macro.dbt.get_create_index_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7341328,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7342708,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "unique_id": "macro.dbt.create_indexes",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7344313,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "unique_id": "macro.dbt.default__create_indexes",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "name": "default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.734837,
            "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
            "unique_id": "macro.dbt.alter_column_comment",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7357168,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "unique_id": "macro.dbt.default__alter_column_comment",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7359204,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "unique_id": "macro.dbt.alter_relation_comment",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.736129,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.736299,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "unique_id": "macro.dbt.persist_docs",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7365668,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "unique_id": "macro.dbt.default__persist_docs",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "name": "default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7370687,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "unique_id": "macro.dbt.current_timestamp",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7376304,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "unique_id": "macro.dbt.default__current_timestamp",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.737781,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "unique_id": "macro.dbt.snapshot_get_time",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.737936,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.738041,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.738211,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7383544,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.738521,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "name": "default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7386823,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "unique_id": "macro.dbt.copy_grants",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7403536,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "unique_id": "macro.dbt.default__copy_grants",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.740468,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.740633,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7407389,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "unique_id": "macro.dbt.should_revoke",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.74109,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "unique_id": "macro.dbt.get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7412748,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7413735,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "unique_id": "macro.dbt.get_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.741598,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "unique_id": "macro.dbt.default__get_grant_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7417834,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "unique_id": "macro.dbt.get_revoke_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.742016,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7422016,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7424302,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7431154,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "unique_id": "macro.dbt.call_dcl_statements",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7433043,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7435477,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "unique_id": "macro.dbt.apply_grants",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7437758,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "unique_id": "macro.dbt.default__apply_grants",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "name": "default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7452934,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "unique_id": "macro.dbt.get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7469225,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7470853,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7473934,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "unique_id": "macro.dbt.get_columns_in_query",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7475693,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.74792,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "unique_id": "macro.dbt.alter_column_type",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7481487,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "unique_id": "macro.dbt.default__alter_column_type",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7487438,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.749032,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "name": "default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.750004,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "unique_id": "macro.dbt.collect_freshness",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7505045,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "unique_id": "macro.dbt.default__collect_freshness",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "name": "default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.750943,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "unique_id": "macro.dbt.make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7550213,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7553904,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "unique_id": "macro.dbt.make_temp_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7556863,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "unique_id": "macro.dbt.default__make_temp_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7560549,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "unique_id": "macro.dbt.make_backup_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7565284,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "unique_id": "macro.dbt.default__make_backup_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7572458,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "unique_id": "macro.dbt.drop_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.757607,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "unique_id": "macro.dbt.default__drop_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.757939,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "unique_id": "macro.dbt.truncate_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7582412,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "unique_id": "macro.dbt.default__truncate_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7585034,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "unique_id": "macro.dbt.rename_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7587724,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "unique_id": "macro.dbt.default__rename_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.759162,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "unique_id": "macro.dbt.get_or_create_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7594903,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.760293,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "unique_id": "macro.dbt.load_cached_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7605798,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "unique_id": "macro.dbt.load_relation",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7607713,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "name": "drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7611017,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "unique_id": "macro.dbt.get_catalog",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7631812,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "unique_id": "macro.dbt.default__get_catalog",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7637205,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "unique_id": "macro.dbt.information_schema_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7641068,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "unique_id": "macro.dbt.default__information_schema_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7643232,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "unique_id": "macro.dbt.list_schemas",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7645438,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "unique_id": "macro.dbt.default__list_schemas",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7648888,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "unique_id": "macro.dbt.check_schema_exists",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7653046,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "unique_id": "macro.dbt.default__check_schema_exists",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7657127,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "unique_id": "macro.dbt.list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7659552,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "name": "default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7661524,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "unique_id": "macro.dbt.build_ref_function",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7680633,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "unique_id": "macro.dbt.build_source_function",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7686522,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "unique_id": "macro.dbt.build_config_dict",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.769257,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "unique_id": "macro.dbt.py_script_postfix",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7698083,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "unique_id": "macro.dbt.py_script_comment",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "name": "py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.769916,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "unique_id": "macro.dbt.default__test_unique",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/unique.sql",
            "original_file_path": "macros/generic_test_sql/unique.sql",
            "name": "default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7703161,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "unique_id": "macro.dbt.default__test_accepted_values",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/accepted_values.sql",
            "original_file_path": "macros/generic_test_sql/accepted_values.sql",
            "name": "default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7710886,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "unique_id": "macro.dbt.default__test_relationships",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/relationships.sql",
            "original_file_path": "macros/generic_test_sql/relationships.sql",
            "name": "default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7715907,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "unique_id": "macro.dbt.default__test_not_null",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/generic_test_sql/not_null.sql",
            "original_file_path": "macros/generic_test_sql/not_null.sql",
            "name": "default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7720356,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "unique_id": "macro.dbt.last_day",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7725215,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "unique_id": "macro.dbt.default_last_day",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.772892,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "unique_id": "macro.dbt.default__last_day",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7730808,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "unique_id": "macro.dbt.safe_cast",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7734818,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "unique_id": "macro.dbt.default__safe_cast",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7736409,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "unique_id": "macro.dbt.except",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.77401,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "unique_id": "macro.dbt.default__except",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7741084,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "unique_id": "macro.dbt.length",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7744658,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "unique_id": "macro.dbt.default__length",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.774618,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "unique_id": "macro.dbt.position",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7755382,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "unique_id": "macro.dbt.default__position",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.775828,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "unique_id": "macro.dbt.bool_or",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7765508,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "unique_id": "macro.dbt.default__bool_or",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "name": "default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7767088,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "unique_id": "macro.dbt.array_construct",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "name": "array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.777719,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "unique_id": "macro.dbt.default__array_construct",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "name": "default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7782388,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "unique_id": "macro.dbt.string_literal",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.778701,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "unique_id": "macro.dbt.default__string_literal",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7788439,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "unique_id": "macro.dbt.date_trunc",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.779464,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "unique_id": "macro.dbt.default__date_trunc",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7797837,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "unique_id": "macro.dbt.array_append",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "name": "array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7803364,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "unique_id": "macro.dbt.default__array_append",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "name": "default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7805266,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "unique_id": "macro.dbt.hash",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7809238,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "unique_id": "macro.dbt.default__hash",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.781196,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "unique_id": "macro.dbt.type_string",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7827597,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "unique_id": "macro.dbt.default__type_string",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7829785,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "unique_id": "macro.dbt.type_timestamp",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.783187,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "unique_id": "macro.dbt.default__type_timestamp",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7834077,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "unique_id": "macro.dbt.type_float",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7836094,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "unique_id": "macro.dbt.default__type_float",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7837994,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "unique_id": "macro.dbt.type_numeric",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7839963,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "unique_id": "macro.dbt.default__type_numeric",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.784206,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "unique_id": "macro.dbt.type_bigint",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7843983,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "unique_id": "macro.dbt.default__type_bigint",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7845914,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "unique_id": "macro.dbt.type_int",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7848911,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "unique_id": "macro.dbt.default__type_int",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7850535,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "unique_id": "macro.dbt.type_boolean",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7852826,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "unique_id": "macro.dbt.default__type_boolean",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "name": "default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.785644,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "unique_id": "macro.dbt.replace",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7861853,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "unique_id": "macro.dbt.default__replace",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7863772,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "unique_id": "macro.dbt.array_concat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "name": "array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7867236,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "unique_id": "macro.dbt.default__array_concat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "name": "default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7869005,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "unique_id": "macro.dbt.datediff",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7873015,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "unique_id": "macro.dbt.default__datediff",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7874908,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "unique_id": "macro.dbt.concat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.787808,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "unique_id": "macro.dbt.default__concat",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.787955,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "unique_id": "macro.dbt.intersect",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.788256,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "unique_id": "macro.dbt.default__intersect",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7883403,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "unique_id": "macro.dbt.escape_single_quotes",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7886484,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "name": "default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7887905,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "unique_id": "macro.dbt.right",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.789145,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "unique_id": "macro.dbt.default__right",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.789288,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "unique_id": "macro.dbt.dateadd",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.78966,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "unique_id": "macro.dbt.default__dateadd",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7898302,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "unique_id": "macro.dbt.any_value",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "name": "any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7901435,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "unique_id": "macro.dbt.default__any_value",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "name": "default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7902448,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "unique_id": "macro.dbt.cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7906156,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7907743,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "unique_id": "macro.dbt.split_part",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7913306,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "unique_id": "macro.dbt.default__split_part",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7914984,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "unique_id": "macro.dbt._split_part_negative",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "name": "_split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7917259,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "unique_id": "macro.dbt.listagg",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7923594,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "unique_id": "macro.dbt.default__listagg",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "name": "default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7927842,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "unique_id": "macro.dbt.generate_schema_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7933338,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "unique_id": "macro.dbt.default__generate_schema_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7936118,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "name": "generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7939281,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "unique_id": "macro.dbt.generate_alias_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "name": "generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7943487,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "unique_id": "macro.dbt.default__generate_alias_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "name": "default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7945793,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "unique_id": "macro.dbt.generate_database_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "name": "generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7950141,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "unique_id": "macro.dbt.default__generate_database_name",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "name": "default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7952845,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "unique_id": "macro.dbt.run_hooks",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7963877,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "unique_id": "macro.dbt.make_hook_config",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7965903,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "unique_id": "macro.dbt.before_begin",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.796734,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "unique_id": "macro.dbt.in_transaction",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7968874,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "unique_id": "macro.dbt.after_commit",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "name": "after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7970297,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "unique_id": "macro.dbt.set_sql_header",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7974284,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "unique_id": "macro.dbt.should_full_refresh",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7980716,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "unique_id": "macro.dbt.should_store_failures",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "name": "should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.7983818,
            "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
            "unique_id": "macro.dbt.materialization_view_default",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/view.sql",
            "original_file_path": "macros/materializations/models/view/view.sql",
            "name": "materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8008738,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_create_view_as_sql": {
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8012805,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8014479,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "unique_id": "macro.dbt.create_view_as",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8016253,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "unique_id": "macro.dbt.default__create_view_as",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_view_as.sql",
            "original_file_path": "macros/materializations/models/view/create_view_as.sql",
            "name": "default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8018968,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_view": {
            "unique_id": "macro.dbt.create_or_replace_view",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/create_or_replace_view.sql",
            "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8033888,
            "supported_languages": null
        },
        "macro.dbt.handle_existing_table": {
            "unique_id": "macro.dbt.handle_existing_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/helpers.sql",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "name": "handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8037224,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "unique_id": "macro.dbt.default__handle_existing_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/view/helpers.sql",
            "original_file_path": "macros/materializations/models/view/helpers.sql",
            "name": "default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8039594,
            "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
            "unique_id": "macro.dbt.get_quoted_csv",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8054078,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "unique_id": "macro.dbt.diff_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.805966,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "unique_id": "macro.dbt.diff_column_data_types",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8066397,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "unique_id": "macro.dbt.get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8068812,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "name": "default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8076096,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "unique_id": "macro.dbt.materialization_incremental_default",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "name": "materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8124158,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.816759,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "unique_id": "macro.dbt.check_for_schema_changes",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8180199,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "unique_id": "macro.dbt.sync_column_schemas",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8192387,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "unique_id": "macro.dbt.process_schema_changes",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "name": "process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8201056,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_append_sql": {
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8209295,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.821165,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.82135,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8216105,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8217897,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8220608,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8222456,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8225052,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.822692,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8228393,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "unique_id": "macro.dbt.get_insert_into_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "name": "get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8231232,
            "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
            "unique_id": "macro.dbt.get_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8266516,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "unique_id": "macro.dbt.default__get_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8283179,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.828557,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8293085,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.829576,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "name": "default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.830238,
            "supported_languages": null
        },
        "macro.dbt.is_incremental": {
            "unique_id": "macro.dbt.is_incremental",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/incremental/is_incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
            "name": "is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8309283,
            "supported_languages": null
        },
        "macro.dbt.materialization_table_default": {
            "unique_id": "macro.dbt.materialization_table_default",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/table.sql",
            "original_file_path": "macros/materializations/models/table/table.sql",
            "name": "materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8335972,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_create_table_as_sql": {
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8341618,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8343492,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "unique_id": "macro.dbt.create_table_as",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8348112,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "unique_id": "macro.dbt.default__create_table_as",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/models/table/create_table_as.sql",
            "original_file_path": "macros/materializations/models/table/create_table_as.sql",
            "name": "default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8352716,
            "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
            "unique_id": "macro.dbt.materialization_seed_default",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/seed.sql",
            "original_file_path": "macros/materializations/seeds/seed.sql",
            "name": "materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.83861,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_csv_table": {
            "unique_id": "macro.dbt.create_csv_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.842738,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "unique_id": "macro.dbt.default__create_csv_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8436444,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "unique_id": "macro.dbt.reset_csv_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8438833,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "unique_id": "macro.dbt.default__reset_csv_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8443635,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "unique_id": "macro.dbt.get_csv_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8445525,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "unique_id": "macro.dbt.default__get_csv_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8446817,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "unique_id": "macro.dbt.get_binding_char",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8448193,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "unique_id": "macro.dbt.default__get_binding_char",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8449419,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "unique_id": "macro.dbt.get_batch_size",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.845099,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "unique_id": "macro.dbt.default__get_batch_size",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8452144,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8456814,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "unique_id": "macro.dbt.load_csv_rows",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8458714,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "unique_id": "macro.dbt.default__load_csv_rows",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "name": "default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8471596,
            "supported_languages": null
        },
        "macro.dbt.materialization_test_default": {
            "unique_id": "macro.dbt.materialization_test_default",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/test.sql",
            "original_file_path": "macros/materializations/tests/test.sql",
            "name": "materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8492196,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_where_subquery": {
            "unique_id": "macro.dbt.get_where_subquery",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "name": "get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8496406,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "unique_id": "macro.dbt.default__get_where_subquery",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "name": "default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8500233,
            "supported_languages": null
        },
        "macro.dbt.get_test_sql": {
            "unique_id": "macro.dbt.get_test_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "name": "get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.850484,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "unique_id": "macro.dbt.default__get_test_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "name": "default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8507888,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "name": "materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8566062,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.snapshot_merge_sql": {
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "name": "snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8572283,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "name": "default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8575566,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "unique_id": "macro.dbt.strategy_dispatch",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8617892,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8620915,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8623762,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8633623,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8635883,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8637822,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8653698,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.866873,
            "supported_languages": null
        },
        "macro.dbt.create_columns": {
            "unique_id": "macro.dbt.create_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.870545,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "unique_id": "macro.dbt.default__create_columns",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8708339,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "unique_id": "macro.dbt.post_snapshot",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8710253,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "unique_id": "macro.dbt.default__post_snapshot",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8711178,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "unique_id": "macro.dbt.get_true_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8712623,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "unique_id": "macro.dbt.default__get_true_sql",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.871379,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "unique_id": "macro.dbt.snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8715875,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.872596,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "unique_id": "macro.dbt.build_snapshot_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8728058,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8731565,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.873715,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "unique_id": "macro.dbt.test_unique",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_bigquery.bigquery__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8743463,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "unique_id": "macro.dbt.test_not_null",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8745894,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "unique_id": "macro.dbt.test_accepted_values",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8748927,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "unique_id": "macro.dbt.test_relationships",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "name": "test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8751764,
            "supported_languages": null
        },
        "macro.dbt_airflow_macros.ds_nodash": {
            "unique_id": "macro.dbt_airflow_macros.ds_nodash",
            "package_name": "dbt_airflow_macros",
            "root_path": "/dbt_sipher/dbt_packages/dbt_airflow_macros",
            "path": "macros/ds_nodash.sql",
            "original_file_path": "macros/ds_nodash.sql",
            "name": "ds_nodash",
            "macro_sql": "{%- macro ds_nodash(timezone=none) -%}\n    {%- set execution_date = dbt_airflow_macros.execution_date(timezone=timezone) -%}\n    {{- execution_date.strftime(\"%Y%m%d\") -}}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_airflow_macros.execution_date"
                ]
            },
            "description": "## Overview\nIt enables us to get a date string which derives from the environment variable `EXECUTION_DATE`.\nThe output should follow `%Y%m%d`.\nIt is inspired by Apache Airflow's `{{ ds_nodash }}`.\n\n## Usage\n`{{ dbt_airflow_macros.ds_nodash() }}`}\n`{{ dbt_airflow_macros.ds_nodash(timezone=\"Asia/Tokyo\") }}`}",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_airflow_macros://macros/ds_nodash.yml",
            "arguments": [],
            "created_at": 1705293862.2034883,
            "supported_languages": null
        },
        "macro.dbt_airflow_macros.ds": {
            "unique_id": "macro.dbt_airflow_macros.ds",
            "package_name": "dbt_airflow_macros",
            "root_path": "/dbt_sipher/dbt_packages/dbt_airflow_macros",
            "path": "macros/ds.sql",
            "original_file_path": "macros/ds.sql",
            "name": "ds",
            "macro_sql": "{%- macro ds(timezone=none) -%}\n    {%- set execution_date = dbt_airflow_macros.execution_date(timezone=timezone) -%}\n    {{- execution_date.strftime(\"%Y-%m-%d\") -}}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_airflow_macros.execution_date"
                ]
            },
            "description": "## Overview\nIt enables us to get a date string which derives from the environment variable `EXECUTION_DATE`.\nThe output should follow `%Y-%m-%d`.\nIt is inspired by Apache Airflow's `{{ ds }}`.\n\n## Usage\n`{{ dbt_airflow_macros.ds() }}`}\n`{{ dbt_airflow_macros.ds(timezone=\"Asia/Tokyo\") }}`}",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_airflow_macros://macros/ds.yml",
            "arguments": [],
            "created_at": 1705293862.2037306,
            "supported_languages": null
        },
        "macro.dbt_airflow_macros.ts_nodash": {
            "unique_id": "macro.dbt_airflow_macros.ts_nodash",
            "package_name": "dbt_airflow_macros",
            "root_path": "/dbt_sipher/dbt_packages/dbt_airflow_macros",
            "path": "macros/ts_nodash.sql",
            "original_file_path": "macros/ts_nodash.sql",
            "name": "ts_nodash",
            "macro_sql": "{%- macro ts_nodash(timezone=none) -%}\n    {%- set execution_date = dbt_airflow_macros.execution_date(timezone=timezone) -%}\n    {{- execution_date.strftime(\"%Y%m%dT%H%M%S\") -}}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_airflow_macros.execution_date"
                ]
            },
            "description": "## Overview\nIt enables us to get a date and time string which derives from the environment variable `EXECUTION_DATE`.\nThe output should follow `%Y%m%dT%H%M%S`.\nIt is inspired by Apache Airflow's `{{ ts }}`.\n\n## Usage\n`{{ dbt_airflow_macros.ts() }}`}\n`{{ dbt_airflow_macros.ts(timezone=\"Asia/Tokyo\") }}`}",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_airflow_macros://macros/ts_nodash.yml",
            "arguments": [],
            "created_at": 1705293862.2029827,
            "supported_languages": null
        },
        "macro.dbt_airflow_macros.execution_date": {
            "unique_id": "macro.dbt_airflow_macros.execution_date",
            "package_name": "dbt_airflow_macros",
            "root_path": "/dbt_sipher/dbt_packages/dbt_airflow_macros",
            "path": "macros/execution_date.sql",
            "original_file_path": "macros/execution_date.sql",
            "name": "execution_date",
            "macro_sql": "{%- macro execution_date(timezone=none) -%}\n    {%- set execution_date_str = env_var('EXECUTION_DATE', \"none\") -%}\n    {%- set _execution_date = none -%}\n\n    {%- if execution_date_str == \"none\" -%}\n        {%- set _execution_date = modules.datetime.datetime.utcnow() -%}\n        {{ return(modules.datetime.datetime.utcnow()) }}\n    {%- else -%}\n        {%- set _execution_date = modules.datetime.datetime.fromisoformat(execution_date_str) -%}\n    {%- endif -%}\n\n    {%- if timezone == none -%}\n        {{ return(_execution_date) }}\n    {%- else -%}\n        {{ return(modules.pytz.timezone(timezone).localize(_execution_date)) }}\n    {%- endif -%}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "## Overview\nIt enables us to get a `datetime` object, not string.\nThe value is set by the environment variable `EXECUTION_DATE`.\nIt is inspired by Apache Airflow's `{{ execution_date }}`.\n\nThe default value is the system local time, no matter what time zone it uses.\n\n## Usage\n`{{ dbt_airflow_macros.execution_date() }}`}\n`{{ dbt_airflow_macros.execution_date(timezone=\"Asia/Tokyo\") }}`}",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_airflow_macros://macros/execution_date.yml",
            "arguments": [],
            "created_at": 1705293862.2032444,
            "supported_languages": null
        },
        "macro.dbt_airflow_macros.ts": {
            "unique_id": "macro.dbt_airflow_macros.ts",
            "package_name": "dbt_airflow_macros",
            "root_path": "/dbt_sipher/dbt_packages/dbt_airflow_macros",
            "path": "macros/ts.sql",
            "original_file_path": "macros/ts.sql",
            "name": "ts",
            "macro_sql": "{%- macro ts(timezone=none) -%}\n    {%- set execution_date = dbt_airflow_macros.execution_date(timezone=timezone) -%}\n    {{- execution_date.strftime(\"%Y-%m-%dT%H:%M:%S+00:00\") -}}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_airflow_macros.execution_date"
                ]
            },
            "description": "## Overview\nIt enables us to get a date and time string which derives from the environment variable `EXECUTION_DATE`.\nThe output should follow `%Y-%m-%dT%H:%M:%S+00:00`.\nIt is inspired by Apache Airflow's `{{ ts }}`.\n\n## Usage\n`{{ dbt_airflow_macros.ts() }}`}\n`{{ dbt_airflow_macros.ts(timezone=\"Asia/Tokyo\") }}`}",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_airflow_macros://macros/ts.yml",
            "arguments": [],
            "created_at": 1705293862.2040625,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "unique_id": "macro.dbt_utils.get_url_host",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "name": "get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.87794,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "name": "default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part",
                    "macro.dbt.replace",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.878442,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_path": {
            "unique_id": "macro.dbt_utils.get_url_path",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "name": "get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8789582,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "name": "default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.position",
                    "macro.dbt.split_part",
                    "macro.dbt.right",
                    "macro.dbt.length",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8796465,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "name": "get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8800445,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "name": "default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8803952,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "name": "test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.881433,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "name": "default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8827386,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "name": "test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8836844,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "name": "default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8848088,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "name": "test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8854864,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "name": "default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.885835,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "unique_id": "macro.dbt_utils.test_recency",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "name": "test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8866148,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "unique_id": "macro.dbt_utils.default__test_recency",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "name": "default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.current_timestamp",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8875697,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "unique_id": "macro.dbt_utils.test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "name": "test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8880708,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "name": "default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.888558,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "name": "test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8892536,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "name": "default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8897288,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "name": "test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8903089,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "name": "default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8907177,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "name": "test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8914013,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "name": "default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8923771,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "name": "test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8931258,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "name": "default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8938408,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "name": "test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8944607,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "name": "default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8948808,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8953736,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "name": "default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8957686,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "name": "test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8964722,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "name": "default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8974674,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "name": "test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8984075,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "name": "default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.8993833,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "unique_id": "macro.dbt_utils.test_equality",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "name": "test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9002616,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "unique_id": "macro.dbt_utils.default__test_equality",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "name": "default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9012582,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_empty_string": {
            "unique_id": "macro.dbt_utils.test_not_empty_string",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_empty_string.sql",
            "original_file_path": "macros/generic_tests/not_empty_string.sql",
            "name": "test_not_empty_string",
            "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_empty_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9017968,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_empty_string": {
            "unique_id": "macro.dbt_utils.default__test_not_empty_string",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/not_empty_string.sql",
            "original_file_path": "macros/generic_tests/not_empty_string.sql",
            "name": "default__test_not_empty_string",
            "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9021232,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "name": "test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.905557,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "name": "default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9075043,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "name": "pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.907942,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "name": "default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9081233,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "unique_id": "macro.dbt_utils._is_relation",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/_is_relation.sql",
            "original_file_path": "macros/jinja_helpers/_is_relation.sql",
            "name": "_is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9086986,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "unique_id": "macro.dbt_utils.pretty_time",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "name": "pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.909127,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "name": "default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9094539,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "unique_id": "macro.dbt_utils.log_info",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "name": "log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.910057,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "unique_id": "macro.dbt_utils.default__log_info",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "name": "default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9103112,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "unique_id": "macro.dbt_utils.slugify",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/slugify.sql",
            "original_file_path": "macros/jinja_helpers/slugify.sql",
            "name": "slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9113917,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/jinja_helpers/_is_ephemeral.sql",
            "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql",
            "name": "_is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9127371,
            "supported_languages": null
        },
        "macro.dbt_utils.get_intervals_between": {
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9136598,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9145858,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "unique_id": "macro.dbt_utils.date_spine",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.914909,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "unique_id": "macro.dbt_utils.default__date_spine",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "name": "default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9154215,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_subtract": {
            "unique_id": "macro.dbt_utils.safe_subtract",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_subtract.sql",
            "original_file_path": "macros/sql/safe_subtract.sql",
            "name": "safe_subtract",
            "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_subtract"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9159417,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_subtract": {
            "unique_id": "macro.dbt_utils.default__safe_subtract",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_subtract.sql",
            "original_file_path": "macros/sql/safe_subtract.sql",
            "name": "default__safe_subtract",
            "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.916579,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "name": "nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9170191,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "name": "default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9175022,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "name": "get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9184535,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "name": "default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9194522,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9205635,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9211245,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "unique_id": "macro.dbt_utils.generate_series",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9213674,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "unique_id": "macro.dbt_utils.default__generate_series",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "name": "default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9219682,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "name": "get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.92277,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "name": "default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9237149,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "name": "get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9242146,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "name": "default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.924505,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "unique_id": "macro.dbt_utils.star",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "name": "star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9257138,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "unique_id": "macro.dbt_utils.default__star",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "name": "default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9273565,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "unique_id": "macro.dbt_utils.unpivot",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "name": "unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9287133,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "unique_id": "macro.dbt_utils.default__unpivot",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "name": "default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.type_string",
                    "macro.dbt.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.930676,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_divide": {
            "unique_id": "macro.dbt_utils.safe_divide",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_divide.sql",
            "original_file_path": "macros/sql/safe_divide.sql",
            "name": "safe_divide",
            "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_divide"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9310722,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_divide": {
            "unique_id": "macro.dbt_utils.default__safe_divide",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_divide.sql",
            "original_file_path": "macros/sql/safe_divide.sql",
            "name": "default__safe_divide",
            "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9312375,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "unique_id": "macro.dbt_utils.union_relations",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "name": "union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9344125,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "unique_id": "macro.dbt_utils.default__union_relations",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "name": "default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.string_literal",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9387999,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "unique_id": "macro.dbt_utils.group_by",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "name": "group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.939345,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "unique_id": "macro.dbt_utils.default__group_by",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "name": "default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9396303,
            "supported_languages": null
        },
        "macro.dbt_utils.deduplicate": {
            "unique_id": "macro.dbt_utils.deduplicate",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "name": "deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.940411,
            "supported_languages": null
        },
        "macro.dbt_utils.default__deduplicate": {
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "name": "default__deduplicate",
            "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9406524,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "name": "redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9408786,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "name": "postgres__deduplicate",
            "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9410872,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "name": "snowflake__deduplicate",
            "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9412646,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "name": "bigquery__deduplicate",
            "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9414523,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "unique_id": "macro.dbt_utils.surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "name": "surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9419212,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "name": "default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9421864,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "unique_id": "macro.dbt_utils.safe_add",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "name": "safe_add",
            "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9426916,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "unique_id": "macro.dbt_utils.default__safe_add",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "name": "default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.94335,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "unique_id": "macro.dbt_utils.nullcheck",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "name": "nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.943773,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "name": "default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9441574,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.945731,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9461455,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9469569,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "name": "_bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9477077,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "unique_id": "macro.dbt_utils.get_column_values",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "name": "get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9489768,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "name": "default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.950646,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "unique_id": "macro.dbt_utils.pivot",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "name": "pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9517248,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "unique_id": "macro.dbt_utils.default__pivot",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "name": "default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9526885,
            "supported_languages": null
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "name": "get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.953256,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "name": "default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9540513,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "unique_id": "macro.dbt_utils.width_bucket",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "name": "width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9549065,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "name": "default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9554262,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "name": "snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9556348,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "name": "get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9562347,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "name": "default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.956903,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_surrogate_key": {
            "unique_id": "macro.dbt_utils.generate_surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_surrogate_key.sql",
            "original_file_path": "macros/sql/generate_surrogate_key.sql",
            "name": "generate_surrogate_key",
            "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9574351,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_surrogate_key": {
            "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/generate_surrogate_key.sql",
            "original_file_path": "macros/sql/generate_surrogate_key.sql",
            "name": "default__generate_surrogate_key",
            "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.hash",
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9582226,
            "supported_languages": null
        },
        "macro.dbt_utils.get_table_types_sql": {
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "name": "get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9587867,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "name": "default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9589577,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "name": "postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9591084,
            "supported_languages": null
        },
        "macro.dbt_utils.databricks__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.databricks__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "name": "databricks__get_table_types_sql",
            "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.959262,
            "supported_languages": null
        },
        "macro.dbt_utils.get_single_value": {
            "unique_id": "macro.dbt_utils.get_single_value",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_single_value.sql",
            "original_file_path": "macros/sql/get_single_value.sql",
            "name": "get_single_value",
            "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_single_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9598246,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_single_value": {
            "unique_id": "macro.dbt_utils.default__get_single_value",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/get_single_value.sql",
            "original_file_path": "macros/sql/get_single_value.sql",
            "name": "default__get_single_value",
            "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9607065,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.961774,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "unique_id": "macro.dbt_utils.haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.bigquery__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9620743,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.962678,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "/dbt_sipher/dbt_packages/dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "name": "bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9635267,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.fetch_configured_models": {
            "unique_id": "macro.dbt_meta_testing.fetch_configured_models",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/fetch_configured_models.sql",
            "original_file_path": "macros/fetch_configured_models.sql",
            "name": "fetch_configured_models",
            "macro_sql": "{% macro fetch_configured_models(meta_config, models=none, resource_type=\"model\") %}\n\t{{ return(adapter.dispatch(\"fetch_configured_models\", \"dbt_meta_testing\")(meta_config, models, resource_type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__fetch_configured_models"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9650977,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__fetch_configured_models": {
            "unique_id": "macro.dbt_meta_testing.default__fetch_configured_models",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/fetch_configured_models.sql",
            "original_file_path": "macros/fetch_configured_models.sql",
            "name": "default__fetch_configured_models",
            "macro_sql": "{% macro default__fetch_configured_models(meta_config, models, resource_type) %}\n\n    {% set configured_models = [] %}\n\n    {{ dbt_meta_testing.logger(\"var `models` is: \" ~ models) }}\n\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", resource_type) %}\n\n        {% if meta_config in node.config.keys() %}\n\n            {% do configured_models.append(node) %}\n\n        {% endif %}\n\n    {% endfor %}\n\n    /* \n    If arg `models` is provided, filter fetched models to only those\n    provided, either in space delimited string or via `dbt list -m <selection_syntax>`.\n\n    See documentation here for more details: https://github.com/tnightengale/quality-assurance-dbt.\n    */\n    {% if models is not none and resource_type == \"model\" %}\n\n        {% set filtered_models_list = [] %}\n        {% set final_models_list = [] %}\n        {% set models_list = models.split(\" \") %}\n\n        {{ dbt_meta_testing.logger(\"Building `filtered_models_list`:\") }}\n        {% for m in models_list %}\n\n            /* \n            Assumes \".\" delimited string is output from `dbt list` and the last\n            delimitee is the model name, eg. dbt_meta_testing.example.model_1\n            */\n            {% if \".\" in m %} {% set m = m.split(\".\")[-1] %} {% endif %}\n\n            {% do filtered_models_list.append(m) %}\n            {{ dbt_meta_testing.logger(\"Appended to `filtered_models_list`: \" ~ m) }}\n\n        {% endfor %}\n\n        {{ dbt_meta_testing.logger(\"`filtered_models_list` is: \" ~ filtered_models_list) }}\n        {% for m in configured_models %}\n\n\n            {{ dbt_meta_testing.logger(\"`filtered_models_loop: \" ~ loop.index ~ \" \" ~ m.name in filtered_models_list)}}\n            {% if m.name in filtered_models_list %}\n\n                {% do final_models_list.append(m) %}\n                {{ dbt_meta_testing.logger(\"m is: \" ~ m) }}\n            \n            {% endif %}\n\n        {% endfor %}\n    \n    {% else %}\n\n        {{ dbt_meta_testing.logger(\"else in fetch models triggered, configured is: \" ~ configured_models) }}\n        {% set final_models_list = configured_models %}\n\n    {% endif %}\n\n    {{ dbt_meta_testing.logger(\"`final_models_list` is: \" ~ final_models_list) }}\n    {{ return(final_models_list) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.logger"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9670317,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.required_tests": {
            "unique_id": "macro.dbt_meta_testing.required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/required_tests.sql",
            "original_file_path": "macros/required_tests.sql",
            "name": "required_tests",
            "macro_sql": "{% macro required_tests(models=none) %}\n\t{{ return(adapter.dispatch(\"required_tests\", \"dbt_meta_testing\")(models)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__required_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.967726,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__required_tests": {
            "unique_id": "macro.dbt_meta_testing.default__required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/required_tests.sql",
            "original_file_path": "macros/required_tests.sql",
            "name": "default__required_tests",
            "macro_sql": "{% macro default__required_tests(models) %}\n\n    -- Start\n    {% set start_msg = \"Checking `required_tests` config...\" %}\n    {% if not var(\"running_intergration_tests\", false) is true %}{{ log(start_msg, info=true) }}{% endif %}\n\n    -- Fetch models based on config and `models` var\n    {% set filtered_models = dbt_meta_testing.fetch_configured_models('required_tests', models) %}\n\n    -- Validate configuration\n    {% set any_error = dbt_meta_testing.validate_required_tests(filtered_models) %}\n    {% if any_error is not none %}\n    \n        {{ return(dbt_meta_testing.format_raise_error(any_error)) }}\n        \n    {% endif %}\n\n    -- Evaluate configuration\n    {% set any_error = dbt_meta_testing.evaluate_required_tests(filtered_models) %}\n    {% if any_error is not none %}\n\n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n\n    {% else %}\n\n        {% set result = \"Success. `required_tests` passed.\" %}\n        {% if not var(\"running_intergration_tests\", false) is true %}{{ log(result, info=true) }}{% endif %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.fetch_configured_models",
                    "macro.dbt_meta_testing.validate_required_tests",
                    "macro.dbt_meta_testing.format_raise_error",
                    "macro.dbt_meta_testing.evaluate_required_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9687529,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.required_docs": {
            "unique_id": "macro.dbt_meta_testing.required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/required_docs.sql",
            "original_file_path": "macros/required_docs.sql",
            "name": "required_docs",
            "macro_sql": "{% macro required_docs(models=none) %}\n\t{{ return(adapter.dispatch(\"required_docs\", \"dbt_meta_testing\")(models))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__required_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.969447,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__required_docs": {
            "unique_id": "macro.dbt_meta_testing.default__required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/required_docs.sql",
            "original_file_path": "macros/required_docs.sql",
            "name": "default__required_docs",
            "macro_sql": "{% macro default__required_docs(models) %}\n\n    -- Start\n    {% set start_msg = \"Checking `required_docs` config...\" %}\n    {% if not var(\"running_intergration_tests\", false) is true %}{{ log(start_msg, info=true) }}{% endif %}\n\n    -- Fetch models based on config and `models` var\n    {% set filtered_models = dbt_meta_testing.fetch_configured_models('required_docs', models) %}\n\n    -- Validate configuration\n    {% set any_error = dbt_meta_testing.validate_required_docs(filtered_models) %}\n    {% if any_error is not none %}\n\n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n        \n    {% endif %}\n\n    -- Evaluate configuration\n    {% set any_error = dbt_meta_testing.evaluate_required_docs(filtered_models) %}\n    {% if any_error is not none %}\n        \n        {% set result = dbt_meta_testing.format_raise_error(any_error) %}\n\n    {% else %}\n\n        {% set result = \"Success: `required_docs` passed.\" %}\n        {% if not var(\"running_intergration_tests\", false) is true %}{{ log(result, info=true) }}{% endif %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.fetch_configured_models",
                    "macro.dbt_meta_testing.validate_required_docs",
                    "macro.dbt_meta_testing.format_raise_error",
                    "macro.dbt_meta_testing.evaluate_required_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.970455,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.logger": {
            "unique_id": "macro.dbt_meta_testing.logger",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/logger.sql",
            "original_file_path": "macros/logger.sql",
            "name": "logger",
            "macro_sql": "{% macro logger(log_message, log_level=\"DEBUG\", format='%H:%M:%S') %}\n\t{{ return(adapter.dispatch(\"logger\", \"dbt_meta_testing\")(log_message, log_level=\"DEBUG\", format='%H:%M:%S')) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__logger"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.971253,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__logger": {
            "unique_id": "macro.dbt_meta_testing.default__logger",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/logger.sql",
            "original_file_path": "macros/logger.sql",
            "name": "default__logger",
            "macro_sql": "{% macro default__logger(log_message, log_level=\"DEBUG\", format='%H:%M:%S') %}\n\n    {% set log_levels = {\n        \"DEBUG\": 0,\n        \"INFO\": 1,\n        \"WARNING\": 2,\n        \"ERROR\": 3,\n        \"CRITICAL\": 4\n    } %}\n\n    {% set setting_level = var(\"logging_level\", \"INFO\") %}\n\n    {% if not log_level in log_levels.keys() %}\n        {% set formatted_keys = log_levels.keys() | list | join(',') %}\n        {{ \n            exceptions.raise_compiler_error(\n                \"Invalid logging level. Got '\" ~ level ~ \"'. Require one of: '\" \n                ~ formatted_keys ~ \"'\") \n        }}\n    {% endif %}\n    \n    {% set log_bool = log_levels[log_level] >= log_levels[setting_level] %}\n    {{ log(modules.datetime.datetime.now() ~ ' ' ~ log_level ~ ':' ~ this ~ ':' ~ log_message, info=log_bool) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9722579,
            "supported_languages": null
        },
        "macro.dbt_meta_testing._get_meta_test_namespaces": {
            "unique_id": "macro.dbt_meta_testing._get_meta_test_namespaces",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/_get_meta_tests_namespace.sql",
            "original_file_path": "macros/utils/_get_meta_tests_namespace.sql",
            "name": "_get_meta_test_namespaces",
            "macro_sql": "{% macro _get_meta_test_namespaces() %}\n  {% set override_namespaces = var('dbt_meta_test_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_meta_testing']) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9726431,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.validate_required_docs": {
            "unique_id": "macro.dbt_meta_testing.validate_required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_docs/validate_required_docs.sql",
            "original_file_path": "macros/utils/required_docs/validate_required_docs.sql",
            "name": "validate_required_docs",
            "macro_sql": "{% macro validate_required_docs(models_to_validate) %}\n\t{{ return(adapter.dispatch(\"validate_required_docs\", \"dbt_meta_testing\")(models_to_validate))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__validate_required_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9730363,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__validate_required_docs": {
            "unique_id": "macro.dbt_meta_testing.default__validate_required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_docs/validate_required_docs.sql",
            "original_file_path": "macros/utils/required_docs/validate_required_docs.sql",
            "name": "default__validate_required_docs",
            "macro_sql": "{% macro default__validate_required_docs(models_to_validate) %}\n\n    {# /*\n    Validate that all +required_docs configs are bool.\n    */ #}\n\n    {{ dbt_meta_testing.logger('models to validate are ' ~ models_to_validate) }}\n\n    {% for model in models_to_validate %}\n\n        {% if not model.config.required_docs is boolean %}\n\n            {{ return(dbt_meta_testing.error_invalid_config_docs(config, model.name)) }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.logger",
                    "macro.dbt_meta_testing.error_invalid_config_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9734993,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.evaluate_required_docs": {
            "unique_id": "macro.dbt_meta_testing.evaluate_required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_docs/evaluate_required_docs.sql",
            "original_file_path": "macros/utils/required_docs/evaluate_required_docs.sql",
            "name": "evaluate_required_docs",
            "macro_sql": "{% macro evaluate_required_docs(models_to_evaluate) %}\n\t{{ return(adapter.dispatch(\"evaluate_required_docs\", \"dbt_meta_testing\")(models_to_evaluate))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__evaluate_required_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9749148,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__evaluate_required_docs": {
            "unique_id": "macro.dbt_meta_testing.default__evaluate_required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_docs/evaluate_required_docs.sql",
            "original_file_path": "macros/utils/required_docs/evaluate_required_docs.sql",
            "name": "default__evaluate_required_docs",
            "macro_sql": "{% macro default__evaluate_required_docs(models_to_evaluate) %}\n\n    {# /*\n    Evaluate if each model meets +required_docs config.\n    */ #}\n\n    {% set missing_model_errors = [] %}\n    {% set missing_columns_errors = [] %}\n    {% set missing_description_errors = [] %}\n\n    {% for model in models_to_evaluate %}\n\n        {% if model.config.required_docs==True and model.config.get(\"materialized\", \"\") not in (\"\", \"ephemeral\")%}\n            \n            {% set model_columns = adapter.get_columns_in_relation(ref(model.package_name, model.name)) \n                | map(attribute=\"column\") | list %}\n            {{ dbt_meta_testing.logger(model_columns | map(attribute=\"column\") | list) }}\n\n            {% if model.description == \"\" %}\n\n                {% do missing_model_errors.append(model.name) %}\n\n            {% endif %}\n\n            {% for column in model_columns %}\n\n                {% if var(\"convert_column_names_to_lower_case\", true) %}\n                    {% set column = column | lower %}\n                {% endif %}\n\n                {% if column in model.columns.keys() %}\n\n                    {{ dbt_meta_testing.logger(column ~ \" is in \" ~ model.columns.keys()) }}\n                    {% if model.columns[column].description == \"\" %}\n\n                        {% do missing_description_errors.append((model.name, column)) %}\n\n                    {% endif %}\n                \n                {% else %}\n\n                    {% do missing_columns_errors.append((model.name, column)) %}\n\n                {% endif %}\n\n            {% endfor %}\n        \n        {% endif %}\n\n    {% endfor %}\n\n    {% set errors = missing_model_errors + missing_columns_errors + missing_description_errors %}\n    {% if errors | length > 0 %}\n\n        {{ dbt_meta_testing.logger(missing_model_errors) }}\n        {{ dbt_meta_testing.logger(missing_columns_errors) }}\n        {{ dbt_meta_testing.logger(missing_description_errors) }}\n\n        {% set result = dbt_meta_testing.error_required_docs(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            )\n        %}\n\n    {% else %}\n\n        {% set result = none %}\n\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.logger",
                    "macro.dbt_meta_testing.error_required_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.977399,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.format_raise_error": {
            "unique_id": "macro.dbt_meta_testing.format_raise_error",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/formatters/format_raise_error.sql",
            "original_file_path": "macros/utils/formatters/format_raise_error.sql",
            "name": "format_raise_error",
            "macro_sql": "{% macro format_raise_error(error_to_raise) %}\n\t{{ return(adapter.dispatch(\"format_raise_error\", \"dbt_meta_testing\")(error_to_raise))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__format_raise_error"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9777827,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__format_raise_error": {
            "unique_id": "macro.dbt_meta_testing.default__format_raise_error",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/formatters/format_raise_error.sql",
            "original_file_path": "macros/utils/formatters/format_raise_error.sql",
            "name": "default__format_raise_error",
            "macro_sql": "{% macro default__format_raise_error(error_to_raise) %}\n\n    {% if var(\"running_intergration_tests\", false) is true %}\n\n        {{ return(error_to_raise) }}\n\n    {% else %}\n\n        {{ exceptions.raise_compiler_error(error_to_raise) }}\n    \n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9781432,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.format_error_tests": {
            "unique_id": "macro.dbt_meta_testing.format_error_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/formatters/format_error_tests.sql",
            "original_file_path": "macros/utils/formatters/format_error_tests.sql",
            "name": "format_error_tests",
            "macro_sql": "{% macro format_error_tests(error_list) %}\n\t{{ return(adapter.dispatch(\"format_error_tests\", \"dbt_meta_testing\")(error_list))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__format_error_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.978644,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__format_error_tests": {
            "unique_id": "macro.dbt_meta_testing.default__format_error_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/formatters/format_error_tests.sql",
            "original_file_path": "macros/utils/formatters/format_error_tests.sql",
            "name": "default__format_error_tests",
            "macro_sql": "{% macro default__format_error_tests(error_list) %}\n\n{# /*\nFormats a list of tuples into a bulleted list for error output in error_required_tests.\n*/ #}\n\n    {% set output_list = [] %}\n\n    {% for obj in error_list %}\n\n        {% if obj is iterable %}\n\n            {% do output_list.append(\"- Model: '\" ~ obj[0] ~ \"' Test: '\" ~ obj[1] ~ \"' Got: \" ~ obj[2] ~ \" Expected: \"  ~ obj[3]) %}\n\n        {% else %}\n\n            {{ exceptions.raise_compiler_error(\"List elements must be ordered tuple of (model, test, required, provided).\") }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(output_list) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9793088,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.format_error_docs": {
            "unique_id": "macro.dbt_meta_testing.format_error_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/formatters/format_error_docs.sql",
            "original_file_path": "macros/utils/formatters/format_error_docs.sql",
            "name": "format_error_docs",
            "macro_sql": "{% macro format_error_docs(error_list) %}\n\t{{ return(adapter.dispatch(\"format_error_docs\", \"dbt_meta_testing\")(error_list))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__format_error_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9798276,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__format_error_docs": {
            "unique_id": "macro.dbt_meta_testing.default__format_error_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/formatters/format_error_docs.sql",
            "original_file_path": "macros/utils/formatters/format_error_docs.sql",
            "name": "default__format_error_docs",
            "macro_sql": "{% macro default__format_error_docs(error_list) %}\n\n{# /*\nFormats a list of either strings or tuples into a bulleted list for error output in error_required_docs.\n*/ #}\n\n    {% set output_list = [] %}\n\n    {% for obj in error_list %}\n\n        {% if obj is string %}\n\n            {% do output_list.append(\" - \" ~ obj) %}\n\n        {% elif obj is iterable %}\n\n            {% do output_list.append(\" - \" ~ obj[0] ~ \".\" ~ obj[1]) %}\n\n        {% else %}\n\n            {{ exceptions.raise_compiler_error(\"List elements must be string or tuple.\") }}\n\n        {% endif %}\n\n    {% endfor %}\n\n    {{ return(output_list | sort | join(\"\\n\")) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9806035,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.evaluate_required_tests": {
            "unique_id": "macro.dbt_meta_testing.evaluate_required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/evaluate_required_tests.sql",
            "original_file_path": "macros/utils/required_tests/evaluate_required_tests.sql",
            "name": "evaluate_required_tests",
            "macro_sql": "{% macro evaluate_required_tests(models_to_evaluate) %}\n\t{{ return(adapter.dispatch(\"evaluate_required_tests\", \"dbt_meta_testing\")(models_to_evaluate))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__evaluate_required_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.981568,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__evaluate_required_tests": {
            "unique_id": "macro.dbt_meta_testing.default__evaluate_required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/evaluate_required_tests.sql",
            "original_file_path": "macros/utils/required_tests/evaluate_required_tests.sql",
            "name": "default__evaluate_required_tests",
            "macro_sql": "{% macro default__evaluate_required_tests(models_to_evaluate) %}\n\n    {# /*\n    Evaluate if each model meets +required_tests minimum.\n    */ #}\n    \n    {% set tests_per_model = dbt_meta_testing.tests_per_model() %}\n    {% set test_errors = [] %}\n\n    {% for model in models_to_evaluate %}{% if model.config.required_tests is mapping %}\n        {% for test_key in model.config.required_tests.keys() %}\n\n            {% set provided_test_list = tests_per_model[model.unique_id] %}\n\n            {% set required_test_count = model.config.required_tests[test_key] %}\n            {% set matching_test_count = dbt_meta_testing.get_regex_match_count(provided_test_list, test_key) %}\n            \n            {% if matching_test_count < required_test_count %} \n                {% do test_errors.append((model.name, test_key, matching_test_count, required_test_count)) %}\n            {% endif %}\n            \n        {% endfor %}{% endif %}\n    {% endfor %}\n\n\n    {% if test_errors | length > 0 %}\n        {% set result = dbt_meta_testing.error_required_tests(test_errors) %}\n    {% else %}\n        {% set result = none %}\n    {% endif %}\n\n    {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.tests_per_model",
                    "macro.dbt_meta_testing.get_regex_match_count",
                    "macro.dbt_meta_testing.error_required_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9827535,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.validate_required_tests": {
            "unique_id": "macro.dbt_meta_testing.validate_required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/validate_required_tests.sql",
            "original_file_path": "macros/utils/required_tests/validate_required_tests.sql",
            "name": "validate_required_tests",
            "macro_sql": "{% macro validate_required_tests(models_to_validate) %}\n\t{{ return(adapter.dispatch(\"validate_required_tests\", \"dbt_meta_testing\")(models_to_validate))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__validate_required_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9836931,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__validate_required_tests": {
            "unique_id": "macro.dbt_meta_testing.default__validate_required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/validate_required_tests.sql",
            "original_file_path": "macros/utils/required_tests/validate_required_tests.sql",
            "name": "default__validate_required_tests",
            "macro_sql": "{% macro default__validate_required_tests(models_to_validate) %}\n\n    {# /*\n    Validate that all +required_tests configs are either dict or None \n    and that all keys in a dict are defined tests.\n    */ #}\n\n    {{ dbt_meta_testing.logger('models to validate are ' ~ models_to_validate) }}\n\n    -- # TO DO: break out into function that asserts against a contract\n    -- Fetch unique tests from +required_tests config\n    {% set all_required_tests = [] %}\n\n    {% for model in models_to_validate %}\n\n        {% set config = model.config.required_tests %}\n\n        {{ dbt_meta_testing.logger('config is: ' ~ config) }}\n\n        -- Validate that config is dict or none\n        {% if config is mapping %}\n\n            {% for k in config.keys() %} \n\n                {% do all_required_tests.append(k) %}\n\n            {% endfor %}\n        \n        {% elif config is none %}\n            \n            -- Pass\n            {{ dbt_meta_testing.logger(\"model '\" ~ model.name ~ \"' has required_tests=null\") }}\n        \n        {% else %}\n\n            {{ return(dbt_meta_testing.errors_invalid_config_tests(config, model.name)) }}\n        \n        {% endif %}\n\n    {% endfor %}\n\n\n    {% set unique_required_tests = all_required_tests | unique | list %}\n\n    {{ dbt_meta_testing.logger('unique_required_tests: ' ~ unique_required_tests) }}\n\n\n    -- Fetch unique defined tests from graph\n    {% set unique_defined_tests = [] %}\n\n    {% for test_name in graph.nodes.values() \n        | selectattr(\"resource_type\", \"equalto\", \"test\")\n        | selectattr(\"test_metadata\", \"defined\")\n        | map(attribute=\"test_metadata\")\n        | map(attribute=\"name\") \n        | unique %}\n\n        {{ dbt_meta_testing.logger('test name ' ~ loop.index ~ ' ' ~ test_name) }}\n\n        {% do unique_defined_tests.append(test_name) %}\n\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.logger",
                    "macro.dbt_meta_testing.errors_invalid_config_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9851274,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.get_regex_match_count": {
            "unique_id": "macro.dbt_meta_testing.get_regex_match_count",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/get_regex_match_count.sql",
            "original_file_path": "macros/utils/required_tests/get_regex_match_count.sql",
            "name": "get_regex_match_count",
            "macro_sql": "{% macro get_regex_match_count(list_of_strings, regex_to_check) %}\n\t{{ return(adapter.dispatch(\"get_regex_match_count\", \"dbt_meta_testing\")(list_of_strings, regex_to_check))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__get_regex_match_count"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9855297,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__get_regex_match_count": {
            "unique_id": "macro.dbt_meta_testing.default__get_regex_match_count",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/get_regex_match_count.sql",
            "original_file_path": "macros/utils/required_tests/get_regex_match_count.sql",
            "name": "default__get_regex_match_count",
            "macro_sql": "{% macro default__get_regex_match_count(list_of_strings, regex_to_check) %}\n\n    {# Return count of strings in list_of_strings that match regex_to_check #}\n    {% set matches = [] %}\n    {% for string in list_of_strings %}\n        {% set match = modules.re.fullmatch(regex_to_check, string) %}\n        {% if match %}{% do matches.append(match) %}{% endif %}\n    {% endfor %}\n\n    {% do return(matches | length) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9859862,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.tests_per_model": {
            "unique_id": "macro.dbt_meta_testing.tests_per_model",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/tests_per_model.sql",
            "original_file_path": "macros/utils/required_tests/tests_per_model.sql",
            "name": "tests_per_model",
            "macro_sql": "{% macro tests_per_model() %}\n\t{{ return(adapter.dispatch(\"tests_per_model\", \"dbt_meta_testing\")())}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__tests_per_model"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9865103,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__tests_per_model": {
            "unique_id": "macro.dbt_meta_testing.default__tests_per_model",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/required_tests/tests_per_model.sql",
            "original_file_path": "macros/utils/required_tests/tests_per_model.sql",
            "name": "default__tests_per_model",
            "macro_sql": "{% macro default__tests_per_model() %}\n\n    {# /*\n    Construct a dict of all models and their schema tests in the current project.\n    */ #}\n\n    {% set enabled_model_names = dbt_meta_testing.fetch_configured_models(\"enabled\", resource_type=\"model\") | map(attribute=\"unique_id\") | list %}\n    {% set enabled_test_nodes = dbt_meta_testing.fetch_configured_models(\"enabled\", resource_type=\"test\") %}\n    \n    -- Create `result` dict with all enabled models unique_id's as keys and empty lists as values\n    {% set result = {} %}\n    {% for id in enabled_model_names %}{% do result.update({id: []}) %}{% endfor %}\n    \n    {% for test_node in enabled_test_nodes %}\n        {% for dependent_node in test_node.depends_on.nodes %}\n            {% if dependent_node.startswith('model.') %}\n                -- Use common names for schema tests, (e.g. \"unique\") under the \"test_metadata\" key\n                {% set test_identifier = test_node.get(\"test_metadata\",{}).get(\"name\") or test_node[\"name\"] %}\n                {% do result[dependent_node].append(test_identifier) %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n\n    {% do return(result) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.fetch_configured_models"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9876235,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.error_required_docs": {
            "unique_id": "macro.dbt_meta_testing.error_required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_required_docs.sql",
            "original_file_path": "macros/utils/errors/error_required_docs.sql",
            "name": "error_required_docs",
            "macro_sql": "{% macro error_required_docs(missing_model_errors, missing_columns_errors, missing_description_errors) %}\n\t{{ return(\n        adapter.dispatch(\"error_required_docs\", \n        \"dbt_meta_testing\")(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            )\n        ) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__error_required_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9883542,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__error_required_docs": {
            "unique_id": "macro.dbt_meta_testing.default__error_required_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_required_docs.sql",
            "original_file_path": "macros/utils/errors/error_required_docs.sql",
            "name": "default__error_required_docs",
            "macro_sql": "{% macro default__error_required_docs(\n            missing_model_errors, \n            missing_columns_errors, \n            missing_description_errors\n            ) %}\n\n    {% set all_errors = [] %}\n    {% if missing_model_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following models are missing descriptions:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_model_errors)) %}{% endif %}\n\n    {% if missing_columns_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following columns are missing from the model yml:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_columns_errors)) %}{% endif %}\n\n    {% if missing_description_errors | length > 0 %}\n\n        {% do all_errors.append(\"The following columns are missing descriptions:\") %}\n        {% do all_errors.append(dbt_meta_testing.format_error_docs(missing_description_errors)) %}{% endif %}\n\n    {{ return(all_errors | join(\"\\n\")) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.format_error_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9892752,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.error_invalid_config_docs": {
            "unique_id": "macro.dbt_meta_testing.error_invalid_config_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_invalid_config_docs.sql",
            "original_file_path": "macros/utils/errors/error_invalid_config_docs.sql",
            "name": "error_invalid_config_docs",
            "macro_sql": "{% macro error_invalid_config_docs() %}\n\t{{ return(adapter.dispatch(\"error_invalid_config_docs\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__error_invalid_config_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.989659,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__error_invalid_config_docs": {
            "unique_id": "macro.dbt_meta_testing.default__error_invalid_config_docs",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_invalid_config_docs.sql",
            "original_file_path": "macros/utils/errors/error_invalid_config_docs.sql",
            "name": "default__error_invalid_config_docs",
            "macro_sql": "{% macro default__error_invalid_config_docs(varargs) %}\n   \n    {% set error %}\n    Invalid 'required_docs' configuration.  \n    Expected boolean. Received: '{{ varargs[0] }}'\n    on model '{{ varargs[1] }}'\n    {% endset %}\n\n    {{ return(error) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9899356,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.error_required_tests": {
            "unique_id": "macro.dbt_meta_testing.error_required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_required_tests.sql",
            "original_file_path": "macros/utils/errors/error_required_tests.sql",
            "name": "error_required_tests",
            "macro_sql": "{% macro error_required_tests() %}\n\t{{ return(adapter.dispatch(\"error_required_tests\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__error_required_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9902823,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__error_required_tests": {
            "unique_id": "macro.dbt_meta_testing.default__error_required_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_required_tests.sql",
            "original_file_path": "macros/utils/errors/error_required_tests.sql",
            "name": "default__error_required_tests",
            "macro_sql": "{% macro default__error_required_tests(varargs) %}\n\n    {% set all_errors = [\"Insufficient test coverage from the 'required_tests' config on the following models:\"]\n        + dbt_meta_testing.format_error_tests(varargs[0]) %}\n        \n    {{ return(all_errors | join('\\n')) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.format_error_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9905677,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.errors_invalid_config_tests": {
            "unique_id": "macro.dbt_meta_testing.errors_invalid_config_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_invalid_config_tests.sql",
            "original_file_path": "macros/utils/errors/error_invalid_config_tests.sql",
            "name": "errors_invalid_config_tests",
            "macro_sql": "{% macro errors_invalid_config_tests() %}\n\t{{ return(adapter.dispatch(\"errors_invalid_config_tests\", \"dbt_meta_testing\")(varargs))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_meta_testing.default__errors_invalid_config_tests"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9911575,
            "supported_languages": null
        },
        "macro.dbt_meta_testing.default__errors_invalid_config_tests": {
            "unique_id": "macro.dbt_meta_testing.default__errors_invalid_config_tests",
            "package_name": "dbt_meta_testing",
            "root_path": "/dbt_sipher/dbt_packages/dbt_meta_testing",
            "path": "macros/utils/errors/error_invalid_config_tests.sql",
            "original_file_path": "macros/utils/errors/error_invalid_config_tests.sql",
            "name": "default__errors_invalid_config_tests",
            "macro_sql": "{% macro default__errors_invalid_config_tests(varargs) %}\n\n    {% set error %}\n    Invalid 'required_tests' configuration.\n    Expected dict or None. Received: '{{ varargs[0] }}'\n    on model '{{ varargs[1] }}'\n    {% endset %}\n\n    {{ return(error) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.9914927,
            "supported_languages": null
        },
        "macro.dbt_date.get_date_dimension": {
            "unique_id": "macro.dbt_date.get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/get_date_dimension.sql",
            "original_file_path": "macros/get_date_dimension.sql",
            "name": "get_date_dimension",
            "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_date_dimension"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293860.998707,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_date_dimension": {
            "unique_id": "macro.dbt_date.default__get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/get_date_dimension.sql",
            "original_file_path": "macros/get_date_dimension.sql",
            "name": "default__get_date_dimension",
            "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt.date_trunc",
                    "macro.dbt.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0011814,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__get_date_dimension": {
            "unique_id": "macro.dbt_date.postgres__get_date_dimension",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/get_date_dimension.sql",
            "original_file_path": "macros/get_date_dimension.sql",
            "name": "postgres__get_date_dimension",
            "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.yesterday",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.day_of_week",
                    "macro.dbt_date.day_name",
                    "macro.dbt_date.day_of_month",
                    "macro.dbt_date.day_of_year",
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.week_end",
                    "macro.dbt_date.week_of_year",
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.iso_week_end",
                    "macro.dbt_date.iso_week_of_year",
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int",
                    "macro.dbt_date.month_name",
                    "macro.dbt.date_trunc",
                    "macro.dbt.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0036094,
            "supported_languages": null
        },
        "macro.dbt_date.get_base_dates": {
            "unique_id": "macro.dbt_date.get_base_dates",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/get_base_dates.sql",
            "original_file_path": "macros/get_base_dates.sql",
            "name": "get_base_dates",
            "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__get_base_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0046136,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_base_dates": {
            "unique_id": "macro.dbt_date.default__get_base_dates",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/get_base_dates.sql",
            "original_file_path": "macros/get_base_dates.sql",
            "name": "default__get_base_dates",
            "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0053916,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__get_base_dates": {
            "unique_id": "macro.dbt_date.bigquery__get_base_dates",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/get_base_dates.sql",
            "original_file_path": "macros/get_base_dates.sql",
            "name": "bigquery__get_base_dates",
            "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today",
                    "macro.dbt_date.tomorrow",
                    "macro.dbt_date.date_spine",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0060582,
            "supported_languages": null
        },
        "macro.dbt_date.get_intervals_between": {
            "unique_id": "macro.dbt_date.get_intervals_between",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/date_spine.sql",
            "original_file_path": "macros/_utils/date_spine.sql",
            "name": "get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.006741,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_intervals_between": {
            "unique_id": "macro.dbt_date.default__get_intervals_between",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/date_spine.sql",
            "original_file_path": "macros/_utils/date_spine.sql",
            "name": "default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0073442,
            "supported_languages": null
        },
        "macro.dbt_date.date_spine": {
            "unique_id": "macro.dbt_date.date_spine",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/date_spine.sql",
            "original_file_path": "macros/_utils/date_spine.sql",
            "name": "date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0075707,
            "supported_languages": null
        },
        "macro.dbt_date.default__date_spine": {
            "unique_id": "macro.dbt_date.default__date_spine",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/date_spine.sql",
            "original_file_path": "macros/_utils/date_spine.sql",
            "name": "default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.generate_series",
                    "macro.dbt_date.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.007949,
            "supported_languages": null
        },
        "macro.dbt_date.get_powers_of_two": {
            "unique_id": "macro.dbt_date.get_powers_of_two",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/generate_series.sql",
            "original_file_path": "macros/_utils/generate_series.sql",
            "name": "get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0087194,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_powers_of_two": {
            "unique_id": "macro.dbt_date.default__get_powers_of_two",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/generate_series.sql",
            "original_file_path": "macros/_utils/generate_series.sql",
            "name": "default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0091546,
            "supported_languages": null
        },
        "macro.dbt_date.generate_series": {
            "unique_id": "macro.dbt_date.generate_series",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/generate_series.sql",
            "original_file_path": "macros/_utils/generate_series.sql",
            "name": "generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0093567,
            "supported_languages": null
        },
        "macro.dbt_date.default__generate_series": {
            "unique_id": "macro.dbt_date.default__generate_series",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/_utils/generate_series.sql",
            "original_file_path": "macros/_utils/generate_series.sql",
            "name": "default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0098913,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_year_dates": {
            "unique_id": "macro.dbt_date.get_fiscal_year_dates",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "name": "get_fiscal_year_dates",
            "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__get_fiscal_year_dates"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.011179,
            "supported_languages": null
        },
        "macro.dbt_date.default__get_fiscal_year_dates": {
            "unique_id": "macro.dbt_date.default__get_fiscal_year_dates",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
            "name": "default__get_fiscal_year_dates",
            "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.011764,
            "supported_languages": null
        },
        "macro.dbt_date.get_fiscal_periods": {
            "unique_id": "macro.dbt_date.get_fiscal_periods",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/fiscal_date/get_fiscal_periods.sql",
            "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql",
            "name": "get_fiscal_periods",
            "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.get_fiscal_year_dates",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0125957,
            "supported_languages": null
        },
        "macro.dbt_date.tomorrow": {
            "unique_id": "macro.dbt_date.tomorrow",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/tomorrow.sql",
            "original_file_path": "macros/calendar_date/tomorrow.sql",
            "name": "tomorrow",
            "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.012869,
            "supported_languages": null
        },
        "macro.dbt_date.next_week": {
            "unique_id": "macro.dbt_date.next_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_week.sql",
            "original_file_path": "macros/calendar_date/next_week.sql",
            "name": "next_week",
            "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.013157,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_name": {
            "unique_id": "macro.dbt_date.next_month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_month_name.sql",
            "original_file_path": "macros/calendar_date/next_month_name.sql",
            "name": "next_month_name",
            "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0135403,
            "supported_languages": null
        },
        "macro.dbt_date.next_month": {
            "unique_id": "macro.dbt_date.next_month",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_month.sql",
            "original_file_path": "macros/calendar_date/next_month.sql",
            "name": "next_month",
            "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0137854,
            "supported_languages": null
        },
        "macro.dbt_date.day_name": {
            "unique_id": "macro.dbt_date.day_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "day_name",
            "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__day_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0145013,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_name": {
            "unique_id": "macro.dbt_date.default__day_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "default__day_name",
            "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0148246,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_name": {
            "unique_id": "macro.dbt_date.snowflake__day_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "snowflake__day_name",
            "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0150452,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_name": {
            "unique_id": "macro.dbt_date.bigquery__day_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "bigquery__day_name",
            "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0152497,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_name": {
            "unique_id": "macro.dbt_date.postgres__day_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "postgres__day_name",
            "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0154505,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__day_name": {
            "unique_id": "macro.dbt_date.duckdb__day_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_name.sql",
            "original_file_path": "macros/calendar_date/day_name.sql",
            "name": "duckdb__day_name",
            "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0156465,
            "supported_languages": null
        },
        "macro.dbt_date.to_unixtimestamp": {
            "unique_id": "macro.dbt_date.to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "to_unixtimestamp",
            "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__to_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0160053,
            "supported_languages": null
        },
        "macro.dbt_date.default__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.default__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "default__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0161455,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "snowflake__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.016294,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__to_unixtimestamp": {
            "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/to_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
            "name": "bigquery__to_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0163958,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_away": {
            "unique_id": "macro.dbt_date.n_days_away",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_days_away.sql",
            "original_file_path": "macros/calendar_date/n_days_away.sql",
            "name": "n_days_away",
            "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0167005,
            "supported_languages": null
        },
        "macro.dbt_date.week_start": {
            "unique_id": "macro.dbt_date.week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "week_start",
            "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0172377,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_start": {
            "unique_id": "macro.dbt_date.default__week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "default__week_start",
            "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.017394,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_start": {
            "unique_id": "macro.dbt_date.snowflake__week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "snowflake__week_start",
            "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.day_of_week",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0177255,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_start": {
            "unique_id": "macro.dbt_date.postgres__week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "postgres__week_start",
            "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0180025,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__week_start": {
            "unique_id": "macro.dbt_date.duckdb__week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_start.sql",
            "original_file_path": "macros/calendar_date/week_start.sql",
            "name": "duckdb__week_start",
            "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0181453,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_start": {
            "unique_id": "macro.dbt_date.iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "iso_week_start",
            "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0187025,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_start": {
            "unique_id": "macro.dbt_date._iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "_iso_week_start",
            "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0188723,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_start": {
            "unique_id": "macro.dbt_date.default__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "default__iso_week_start",
            "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0190184,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_start": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "snowflake__iso_week_start",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0191588,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_start": {
            "unique_id": "macro.dbt_date.postgres__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "postgres__iso_week_start",
            "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.019299,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__iso_week_start": {
            "unique_id": "macro.dbt_date.duckdb__iso_week_start",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_start.sql",
            "original_file_path": "macros/calendar_date/iso_week_start.sql",
            "name": "duckdb__iso_week_start",
            "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__iso_week_start"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0194442,
            "supported_languages": null
        },
        "macro.dbt_date.n_days_ago": {
            "unique_id": "macro.dbt_date.n_days_ago",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_days_ago.sql",
            "original_file_path": "macros/calendar_date/n_days_ago.sql",
            "name": "n_days_ago",
            "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.019978,
            "supported_languages": null
        },
        "macro.dbt_date.last_week": {
            "unique_id": "macro.dbt_date.last_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_week.sql",
            "original_file_path": "macros/calendar_date/last_week.sql",
            "name": "last_week",
            "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_weeks_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0202084,
            "supported_languages": null
        },
        "macro.dbt_date.now": {
            "unique_id": "macro.dbt_date.now",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/now.sql",
            "original_file_path": "macros/calendar_date/now.sql",
            "name": "now",
            "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.convert_timezone",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0204525,
            "supported_languages": null
        },
        "macro.dbt_date.periods_since": {
            "unique_id": "macro.dbt_date.periods_since",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/periods_since.sql",
            "original_file_path": "macros/calendar_date/periods_since.sql",
            "name": "periods_since",
            "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.datediff",
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0207515,
            "supported_languages": null
        },
        "macro.dbt_date.today": {
            "unique_id": "macro.dbt_date.today",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/today.sql",
            "original_file_path": "macros/calendar_date/today.sql",
            "name": "today",
            "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.now"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0209796,
            "supported_languages": null
        },
        "macro.dbt_date.last_month": {
            "unique_id": "macro.dbt_date.last_month",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_month.sql",
            "original_file_path": "macros/calendar_date/last_month.sql",
            "name": "last_month",
            "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_months_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.021205,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_year": {
            "unique_id": "macro.dbt_date.day_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "day_of_year",
            "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__day_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0215483,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_year": {
            "unique_id": "macro.dbt_date.default__day_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "default__day_of_year",
            "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0216804,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_year": {
            "unique_id": "macro.dbt_date.postgres__day_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "postgres__day_of_year",
            "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0218174,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_year": {
            "unique_id": "macro.dbt_date.redshift__day_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_year.sql",
            "original_file_path": "macros/calendar_date/day_of_year.sql",
            "name": "redshift__day_of_year",
            "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0220056,
            "supported_languages": null
        },
        "macro.dbt_date.round_timestamp": {
            "unique_id": "macro.dbt_date.round_timestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/round_timestamp.sql",
            "original_file_path": "macros/calendar_date/round_timestamp.sql",
            "name": "round_timestamp",
            "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0222912,
            "supported_languages": null
        },
        "macro.dbt_date.from_unixtimestamp": {
            "unique_id": "macro.dbt_date.from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "from_unixtimestamp",
            "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__from_unixtimestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0233915,
            "supported_languages": null
        },
        "macro.dbt_date.default__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.default__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "default__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0236626,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.postgres__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "postgres__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0239317,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "snowflake__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0244057,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__from_unixtimestamp": {
            "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/from_unixtimestamp.sql",
            "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
            "name": "bigquery__from_unixtimestamp",
            "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0248094,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_ago": {
            "unique_id": "macro.dbt_date.n_months_ago",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_months_ago.sql",
            "original_file_path": "macros/calendar_date/n_months_ago.sql",
            "name": "n_months_ago",
            "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0252316,
            "supported_languages": null
        },
        "macro.dbt_date.date_part": {
            "unique_id": "macro.dbt_date.date_part",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/date_part.sql",
            "original_file_path": "macros/calendar_date/date_part.sql",
            "name": "date_part",
            "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0255632,
            "supported_languages": null
        },
        "macro.dbt_date.default__date_part": {
            "unique_id": "macro.dbt_date.default__date_part",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/date_part.sql",
            "original_file_path": "macros/calendar_date/date_part.sql",
            "name": "default__date_part",
            "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0256927,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__date_part": {
            "unique_id": "macro.dbt_date.bigquery__date_part",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/date_part.sql",
            "original_file_path": "macros/calendar_date/date_part.sql",
            "name": "bigquery__date_part",
            "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0258203,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_away": {
            "unique_id": "macro.dbt_date.n_weeks_away",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_weeks_away.sql",
            "original_file_path": "macros/calendar_date/n_weeks_away.sql",
            "name": "n_weeks_away",
            "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.02628,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_month": {
            "unique_id": "macro.dbt_date.day_of_month",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_month.sql",
            "original_file_path": "macros/calendar_date/day_of_month.sql",
            "name": "day_of_month",
            "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0265317,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_month": {
            "unique_id": "macro.dbt_date.redshift__day_of_month",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_month.sql",
            "original_file_path": "macros/calendar_date/day_of_month.sql",
            "name": "redshift__day_of_month",
            "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0267074,
            "supported_languages": null
        },
        "macro.dbt_date.yesterday": {
            "unique_id": "macro.dbt_date.yesterday",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/yesterday.sql",
            "original_file_path": "macros/calendar_date/yesterday.sql",
            "name": "yesterday",
            "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.n_days_ago"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0269709,
            "supported_languages": null
        },
        "macro.dbt_date.day_of_week": {
            "unique_id": "macro.dbt_date.day_of_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "day_of_week",
            "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__day_of_week"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0285928,
            "supported_languages": null
        },
        "macro.dbt_date.default__day_of_week": {
            "unique_id": "macro.dbt_date.default__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "default__day_of_week",
            "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0288844,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__day_of_week": {
            "unique_id": "macro.dbt_date.snowflake__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "snowflake__day_of_week",
            "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0292804,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__day_of_week": {
            "unique_id": "macro.dbt_date.bigquery__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "bigquery__day_of_week",
            "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0295599,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__day_of_week": {
            "unique_id": "macro.dbt_date.postgres__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "postgres__day_of_week",
            "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0299819,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__day_of_week": {
            "unique_id": "macro.dbt_date.redshift__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "redshift__day_of_week",
            "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0303528,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__day_of_week": {
            "unique_id": "macro.dbt_date.duckdb__day_of_week",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/day_of_week.sql",
            "original_file_path": "macros/calendar_date/day_of_week.sql",
            "name": "duckdb__day_of_week",
            "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__day_of_week"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0305204,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_end": {
            "unique_id": "macro.dbt_date.iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "iso_week_end",
            "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0310092,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_end": {
            "unique_id": "macro.dbt_date._iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "_iso_week_end",
            "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.iso_week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0312114,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_end": {
            "unique_id": "macro.dbt_date.default__iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "default__iso_week_end",
            "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.031348,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_end": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_end.sql",
            "original_file_path": "macros/calendar_date/iso_week_end.sql",
            "name": "snowflake__iso_week_end",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0314791,
            "supported_languages": null
        },
        "macro.dbt_date.n_weeks_ago": {
            "unique_id": "macro.dbt_date.n_weeks_ago",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_weeks_ago.sql",
            "original_file_path": "macros/calendar_date/n_weeks_ago.sql",
            "name": "n_weeks_ago",
            "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0318937,
            "supported_languages": null
        },
        "macro.dbt_date.month_name": {
            "unique_id": "macro.dbt_date.month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "month_name",
            "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__month_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0324352,
            "supported_languages": null
        },
        "macro.dbt_date.default__month_name": {
            "unique_id": "macro.dbt_date.default__month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "default__month_name",
            "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.03264,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__month_name": {
            "unique_id": "macro.dbt_date.bigquery__month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "bigquery__month_name",
            "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0328307,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__month_name": {
            "unique_id": "macro.dbt_date.snowflake__month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "snowflake__month_name",
            "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0331023,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__month_name": {
            "unique_id": "macro.dbt_date.postgres__month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "postgres__month_name",
            "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.033299,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__month_name": {
            "unique_id": "macro.dbt_date.duckdb__month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/month_name.sql",
            "original_file_path": "macros/calendar_date/month_name.sql",
            "name": "duckdb__month_name",
            "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0334837,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_name": {
            "unique_id": "macro.dbt_date.last_month_name",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_month_name.sql",
            "original_file_path": "macros/calendar_date/last_month_name.sql",
            "name": "last_month_name",
            "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.month_name",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0337672,
            "supported_languages": null
        },
        "macro.dbt_date.week_of_year": {
            "unique_id": "macro.dbt_date.week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_of_year.sql",
            "original_file_path": "macros/calendar_date/week_of_year.sql",
            "name": "week_of_year",
            "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0342388,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_of_year": {
            "unique_id": "macro.dbt_date.default__week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_of_year.sql",
            "original_file_path": "macros/calendar_date/week_of_year.sql",
            "name": "default__week_of_year",
            "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.034422,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_of_year": {
            "unique_id": "macro.dbt_date.postgres__week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_of_year.sql",
            "original_file_path": "macros/calendar_date/week_of_year.sql",
            "name": "postgres__week_of_year",
            "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0345728,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__week_of_year": {
            "unique_id": "macro.dbt_date.duckdb__week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_of_year.sql",
            "original_file_path": "macros/calendar_date/week_of_year.sql",
            "name": "duckdb__week_of_year",
            "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.034671,
            "supported_languages": null
        },
        "macro.dbt_date.convert_timezone": {
            "unique_id": "macro.dbt_date.convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "convert_timezone",
            "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.bigquery__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.035662,
            "supported_languages": null
        },
        "macro.dbt_date.default__convert_timezone": {
            "unique_id": "macro.dbt_date.default__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "default__convert_timezone",
            "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.035872,
            "supported_languages": null
        },
        "macro.dbt_date.bigquery__convert_timezone": {
            "unique_id": "macro.dbt_date.bigquery__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "bigquery__convert_timezone",
            "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.036042,
            "supported_languages": null
        },
        "macro.dbt_date.spark__convert_timezone": {
            "unique_id": "macro.dbt_date.spark__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "spark__convert_timezone",
            "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.036233,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__convert_timezone": {
            "unique_id": "macro.dbt_date.postgres__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "postgres__convert_timezone",
            "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0364723,
            "supported_languages": null
        },
        "macro.dbt_date.redshift__convert_timezone": {
            "unique_id": "macro.dbt_date.redshift__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "redshift__convert_timezone",
            "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.default__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0366762,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__convert_timezone": {
            "unique_id": "macro.dbt_date.duckdb__convert_timezone",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/convert_timezone.sql",
            "original_file_path": "macros/calendar_date/convert_timezone.sql",
            "name": "duckdb__convert_timezone",
            "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__convert_timezone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0368786,
            "supported_languages": null
        },
        "macro.dbt_date.n_months_away": {
            "unique_id": "macro.dbt_date.n_months_away",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/n_months_away.sql",
            "original_file_path": "macros/calendar_date/n_months_away.sql",
            "name": "n_months_away",
            "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.today"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0372965,
            "supported_languages": null
        },
        "macro.dbt_date.iso_week_of_year": {
            "unique_id": "macro.dbt_date.iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "iso_week_of_year",
            "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.037913,
            "supported_languages": null
        },
        "macro.dbt_date._iso_week_of_year": {
            "unique_id": "macro.dbt_date._iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "_iso_week_of_year",
            "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt.type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0381014,
            "supported_languages": null
        },
        "macro.dbt_date.default__iso_week_of_year": {
            "unique_id": "macro.dbt_date.default__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "default__iso_week_of_year",
            "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0382364,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__iso_week_of_year": {
            "unique_id": "macro.dbt_date.snowflake__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "snowflake__iso_week_of_year",
            "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0383694,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__iso_week_of_year": {
            "unique_id": "macro.dbt_date.postgres__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "postgres__iso_week_of_year",
            "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date._iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0385156,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__iso_week_of_year": {
            "unique_id": "macro.dbt_date.duckdb__iso_week_of_year",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/iso_week_of_year.sql",
            "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
            "name": "duckdb__iso_week_of_year",
            "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__iso_week_of_year"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.03873,
            "supported_languages": null
        },
        "macro.dbt_date.week_end": {
            "unique_id": "macro.dbt_date.week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "week_end",
            "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.today",
                    "macro.dbt_date.default__week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.039262,
            "supported_languages": null
        },
        "macro.dbt_date.default__week_end": {
            "unique_id": "macro.dbt_date.default__week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "default__week_end",
            "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0393949,
            "supported_languages": null
        },
        "macro.dbt_date.snowflake__week_end": {
            "unique_id": "macro.dbt_date.snowflake__week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "snowflake__week_end",
            "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0395975,
            "supported_languages": null
        },
        "macro.dbt_date.postgres__week_end": {
            "unique_id": "macro.dbt_date.postgres__week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "postgres__week_end",
            "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.week_start",
                    "macro.dbt_date.n_days_away"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0397897,
            "supported_languages": null
        },
        "macro.dbt_date.duckdb__week_end": {
            "unique_id": "macro.dbt_date.duckdb__week_end",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/week_end.sql",
            "original_file_path": "macros/calendar_date/week_end.sql",
            "name": "duckdb__week_end",
            "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.postgres__week_end"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0399404,
            "supported_languages": null
        },
        "macro.dbt_date.next_month_number": {
            "unique_id": "macro.dbt_date.next_month_number",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/next_month_number.sql",
            "original_file_path": "macros/calendar_date/next_month_number.sql",
            "name": "next_month_number",
            "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.next_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0401974,
            "supported_languages": null
        },
        "macro.dbt_date.last_month_number": {
            "unique_id": "macro.dbt_date.last_month_number",
            "package_name": "dbt_date",
            "root_path": "/dbt_sipher/dbt_packages/dbt_date",
            "path": "macros/calendar_date/last_month_number.sql",
            "original_file_path": "macros/calendar_date/last_month_number.sql",
            "name": "last_month_number",
            "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_date.date_part",
                    "macro.dbt_date.last_month"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0404506,
            "supported_languages": null
        },
        "macro.dbt_expectations.type_timestamp": {
            "unique_id": "macro.dbt_expectations.type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "type_timestamp",
            "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0408797,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__type_timestamp": {
            "unique_id": "macro.dbt_expectations.default__type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0409534,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__type_timestamp": {
            "unique_id": "macro.dbt_expectations.snowflake__type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "snowflake__type_timestamp",
            "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0410247,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__type_timestamp": {
            "unique_id": "macro.dbt_expectations.postgres__type_timestamp",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "postgres__type_timestamp",
            "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.041093,
            "supported_languages": null
        },
        "macro.dbt_expectations.type_datetime": {
            "unique_id": "macro.dbt_expectations.type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "type_datetime",
            "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__type_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.041245,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__type_datetime": {
            "unique_id": "macro.dbt_expectations.default__type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "default__type_datetime",
            "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0413206,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__type_datetime": {
            "unique_id": "macro.dbt_expectations.snowflake__type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "snowflake__type_datetime",
            "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.041387,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__type_datetime": {
            "unique_id": "macro.dbt_expectations.postgres__type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "postgres__type_datetime",
            "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0414536,
            "supported_languages": null
        },
        "macro.dbt_expectations.duckdb__type_datetime": {
            "unique_id": "macro.dbt_expectations.duckdb__type_datetime",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/datatypes.sql",
            "original_file_path": "macros/utils/datatypes.sql",
            "name": "duckdb__type_datetime",
            "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0415225,
            "supported_languages": null
        },
        "macro.dbt_expectations.group_by": {
            "unique_id": "macro.dbt_expectations.group_by",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/groupby.sql",
            "original_file_path": "macros/utils/groupby.sql",
            "name": "group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0418422,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__group_by": {
            "unique_id": "macro.dbt_expectations.default__group_by",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/utils/groupby.sql",
            "original_file_path": "macros/utils/groupby.sql",
            "name": "default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0421207,
            "supported_languages": null
        },
        "macro.dbt_expectations.regexp_instr": {
            "unique_id": "macro.dbt_expectations.regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "regexp_instr",
            "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.bigquery__regexp_instr"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.043565,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__regexp_instr": {
            "unique_id": "macro.dbt_expectations.default__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "default__regexp_instr",
            "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0439327,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__regexp_instr": {
            "unique_id": "macro.dbt_expectations.snowflake__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "snowflake__regexp_instr",
            "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._validate_flags"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0444028,
            "supported_languages": null
        },
        "macro.dbt_expectations.bigquery__regexp_instr": {
            "unique_id": "macro.dbt_expectations.bigquery__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "bigquery__regexp_instr",
            "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._validate_re2_flags"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0449069,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__regexp_instr": {
            "unique_id": "macro.dbt_expectations.postgres__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "postgres__regexp_instr",
            "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._validate_flags"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.045204,
            "supported_languages": null
        },
        "macro.dbt_expectations.redshift__regexp_instr": {
            "unique_id": "macro.dbt_expectations.redshift__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "redshift__regexp_instr",
            "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._validate_flags"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.045526,
            "supported_languages": null
        },
        "macro.dbt_expectations.duckdb__regexp_instr": {
            "unique_id": "macro.dbt_expectations.duckdb__regexp_instr",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "duckdb__regexp_instr",
            "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._validate_flags"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0458353,
            "supported_languages": null
        },
        "macro.dbt_expectations._validate_flags": {
            "unique_id": "macro.dbt_expectations._validate_flags",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "_validate_flags",
            "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0462158,
            "supported_languages": null
        },
        "macro.dbt_expectations._validate_re2_flags": {
            "unique_id": "macro.dbt_expectations._validate_re2_flags",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/regex/regexp_instr.sql",
            "original_file_path": "macros/regex/regexp_instr.sql",
            "name": "_validate_re2_flags",
            "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0466852,
            "supported_languages": null
        },
        "macro.dbt_expectations.log_natural": {
            "unique_id": "macro.dbt_expectations.log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "log_natural",
            "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.bigquery__log_natural"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0470676,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__log_natural": {
            "unique_id": "macro.dbt_expectations.default__log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "default__log_natural",
            "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0471683,
            "supported_languages": null
        },
        "macro.dbt_expectations.bigquery__log_natural": {
            "unique_id": "macro.dbt_expectations.bigquery__log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "bigquery__log_natural",
            "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0472646,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__log_natural": {
            "unique_id": "macro.dbt_expectations.snowflake__log_natural",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/log_natural.sql",
            "original_file_path": "macros/math/log_natural.sql",
            "name": "snowflake__log_natural",
            "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0473633,
            "supported_languages": null
        },
        "macro.dbt_expectations.rand": {
            "unique_id": "macro.dbt_expectations.rand",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "rand",
            "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.bigquery__rand"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0477202,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__rand": {
            "unique_id": "macro.dbt_expectations.default__rand",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "default__rand",
            "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0477977,
            "supported_languages": null
        },
        "macro.dbt_expectations.bigquery__rand": {
            "unique_id": "macro.dbt_expectations.bigquery__rand",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "bigquery__rand",
            "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0478866,
            "supported_languages": null
        },
        "macro.dbt_expectations.snowflake__rand": {
            "unique_id": "macro.dbt_expectations.snowflake__rand",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "snowflake__rand",
            "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0479698,
            "supported_languages": null
        },
        "macro.dbt_expectations.postgres__rand": {
            "unique_id": "macro.dbt_expectations.postgres__rand",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "postgres__rand",
            "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0481067,
            "supported_languages": null
        },
        "macro.dbt_expectations.redshift__rand": {
            "unique_id": "macro.dbt_expectations.redshift__rand",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "redshift__rand",
            "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0482025,
            "supported_languages": null
        },
        "macro.dbt_expectations.duckdb__rand": {
            "unique_id": "macro.dbt_expectations.duckdb__rand",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/rand.sql",
            "original_file_path": "macros/math/rand.sql",
            "name": "duckdb__rand",
            "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0482798,
            "supported_languages": null
        },
        "macro.dbt_expectations.median": {
            "unique_id": "macro.dbt_expectations.median",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/median.sql",
            "original_file_path": "macros/math/median.sql",
            "name": "median",
            "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.percentile_cont"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0485666,
            "supported_languages": null
        },
        "macro.dbt_expectations.percentile_cont": {
            "unique_id": "macro.dbt_expectations.percentile_cont",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/percentile_cont.sql",
            "original_file_path": "macros/math/percentile_cont.sql",
            "name": "percentile_cont",
            "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.bigquery__quantile"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0490625,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__quantile": {
            "unique_id": "macro.dbt_expectations.default__quantile",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/percentile_cont.sql",
            "original_file_path": "macros/math/percentile_cont.sql",
            "name": "default__quantile",
            "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0493612,
            "supported_languages": null
        },
        "macro.dbt_expectations.bigquery__quantile": {
            "unique_id": "macro.dbt_expectations.bigquery__quantile",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/math/percentile_cont.sql",
            "original_file_path": "macros/math/percentile_cont.sql",
            "name": "bigquery__quantile",
            "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0495694,
            "supported_languages": null
        },
        "macro.dbt_expectations.ignore_row_if_expression": {
            "unique_id": "macro.dbt_expectations.ignore_row_if_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
            "name": "ignore_row_if_expression",
            "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__ignore_row_if_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0501132,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__ignore_row_if_expression": {
            "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
            "name": "default__ignore_row_if_expression",
            "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0507233,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expression_between": {
            "unique_id": "macro.dbt_expectations.test_expression_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_between.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
            "name": "test_expression_between",
            "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.051729,
            "supported_languages": null
        },
        "macro.dbt_expectations.expression_between": {
            "unique_id": "macro.dbt_expectations.expression_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_between.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
            "name": "expression_between",
            "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.052476,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expression_is_true": {
            "unique_id": "macro.dbt_expectations.test_expression_is_true",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0533407,
            "supported_languages": null
        },
        "macro.dbt_expectations.expression_is_true": {
            "unique_id": "macro.dbt_expectations.expression_is_true",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "name": "expression_is_true",
            "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0536253,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__expression_is_true": {
            "unique_id": "macro.dbt_expectations.default__expression_is_true",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
            "name": "default__expression_is_true",
            "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.truth_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.05424,
            "supported_languages": null
        },
        "macro.dbt_expectations.get_select": {
            "unique_id": "macro.dbt_expectations.get_select",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "get_select",
            "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__get_select"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0581155,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__get_select": {
            "unique_id": "macro.dbt_expectations.default__get_select",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "default__get_select",
            "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0586615,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_equal_expression": {
            "unique_id": "macro.dbt_expectations.test_equal_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "test_equal_expression",
            "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_equal_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0591419,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_equal_expression": {
            "unique_id": "macro.dbt_expectations.default__test_equal_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/equal_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
            "name": "default__test_equal_expression",
            "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.get_select"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0605063,
            "supported_languages": null
        },
        "macro.dbt_expectations.truth_expression": {
            "unique_id": "macro.dbt_expectations.truth_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "name": "truth_expression",
            "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__truth_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0608048,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__truth_expression": {
            "unique_id": "macro.dbt_expectations.default__truth_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
            "name": "default__truth_expression",
            "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0609136,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
            "name": "test_expect_column_values_to_match_like_pattern",
            "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.061462,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
            "name": "test_expect_column_values_to_match_like_pattern_list",
            "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0624983,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_regex": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
            "name": "test_expect_column_values_to_match_regex",
            "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.063241,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
            "name": "test_expect_column_value_lengths_to_equal",
            "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.length",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0637722,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
            "name": "test_expect_column_value_lengths_to_be_between",
            "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.length",
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0645123,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
            "name": "test_expect_column_values_to_not_match_regex",
            "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0651898,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
            "name": "test_expect_column_values_to_not_match_regex_list",
            "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0662067,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
            "name": "test_expect_column_values_to_match_regex_list",
            "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.regexp_instr",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.067255,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
            "name": "test_expect_column_values_to_not_match_like_pattern_list",
            "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0682256,
            "supported_languages": null
        },
        "macro.dbt_expectations._get_like_pattern_expression": {
            "unique_id": "macro.dbt_expectations._get_like_pattern_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
            "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
            "name": "_get_like_pattern_expression",
            "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0685287,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
            "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
            "name": "test_expect_column_values_to_not_match_like_pattern",
            "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_like_pattern_expression",
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0690522,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "name": "test_expect_row_values_to_have_recent_data",
            "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0700274,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
            "name": "default__test_expect_row_values_to_have_recent_data",
            "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.type_timestamp",
                    "macro.dbt_date.now",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0706532,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
            "name": "test_expect_table_columns_to_contain_set",
            "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0718968,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
            "name": "test_expect_table_row_count_to_equal_other_table",
            "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.072756,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
            "name": "default__test_expect_table_row_count_to_equal_other_table",
            "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_equal_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0731118,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
            "name": "test_expect_table_columns_to_not_contain_set",
            "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.074254,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "name": "test_expect_grouped_row_values_to_have_recent_data",
            "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0761156,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {
            "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
            "name": "default__test_expect_grouped_row_values_to_have_recent_data",
            "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.type_timestamp",
                    "macro.dbt_date.now",
                    "macro.dbt_expectations.group_by",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0771616,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_to_exist": {
            "unique_id": "macro.dbt_expectations.test_expect_column_to_exist",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
            "name": "test_expect_column_to_exist",
            "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0783372,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "name": "test_expect_table_row_count_to_equal",
            "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0789456,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {
            "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
            "name": "default__test_expect_table_row_count_to_equal",
            "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0792272,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
            "name": "test_expect_table_row_count_to_be_between",
            "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0800035,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {
            "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
            "name": "default__test_expect_table_row_count_to_be_between",
            "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0803416,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {
            "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
            "name": "test_expect_table_row_count_to_equal_other_table_times_factor",
            "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0812688,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {
            "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
            "name": "default__test_expect_table_row_count_to_equal_other_table_times_factor",
            "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.08157,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_match_set": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
            "name": "test_expect_table_columns_to_match_set",
            "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0827794,
            "supported_languages": null
        },
        "macro.dbt_expectations._get_column_list": {
            "unique_id": "macro.dbt_expectations._get_column_list",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/_get_column_list.sql",
            "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql",
            "name": "_get_column_list",
            "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0832894,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {
            "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
            "name": "test_expect_table_columns_to_match_ordered_list",
            "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations._get_column_list",
                    "macro.dbt_expectations._list_intersect",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0848017,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql",
            "name": "test_expect_table_aggregation_to_equal_other_table",
            "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_equal_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0855296,
            "supported_languages": null
        },
        "macro.dbt_expectations._list_intersect": {
            "unique_id": "macro.dbt_expectations._list_intersect",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/_list_intersect.sql",
            "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql",
            "name": "_list_intersect",
            "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.086139,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
            "name": "test_expect_table_column_count_to_equal_other_table",
            "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0866826,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_column_count_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
            "name": "test_expect_table_column_count_to_equal",
            "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.087194,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
            "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
            "name": "test_expect_table_column_count_to_be_between",
            "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0882173,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
            "name": "test_expect_column_values_to_not_be_in_set",
            "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.089139,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
            "name": "test_expect_column_values_to_be_in_set",
            "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0900767,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
            "name": "test_expect_column_values_to_be_increasing",
            "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0914073,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_null": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
            "name": "test_expect_column_values_to_be_null",
            "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.091871,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_unique": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
            "name": "test_expect_column_values_to_be_unique",
            "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0921655,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
            "name": "test_expect_column_values_to_be_between",
            "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.092866,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
            "name": "test_expect_column_values_to_be_decreasing",
            "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.094056,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
            "name": "test_expect_column_values_to_be_in_type_list",
            "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.095115,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
            "name": "test_expect_column_values_to_be_of_type",
            "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0953827,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
            "name": "test_expect_column_values_to_have_consistent_casing",
            "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.095815,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
            "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
            "name": "test_expect_column_values_to_not_be_null",
            "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0962627,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_min_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
            "name": "test_expect_column_min_to_be_between",
            "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0969932,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
            "name": "test_expect_column_unique_value_count_to_be_between",
            "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0977118,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
            "name": "test_expect_column_quantile_values_to_be_between",
            "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.percentile_cont",
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0984876,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_median_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
            "name": "test_expect_column_median_to_be_between",
            "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.median",
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.0992339,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
            "name": "test_expect_column_proportion_of_unique_values_to_be_between",
            "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1000051,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
            "name": "test_expect_column_distinct_values_to_equal_set",
            "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1009357,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "name": "test_expect_column_most_common_value_to_be_in_set",
            "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1024318,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
            "name": "default__test_expect_column_most_common_value_to_be_in_set",
            "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1032145,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
            "name": "test_expect_column_distinct_values_to_contain_set",
            "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1041012,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
            "name": "test_expect_column_distinct_count_to_equal",
            "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.104667,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql",
            "name": "test_expect_column_distinct_count_to_be_less_than",
            "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1052487,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_sum_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
            "name": "test_expect_column_sum_to_be_between",
            "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1059892,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "name": "test_expect_column_stdev_to_be_between",
            "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1070435,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
            "name": "default__test_expect_column_stdev_to_be_between",
            "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1074202,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_mean_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
            "name": "test_expect_column_mean_to_be_between",
            "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1081364,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_max_to_be_between": {
            "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
            "name": "test_expect_column_max_to_be_between",
            "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1088536,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
            "name": "test_expect_column_distinct_count_to_be_greater_than",
            "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1094313,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
            "name": "test_expect_column_distinct_values_to_be_in_set",
            "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1103053,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {
            "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
            "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
            "name": "test_expect_column_distinct_count_to_equal_other_table",
            "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.test_equal_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1110544,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {
            "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
            "name": "test_expect_row_values_to_have_data_for_every_n_datepart",
            "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt_date.get_base_dates",
                    "macro.dbt.datediff",
                    "macro.dbt.type_int",
                    "macro.dbt.date_trunc",
                    "macro.dbt_expectations.type_datetime",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1148741,
            "supported_languages": null
        },
        "macro.dbt_expectations._get_metric_expression": {
            "unique_id": "macro.dbt_expectations._get_metric_expression",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "name": "_get_metric_expression",
            "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.log_natural"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1181552,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "name": "test_expect_column_values_to_be_within_n_moving_stdevs",
            "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.118697,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
            "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs",
            "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.date_trunc",
                    "macro.dbt_expectations.group_by",
                    "macro.dbt_expectations._get_metric_expression",
                    "macro.dbt.dateadd",
                    "macro.dbt_date.now",
                    "macro.dbt_expectations.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1202037,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {
            "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "name": "test_expect_column_values_to_be_within_n_stdevs",
            "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1210203,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {
            "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
            "name": "default__test_expect_column_values_to_be_within_n_stdevs",
            "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1215894,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {
            "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "name": "test_expect_select_column_values_to_be_unique_within_record",
            "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1228848,
            "supported_languages": null
        },
        "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {
            "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
            "name": "default__test_expect_select_column_values_to_be_unique_within_record",
            "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.ignore_row_if_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1240067,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {
            "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
            "name": "test_expect_compound_columns_to_be_unique",
            "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.ignore_row_if_expression"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.126019,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
            "name": "test_expect_multicolumn_sum_to_equal",
            "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1268861,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {
            "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
            "name": "test_expect_column_pair_values_to_be_equal",
            "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1274805,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {
            "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
            "name": "test_expect_column_pair_values_A_to_be_greater_than_B",
            "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1281536,
            "supported_languages": null
        },
        "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {
            "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set",
            "package_name": "dbt_expectations",
            "root_path": "/dbt_sipher/dbt_packages/dbt_expectations",
            "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
            "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
            "name": "test_expect_column_pair_values_to_be_in_set",
            "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_expectations.expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1705293861.1293921,
            "supported_languages": null
        }
    },
    "docs": {
        "dbt.__overview__": {
            "unique_id": "dbt.__overview__",
            "package_name": "dbt",
            "root_path": "/home/airflow/.local/lib/python3.9/site-packages/dbt/include/global_project",
            "path": "overview.md",
            "original_file_path": "docs/overview.md",
            "name": "__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.dbt_sipher.rpt_social_profile_stats": [
            "model.dbt_sipher.dim_discord_profile",
            "model.dbt_sipher.dim_twitter_profile",
            "model.dbt_sipher.fct_discord_profile_stats_snapshot_daily",
            "model.dbt_sipher.fct_tiktok_profile_stats_snapshot_daily",
            "model.dbt_sipher.fct_twitter_profile_stats_snapshot_daily"
        ],
        "model.dbt_sipher.rpt_twitter_post_stats": [
            "model.dbt_sipher.dim_twitter_profile",
            "model.dbt_sipher.stg_twitter_timeline"
        ],
        "model.dbt_sipher.rpt_finance_wallet_account_balance": [
            "model.dbt_sipher.stg_coinmarketcap__main_token_quotes",
            "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday",
            "model.dbt_sipher.stg_etherscan_polygon__important_wallet_accounts_balance"
        ],
        "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d": [
            "source.dbt_sipher.crypto_ethereum.token_transfers"
        ],
        "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today": [
            "source.dbt_sipher.crypto_ethereum.token_transfers"
        ],
        "model.dbt_sipher.stg_max__user_ad_revenue": [
            "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
        ],
        "model.dbt_sipher.stg_max__ad_revenue": [
            "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
        ],
        "model.dbt_sipher.stg_aws__ather_id__raw_cognito": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "model.dbt_sipher.stg_aws__ather_id__raw_wallet": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
        ],
        "model.dbt_sipher.stg_aws__ather_id__raw_user": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_spaceship": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_pending_mint": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_open_lootbox": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_scrap_spaceship_parts": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_claim_lootbox": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_burned": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
        ],
        "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update": [
            "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update"
        ],
        "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update_today": [
            "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_inu": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_sculpture": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_lootbox": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_neko": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship_parts": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
        ],
        "model.dbt_sipher.stg_facebook_post_comments": [
            "source.dbt_sipher.raw_social.facebook_sipher_post_comments"
        ],
        "model.dbt_sipher.stg_youtube_contents": [
            "source.dbt_sipher.raw_social.youtube_contents"
        ],
        "model.dbt_sipher.stg_youtube_geographic_areas": [
            "source.dbt_sipher.raw_social.youtube_geographic_areas"
        ],
        "model.dbt_sipher.stg_facebook_page_feed": [
            "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
        ],
        "model.dbt_sipher.stg_youtube_demographics": [
            "source.dbt_sipher.raw_social.youtube_demographics"
        ],
        "model.dbt_sipher.stg_tiktok_user_info": [
            "source.dbt_sipher.raw_social.tiktok_user_info"
        ],
        "model.dbt_sipher.stg_facebook_page_impression_gender_locate": [
            "source.dbt_sipher.raw_social.facebook_sipher_page_impression_gender_locate"
        ],
        "model.dbt_sipher.stg_youtube_traffic_sources": [
            "source.dbt_sipher.raw_social.youtube_traffic_sources"
        ],
        "model.dbt_sipher.stg_youtube_overview": [
            "source.dbt_sipher.raw_social.youtube_overview"
        ],
        "model.dbt_sipher.stg_discord_profile_stats_snapshot": [
            "source.dbt_sipher.raw_social.discord_profile_stats"
        ],
        "model.dbt_sipher.stg_twitter_profile_stats": [
            "source.dbt_sipher.raw_social.twitter_profile_stats"
        ],
        "model.dbt_sipher.stg_twitter_user_info_latest_snapshot": [
            "source.dbt_sipher.raw_social.twitter_user_info",
            "source.dbt_sipher.raw_social.twitter_user_info"
        ],
        "model.dbt_sipher.stg_facebook_page_overall": [
            "source.dbt_sipher.raw_social.facebook_sipher_page_overall"
        ],
        "model.dbt_sipher.stg_discord_user_info_latest_snapshot": [
            "source.dbt_sipher.raw_social.discord_user_info",
            "source.dbt_sipher.raw_social.discord_user_info"
        ],
        "model.dbt_sipher.stg_tiktok_profile_stats": [
            "source.dbt_sipher.raw_social.tiktok_profile_stats"
        ],
        "model.dbt_sipher.stg_facebook_page_insights": [
            "source.dbt_sipher.raw_social.facebook_sipher_page_insights"
        ],
        "model.dbt_sipher.stg_twitter_timeline": [
            "source.dbt_sipher.raw_social.twitter_timeline"
        ],
        "model.dbt_sipher.stg_facebook_post_insights": [
            "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
        ],
        "model.dbt_sipher.stg_tiktok_video_comment": [
            "source.dbt_sipher.raw_social.tiktok_video_comment"
        ],
        "model.dbt_sipher.stg_firebase__hidden_atlas_events_14d": [
            "source.dbt_sipher.raw_firebase_hidden_atlas.events"
        ],
        "model.dbt_sipher.stg_firebase__artventure_events_14d": [
            "source.dbt_sipher.raw_firebase_artventure.events"
        ],
        "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time": [
            "source.dbt_sipher.raw_firebase_hidden_atlas.events"
        ],
        "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "model.dbt_sipher.stg_firebase__artventure_events_all_time": [
            "source.dbt_sipher.raw_firebase_artventure.events"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_metaverse": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_g1": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_marketplace": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_blockchain": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_game_production": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
        ],
        "model.dbt_sipher.stg_coinmarketcap__main_token_quotes": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
        ],
        "model.dbt_sipher.stg_etherscan_polygon__important_wallet_accounts_balance": [
            "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
        ],
        "model.dbt_sipher.spaceship_claimable_lootbox": [],
        "model.dbt_sipher.quest_retention_weekly_hd": [],
        "model.dbt_sipher.quest_4retention_daily_hd": [],
        "model.dbt_sipher.gcs_external_raw_ather_id_user": [
            "model.dbt_sipher.stg_aws__ather_id__raw_user"
        ],
        "model.dbt_sipher.SIPHER_user_activeness_by_hour": [],
        "model.dbt_sipher.SIPHER_overall": [],
        "model.dbt_sipher.quest_retention_daily_hd": [],
        "model.dbt_sipher.atherlabs_dashboard_MAU": [],
        "model.dbt_sipher.quest_dashboard_hd": [],
        "model.dbt_sipher.SIPHER_top_sipherians": [],
        "model.dbt_sipher.SIPHER_token_holders_overview": [],
        "model.dbt_sipher.pc_game_retention": [],
        "model.dbt_sipher.atherlabs_dashboard_DAU": [],
        "model.dbt_sipher.staking_rewards_total_claimed": [],
        "model.dbt_sipher.raw_loyalty_hd": [],
        "model.dbt_sipher.game_dashboard_hd": [],
        "model.dbt_sipher.atherlabs_users": [
            "model.dbt_sipher.dim_ather_user__all",
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.fct_salvage": [
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
        ],
        "model.dbt_sipher.dim_ather_user__wallet": [
            "model.dbt_sipher.stg_aws__ather_id__raw_user",
            "model.dbt_sipher.stg_aws__ather_id__raw_wallet"
        ],
        "model.dbt_sipher.dim_ather_user__all": [
            "model.dbt_sipher.stg_aws__ather_id__raw_cognito",
            "model.dbt_sipher.stg_aws__ather_id__raw_user",
            "model.dbt_sipher.stg_aws__ather_id__raw_wallet"
        ],
        "model.dbt_sipher.fct_artventure_user_events": [
            "model.dbt_sipher.stg_firebase__artventure_events_all_time"
        ],
        "model.dbt_sipher.dim_artventure_user": [
            "model.dbt_sipher.int_artventure_user_devices"
        ],
        "model.dbt_sipher.mart_artventure_task": [
            "model.dbt_sipher.fct_artventure_task_events"
        ],
        "model.dbt_sipher.mart_artventure_recipe__usage": [
            "model.dbt_sipher.fct_artventure_user_events"
        ],
        "model.dbt_sipher.fct_artventure_task_events": [
            "model.dbt_sipher.stg_firebase__artventure_events_all_time"
        ],
        "model.dbt_sipher.mart_artventure_recipe__feedback": [
            "model.dbt_sipher.fct_artventure_user_events"
        ],
        "model.dbt_sipher.int_artventure_user_devices": [
            "model.dbt_sipher.stg_firebase__artventure_events_all_time",
            "model.dbt_sipher.stg_firebase__artventure_events_all_time"
        ],
        "model.dbt_sipher.fct_sipher_other_token_owners": [
            "model.dbt_sipher.stg_aws__loyalty__raw_burned",
            "model.dbt_sipher.stg_aws__loyalty__raw_log_claim_lootbox",
            "model.dbt_sipher.stg_aws__loyalty__raw_log_open_lootbox",
            "model.dbt_sipher.stg_aws__loyalty__raw_log_scrap_spaceship_parts",
            "model.dbt_sipher.stg_aws__loyalty__raw_log_spaceship",
            "model.dbt_sipher.stg_aws__loyalty__raw_pending_mint",
            "model.dbt_sipher.stg_opensearch_onchain__raw_lootbox",
            "model.dbt_sipher.stg_opensearch_onchain__raw_sculpture",
            "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship",
            "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship_parts"
        ],
        "model.dbt_sipher.fct_atherlabs_users_asset": [
            "model.dbt_sipher.dim_ather_user__all",
            "model.dbt_sipher.fct_sipher_other_token_owners",
            "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d",
            "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today"
        ],
        "model.dbt_sipher.dim_hidden_atlas_player": [
            "model.dbt_sipher.int_sipher_odyssey_player_devices"
        ],
        "model.dbt_sipher.fct_aws_billing_all": [
            "model.dbt_sipher.stg_aws__billing__raw_blockchain",
            "model.dbt_sipher.stg_aws__billing__raw_g1",
            "model.dbt_sipher.stg_aws__billing__raw_game_production",
            "model.dbt_sipher.stg_aws__billing__raw_marketplace"
        ],
        "model.dbt_sipher.fct_tiktok_profile_stats_snapshot_daily": [
            "model.dbt_sipher.stg_tiktok_profile_stats"
        ],
        "model.dbt_sipher.fct_youtube_contents": [
            "model.dbt_sipher.stg_youtube_contents"
        ],
        "model.dbt_sipher.dim_discord_profile": [
            "model.dbt_sipher.stg_discord_profile_stats_snapshot",
            "model.dbt_sipher.stg_discord_profile_stats_snapshot"
        ],
        "model.dbt_sipher.fct_tiktok_video_stats_snapshot_daily": [
            "model.dbt_sipher.stg_tiktok_video_comment"
        ],
        "model.dbt_sipher.fct_discord_profile_stats_snapshot_daily": [
            "model.dbt_sipher.stg_discord_profile_stats_snapshot"
        ],
        "model.dbt_sipher.dim_twitter_user_info": [
            "model.dbt_sipher.stg_twitter_user_info_latest_snapshot"
        ],
        "model.dbt_sipher.dim_tiktok_video": [
            "model.dbt_sipher.stg_tiktok_video_comment",
            "model.dbt_sipher.stg_tiktok_video_comment"
        ],
        "model.dbt_sipher.fct_twitter_profile_stats_snapshot_daily": [
            "model.dbt_sipher.stg_twitter_profile_stats"
        ],
        "model.dbt_sipher.fct_facebook_post_insights": [
            "model.dbt_sipher.dim_facebook_post",
            "model.dbt_sipher.stg_facebook_page_feed",
            "model.dbt_sipher.stg_facebook_post_comments",
            "model.dbt_sipher.stg_facebook_post_insights"
        ],
        "model.dbt_sipher.dim_facebook_post": [
            "model.dbt_sipher.stg_facebook_page_feed"
        ],
        "model.dbt_sipher.dim_discord_user_info": [
            "model.dbt_sipher.stg_discord_user_info_latest_snapshot"
        ],
        "model.dbt_sipher.dim_tiktok_user_info": [
            "model.dbt_sipher.stg_tiktok_user_info"
        ],
        "model.dbt_sipher.dim_tiktok_video_comment": [
            "model.dbt_sipher.stg_tiktok_video_comment"
        ],
        "model.dbt_sipher.dim_youtube_contents": [
            "model.dbt_sipher.stg_youtube_contents"
        ],
        "model.dbt_sipher.fct_facebook_page": [
            "model.dbt_sipher.stg_facebook_page_insights",
            "model.dbt_sipher.stg_facebook_page_overall"
        ],
        "model.dbt_sipher.fct_youtube_channel": [
            "model.dbt_sipher.stg_youtube_overview"
        ],
        "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance": [
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_current_inventory_balance"
        ],
        "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance": [
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance"
        ],
        "model.dbt_sipher.int_user_current_inventory_balance": [
            "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update",
            "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update_today"
        ],
        "model.dbt_sipher.int_user_inventory_balance_new_update_by_day": [
            "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update"
        ],
        "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance": [
            "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update",
            "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update"
        ],
        "model.dbt_sipher.mart_level_design_dungeon": [
            "model.dbt_sipher.mart_level_design_gameplay",
            "model.dbt_sipher.mart_level_design_gameplay"
        ],
        "model.dbt_sipher.fct_level_design_lvl": [
            "model.dbt_sipher.int_sipher_odyssey_player_day0_version",
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d"
        ],
        "model.dbt_sipher.mart_level_design_lvl": [
            "model.dbt_sipher.fct_level_design_lvl",
            "model.dbt_sipher.mart_level_design_gameplay"
        ],
        "model.dbt_sipher.fct_level_design_gameplay": [
            "model.dbt_sipher.int_sipher_odyssey_player_day0_version",
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d"
        ],
        "model.dbt_sipher.mart_level_design_gameplay": [
            "model.dbt_sipher.fct_level_design_gameplay",
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "model.dbt_sipher.dim_sipher_odyssey_player": [
            "model.dbt_sipher.int_sipher_odyssey_player_devices"
        ],
        "model.dbt_sipher.int_sipher_odyssey_player_day0_version": [
            "model.dbt_sipher.stg_aws__ather_id__raw_cognito",
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
        ],
        "model.dbt_sipher.int_sipher_odyssey_player_country": [
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
        ],
        "model.dbt_sipher.int_sipher_odyssey_player_devices": [
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time"
        ],
        "model.dbt_sipher.fct_sipher_staking_claimed_rewards": [],
        "model.dbt_sipher.agg_staking_pool_transaction": [
            "model.dbt_sipher.fct_staking_pool_transaction"
        ],
        "model.dbt_sipher.fct_staking_pool_transaction": [
            "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d",
            "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today"
        ],
        "model.dbt_sipher.fct_sipher_staking_distributed": [],
        "model.dbt_sipher.mart_important_wallet_accounts_balance": [
            "model.dbt_sipher.fct_important_wallets_token_transfers",
            "model.dbt_sipher.stg_coinmarketcap__main_token_quotes",
            "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday"
        ],
        "model.dbt_sipher.fct_important_wallets_token_transfers": [],
        "model.dbt_sipher.fct_important_wallets_transactions": [],
        "operation.dbt_sipher.dbt_sipher-on-run-end-0": [],
        "test.dbt_sipher.not_null_quest_dashboard_hd_event_time.77cd6559d4": [
            "model.dbt_sipher.quest_dashboard_hd"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_user_id__string.a704be848c": [
            "model.dbt_sipher.quest_dashboard_hd"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_quest_userId__string.ed72e33032": [
            "model.dbt_sipher.quest_dashboard_hd"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_point_userid__string.ddccce3c50": [
            "model.dbt_sipher.quest_dashboard_hd"
        ],
        "test.dbt_sipher.not_null_quest_dashboard_hd_user_pseudo_id.bebef8a49b": [
            "model.dbt_sipher.quest_dashboard_hd"
        ],
        "test.dbt_sipher.not_null_quest_dashboard_hd_country.46bd95dfd6": [
            "model.dbt_sipher.quest_dashboard_hd"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_quest_dashboard_hd_wallet_address__44__42__wallet_address_is_not_null__True.2ef46375c6": [
            "model.dbt_sipher.quest_dashboard_hd"
        ],
        "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_top_sipherians_0_8__act_date.4c1e44aa4d": [
            "model.dbt_sipher.SIPHER_top_sipherians"
        ],
        "test.dbt_sipher.not_null_atherlabs_users_act_date.3b096bb929": [
            "model.dbt_sipher.atherlabs_users"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_atherlabs_users_wallet_address__42__42__wallet_address_is_not_null__False.550cc7da90": [
            "model.dbt_sipher.atherlabs_users"
        ],
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__period.9e811c2560": [
            "model.dbt_sipher.quest_retention_weekly_hd"
        ],
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__quest_userId.d2bce102d0": [
            "model.dbt_sipher.quest_retention_weekly_hd"
        ],
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_act_month.9a29470684": [
            "model.dbt_sipher.atherlabs_dashboard_MAU"
        ],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_act_month__12__1.9ab6672425": [
            "model.dbt_sipher.atherlabs_dashboard_MAU"
        ],
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_id_cnt.0c4db60863": [
            "model.dbt_sipher.atherlabs_dashboard_MAU"
        ],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0.c16260ae79": [
            "model.dbt_sipher.atherlabs_dashboard_MAU"
        ],
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt.c6408f9f0d": [
            "model.dbt_sipher.atherlabs_dashboard_MAU"
        ],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_pseudo_id_cnt__0.bb797bbfb1": [
            "model.dbt_sipher.atherlabs_dashboard_MAU"
        ],
        "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date.2084568351": [
            "model.dbt_sipher.SIPHER_overall"
        ],
        "test.dbt_sipher.unique_quest_4retention_daily_hd_o_time.80a27a00cb": [
            "model.dbt_sipher.quest_4retention_daily_hd"
        ],
        "test.dbt_sipher.not_null_quest_4retention_daily_hd_o_time.c488df1162": [
            "model.dbt_sipher.quest_4retention_daily_hd"
        ],
        "test.dbt_sipher.not_null_quest_4retention_daily_hd_ending.974c52bb7e": [
            "model.dbt_sipher.quest_4retention_daily_hd"
        ],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_returns___0.667192cea6": [
            "model.dbt_sipher.quest_4retention_daily_hd"
        ],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0.4c2c3b0ca4": [
            "model.dbt_sipher.quest_4retention_daily_hd"
        ],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_retention___0.dcee3a1078": [
            "model.dbt_sipher.quest_4retention_daily_hd"
        ],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_churn_driver___0.b6ae81b862": [
            "model.dbt_sipher.quest_4retention_daily_hd"
        ],
        "test.dbt_sipher.dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date.1be5792482": [
            "model.dbt_sipher.game_dashboard_hd"
        ],
        "test.dbt_sipher.not_null_spaceship_claimable_lootbox_tokenId.2603bfe82b": [
            "model.dbt_sipher.spaceship_claimable_lootbox"
        ],
        "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_tokenId__0__1__2__3__4__5__6___1.fa05a8b96b": [
            "model.dbt_sipher.spaceship_claimable_lootbox"
        ],
        "test.dbt_sipher.not_null_spaceship_claimable_lootbox_lootbox_type.cb32e86218": [
            "model.dbt_sipher.spaceship_claimable_lootbox"
        ],
        "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_lootbox_type__Akagi__Alice__Flik_Flak__Ahab__Zed__Baron__Tunku__Mystery.2e9e808efe": [
            "model.dbt_sipher.spaceship_claimable_lootbox"
        ],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_platform.9283355619": [
            "model.dbt_sipher.staking_rewards_total_claimed"
        ],
        "test.dbt_sipher.accepted_values_staking_rewards_total_claimed_platform__lp_uniswap__single_side__lp_kyberswap.2e9c8221a4": [
            "model.dbt_sipher.staking_rewards_total_claimed"
        ],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_first_date_of_month.c9084e1172": [
            "model.dbt_sipher.staking_rewards_total_claimed"
        ],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_wallet_address.113065f0a7": [
            "model.dbt_sipher.staking_rewards_total_claimed"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_staking_rewards_total_claimed_wallet_address__43__41__wallet_address_is_not_null__True.90c93fd954": [
            "model.dbt_sipher.staking_rewards_total_claimed"
        ],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_total_claimed.b760b08821": [
            "model.dbt_sipher.staking_rewards_total_claimed"
        ],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_date.24daeffd16": [
            "model.dbt_sipher.atherlabs_dashboard_DAU"
        ],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_month.77ff189eab": [
            "model.dbt_sipher.atherlabs_dashboard_DAU"
        ],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_DAU_act_month__12__1.2108c00134": [
            "model.dbt_sipher.atherlabs_dashboard_DAU"
        ],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_id_cnt.cf331d33f3": [
            "model.dbt_sipher.atherlabs_dashboard_DAU"
        ],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt.8c3a55d3e2": [
            "model.dbt_sipher.atherlabs_dashboard_DAU"
        ],
        "test.dbt_sipher.dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id.937e86775c": [
            "model.dbt_sipher.raw_loyalty_hd"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_raw_loyalty_hd_wallet_address__43__41__wallet_address_is_not_null__True.bcb332171a": [
            "model.dbt_sipher.raw_loyalty_hd"
        ],
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_hour.473c2ab225": [
            "model.dbt_sipher.SIPHER_user_activeness_by_hour"
        ],
        "test.dbt_sipher.dbt_utils_accepted_range_SIPHER_user_activeness_by_hour_hour__23__0.baae8606a5": [
            "model.dbt_sipher.SIPHER_user_activeness_by_hour"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_hour__INT64.a1cfbd9a09": [
            "model.dbt_sipher.SIPHER_user_activeness_by_hour"
        ],
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_user_count.3e4602b6f6": [
            "model.dbt_sipher.SIPHER_user_activeness_by_hour"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_user_count__INT64.2ecc15ea27": [
            "model.dbt_sipher.SIPHER_user_activeness_by_hour"
        ],
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_event_count.e2d2d6113b": [
            "model.dbt_sipher.SIPHER_user_activeness_by_hour"
        ],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_event_count__INT64.7429bda734": [
            "model.dbt_sipher.SIPHER_user_activeness_by_hour"
        ],
        "test.dbt_sipher.not_null_SIPHER_token_holders_overview_user_address.a982aeb387": [
            "model.dbt_sipher.SIPHER_token_holders_overview"
        ],
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_daily_hd_0_8__period.cce60c36d4": [
            "model.dbt_sipher.quest_retention_daily_hd"
        ],
        "test.dbt_sipher.unique_quest_retention_daily_hd_period.49283d57a7": [
            "model.dbt_sipher.quest_retention_daily_hd"
        ],
        "test.dbt_sipher.not_null_dim_artventure_user_user_id.184c7e792d": [
            "model.dbt_sipher.dim_artventure_user"
        ],
        "test.dbt_sipher.not_null_dim_artventure_user_user_email.f79283804d": [
            "model.dbt_sipher.dim_artventure_user"
        ],
        "test.dbt_sipher.not_null_fct_artventure_task_events_date.9312343eaf": [
            "model.dbt_sipher.fct_artventure_task_events"
        ],
        "test.dbt_sipher.not_null_fct_artventure_task_events_task_id.2742389359": [
            "model.dbt_sipher.fct_artventure_task_events"
        ],
        "test.dbt_sipher.not_null_fct_artventure_task_events_status.6df6c766bb": [
            "model.dbt_sipher.fct_artventure_task_events"
        ],
        "test.dbt_sipher.not_null_fct_artventure_user_events_user_id.0dd9905f86": [
            "model.dbt_sipher.fct_artventure_user_events"
        ],
        "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_lvl_.1d3aac7e9a": [
            "model.dbt_sipher.mart_level_design_lvl"
        ],
        "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_.dd9bd89d6c": [
            "model.dbt_sipher.fct_level_design_lvl",
            "model.dbt_sipher.mart_level_design_lvl"
        ],
        "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_gameplay_.e1ef903c28": [
            "model.dbt_sipher.mart_level_design_gameplay"
        ],
        "test.dbt_sipher.missing_dungeon_mart_level_design_gameplay_.6c251e9f3f": [
            "model.dbt_sipher.mart_level_design_gameplay"
        ],
        "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_.6115b9087d": [
            "model.dbt_sipher.fct_level_design_gameplay",
            "model.dbt_sipher.mart_level_design_gameplay"
        ],
        "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_gameplay_gameplay_down__gameplay_hp_loss.76e7482eb7": [
            "model.dbt_sipher.fct_level_design_gameplay"
        ],
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_gameplay_LENGTH_session_id_5.b5b88c7bc8": [
            "model.dbt_sipher.fct_level_design_gameplay"
        ],
        "test.dbt_sipher.check_columns_for_nulls_fct_level_design_gameplay_gameplay_start_event_date__gameplay_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__1_1.b66ff154c6": [
            "model.dbt_sipher.fct_level_design_gameplay"
        ],
        "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_gameplay_user_id__session_id.d836af69b9": [
            "model.dbt_sipher.fct_level_design_gameplay"
        ],
        "test.dbt_sipher.missing_level_fct_level_design_lvl_.13908e0c6b": [
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_lvl_down__hp_loss.36a26a0ff8": [
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_LENGTH_session_id_5.5e4384ec11": [
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_level_start_level_count_12.c72a34b500": [
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "test.dbt_sipher.check_columns_for_nulls_fct_level_design_lvl_level_start_event_date__level_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__level_start_level_count__1_1.9b972f0b8e": [
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_lvl_user_id__session_id__level_start_level_count.393b317bfe": [
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "test.dbt_sipher.source_not_null_crypto_ethereum_token_transfers_block_timestamp.0cffd0c4e0": [
            "source.dbt_sipher.crypto_ethereum.token_transfers"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_crypto_ethereum_token_transfers_block_timestamp.88bbc039e1": [
            "source.dbt_sipher.crypto_ethereum.token_transfers"
        ],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_application.10deb2e88d": [
            "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
        ],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_store_id.999adf312c": [
            "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
        ],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts.c505161943": [
            "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_ad_revenue___collected_ts.485e3ab4a3": [
            "source.dbt_sipher.raw_max_mediation.raw_ad_revenue"
        ],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_Ad_Unit_ID.b0bc07a54c": [
            "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
        ],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID.848cce4cd3": [
            "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue_Revenue.4178b24384": [
            "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
        ],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id.5f800a3a7d": [
            "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
        ],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue___collected_ts.6b030d5fdc": [
            "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue___collected_ts.f5406ae664": [
            "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.0dbd09035d": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.4a288a89e5": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.7aad339abc": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.c1a5750768": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.974a6427d2": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.7ab3ee357a": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email.5886ff2069": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_email.f564c401ae": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_cognito_dt__date.fc1a9a77cf": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id.564085b848": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_id.32f14dbae7": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.34f8a3aee8": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.ea37a30365": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_email.b0e1c50fad": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_user_dt__date.dc048870ed": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_address.4ce31050de": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_createdAt.b30ece57b5": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
        ],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.7316a110af": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.2e135f84d9": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_wallet_dt__date.1c3dffe6cf": [
            "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_id.b8bea69f04": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_createdAt.e29ffce993": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt.46f0543726": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt__date.486da51096": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_id.7d2e7ccc95": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_createdAt.06c741ea1c": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt.3a85d7108c": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt__date.ffc3a85b34": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_id.daee3e4f42": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_createdAt.7bbf3a81f2": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt.e90280d0d1": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt__date.f9c1586232": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_id.6e9edfb7c4": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_createdAt.c3f3507d42": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt.6c94d5df71": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt__date.23c2f77d6b": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_id.dab68187c7": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint__to_.203d911a78": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_signature.b756c08864": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_createdAt.c8748990d3": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt.336038e037": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt__date.7083c1c801": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_id.84e0b6c926": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned__to_.649ebfda5d": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_createdAt.015bd59457": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
        ],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt.5bf3088879": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt__date.8260a401cc": [
            "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_owner.1cbc082ace": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.4cc562561a": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.32bc4c3c59": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_owner.c7f2a42a76": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.bce426254a": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.f73a0b8619": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_owner.527c46a7a0": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.95e2485465": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.dbc29f555f": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_owner.4ccb8609f2": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.aafc18a412": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.01b5de2945": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_owner.7760aeeb20": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.4564aa20a8": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.b3e5fe734e": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_owner.ecc398def2": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.8e8f578326": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.a455cc6015": [
            "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko"
        ],
        "test.dbt_sipher.source_not_null_raw_social_discord_user_info_created_at.eb561c0cb5": [
            "source.dbt_sipher.raw_social.discord_user_info"
        ],
        "test.dbt_sipher.source_not_null_raw_social_discord_user_info_id.8b125c4225": [
            "source.dbt_sipher.raw_social.discord_user_info"
        ],
        "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_created_at.c1fb05bd4c": [
            "source.dbt_sipher.raw_social.discord_profile_stats"
        ],
        "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_id.15d97e5337": [
            "source.dbt_sipher.raw_social.discord_profile_stats"
        ],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_profile_stats_date.3fd76ba76a": [
            "source.dbt_sipher.raw_social.tiktok_profile_stats"
        ],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_user_info_id.a07df7d3b8": [
            "source.dbt_sipher.raw_social.tiktok_user_info"
        ],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment_post_id.bf8ddd01fb": [
            "source.dbt_sipher.raw_social.tiktok_video_comment"
        ],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment__desc_.0305ba5b69": [
            "source.dbt_sipher.raw_social.tiktok_video_comment"
        ],
        "test.dbt_sipher.source_not_null_raw_social_twitter_profile_stats_id.10f1805edf": [
            "source.dbt_sipher.raw_social.twitter_profile_stats"
        ],
        "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_created_at.94d84e4041": [
            "source.dbt_sipher.raw_social.twitter_timeline"
        ],
        "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_id.73c50f8658": [
            "source.dbt_sipher.raw_social.twitter_timeline"
        ],
        "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_created_at.3163bfddcb": [
            "source.dbt_sipher.raw_social.twitter_user_info"
        ],
        "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_id.6094ac3138": [
            "source.dbt_sipher.raw_social.twitter_user_info"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_id.b55f898f15": [
            "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed___collected_ts.f5fc502572": [
            "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_page_id.ad2948bb7a": [
            "source.dbt_sipher.raw_social.facebook_sipher_page_feed"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_name.f0eb1ad46e": [
            "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_id.0b96b4a409": [
            "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights___collected_ts.a478ebf264": [
            "source.dbt_sipher.raw_social.facebook_sipher_post_insights"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments_post_id.70ee486a35": [
            "source.dbt_sipher.raw_social.facebook_sipher_post_comments"
        ],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments___collected_ts.2b680a92e4": [
            "source.dbt_sipher.raw_social.facebook_sipher_post_comments"
        ],
        "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_timestamp.b42e524759": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_timestamp.2554e09518": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_name.762d8ac1fb": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_params.d6f864d1b8": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_user_properties.f09b4dd1a1": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_ecommerce.62d3f0249e": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_items.dc6acdf0a4": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_collected_traffic_source.740db06810": [
            "source.dbt_sipher.raw_firebase_sipher_odyssey.events"
        ],
        "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_timestamp.f225450ba4": [
            "source.dbt_sipher.raw_firebase_hidden_atlas.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_timestamp.a032dca918": [
            "source.dbt_sipher.raw_firebase_hidden_atlas.events"
        ],
        "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_name.e1d7be3511": [
            "source.dbt_sipher.raw_firebase_hidden_atlas.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_params.424ad741b4": [
            "source.dbt_sipher.raw_firebase_hidden_atlas.events"
        ],
        "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_timestamp.b1c9baab46": [
            "source.dbt_sipher.raw_firebase_artventure.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_timestamp.336cb29b91": [
            "source.dbt_sipher.raw_firebase_artventure.events"
        ],
        "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_name.3d7db8fa8d": [
            "source.dbt_sipher.raw_firebase_artventure.events"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_params.d811f5cb62": [
            "source.dbt_sipher.raw_firebase_artventure.events"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.b3dfb1a43a": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.7a6ed5f9c0": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_ProductCode.b682639c61": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_UnblendedCost.3a5430697c": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_BlendedCost.d6dcc7ad94": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_LineItemDescription.9c0b052bd1": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt.990ac578cf": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_blockchain_dt__date.208f58e107": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.3cee6eefbb": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.88c03ad13c": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_ProductCode.1ea0f6c89d": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_UnblendedCost.d1a99f177e": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_BlendedCost.78e58de029": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_lineItem_LineItemDescription.ace5932803": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_g1_dt__date.7e67c3bf92": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.9301958534": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.058f341f55": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_ProductCode.694387d42e": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_UnblendedCost.6a47fae0b2": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_BlendedCost.45b3432709": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_LineItemDescription.8b6ac9f5b0": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt.06b082bea7": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_marketplace_dt__date.5d596bb64e": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.7bde2004ca": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.fb580d52b2": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_ProductCode.a4a645fc7e": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_UnblendedCost.3d9a5e17d1": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_BlendedCost.0ede38da9b": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_lineItem_LineItemDescription.b5b1c31618": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_dt.78713742f0": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_game_production_dt__date.082cf5f767": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.f9038febbd": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.6e5cddcc3d": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_ProductCode.fd1699b097": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_UnblendedCost.d6d155d47a": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_BlendedCost.251f1d81be": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_LineItemDescription.f8e8b976f5": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt.f42190344c": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_metaverse_dt__date.ff1180caa1": [
            "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse"
        ],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_name.d3dd1ed862": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
        ],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_timestamp.873137cb3b": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_timestamp.25c4cb59c8": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes"
        ],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_timestamp.e358fedf2f": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_intraday_timestamp.7fb340058b": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
        ],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_token_symbol.a8d79ff1a2": [
            "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday"
        ],
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_wallet_address.fa1d03bcdc": [
            "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
        ],
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_token_symbol.399f726266": [
            "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
        ],
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.7f047ffc17": [
            "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.8a17b876b7": [
            "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__blueprint": [
            "source.dbt_sipher.raw_meta_equipment.blueprint"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__capsule": [
            "source.dbt_sipher.raw_meta_equipment.capsule"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__character": [
            "source.dbt_sipher.raw_meta_equipment.character"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__currency": [
            "source.dbt_sipher.raw_meta_equipment.currency"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__equipment": [
            "source.dbt_sipher.raw_meta_equipment.equipment"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__equipment_part": [
            "source.dbt_sipher.raw_meta_equipment.equipment_part"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__weapon": [
            "source.dbt_sipher.raw_meta_equipment.weapon"
        ],
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_type__Gear.c8aa9cfe3a": [
            "source.dbt_sipher.raw_meta_equipment.blueprint"
        ],
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_weaponType__None.3705c6993f": [
            "source.dbt_sipher.raw_meta_equipment.blueprint"
        ],
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_race__None.7cdeedb364": [
            "source.dbt_sipher.raw_meta_equipment.blueprint"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_blueprint_tier__int64.0bcf46c350": [
            "source.dbt_sipher.raw_meta_equipment.blueprint"
        ],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_capsule_id.c1ae4762b2": [
            "source.dbt_sipher.raw_meta_equipment.capsule"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_capsule_tier__int64.3dcfc0113b": [
            "source.dbt_sipher.raw_meta_equipment.capsule"
        ],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_character_id.79fdb4a15a": [
            "source.dbt_sipher.raw_meta_equipment.character"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_character_tier__int64.f1bc17dd99": [
            "source.dbt_sipher.raw_meta_equipment.character"
        ],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_currency_id.04b38be9d4": [
            "source.dbt_sipher.raw_meta_equipment.currency"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_currency_tier__int64.e7949fffcc": [
            "source.dbt_sipher.raw_meta_equipment.currency"
        ],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_equipment_id.ed8ed28acb": [
            "source.dbt_sipher.raw_meta_equipment.equipment"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_tier__int64.3d37d2b642": [
            "source.dbt_sipher.raw_meta_equipment.equipment"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_part_tier__int64.7b68996a52": [
            "source.dbt_sipher.raw_meta_equipment.equipment_part"
        ],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_sipher_game_reward_id.aa3a5ba67a": [
            "source.dbt_sipher.raw_meta_equipment.sipher_game_reward"
        ],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_weapon_id.3430d0c231": [
            "source.dbt_sipher.raw_meta_equipment.weapon"
        ],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_weapon_tier__int64.c8ae55ef69": [
            "source.dbt_sipher.raw_meta_equipment.weapon"
        ],
        "model.dbt_sipher.stg_sipher_meta_equipment__sipher_game_reward": [
            "source.dbt_sipher.raw_meta_equipment.sipher_game_reward"
        ],
        "model.dbt_sipher.dim_sipher_odyssey_characters": [],
        "model.dbt_sipher.int_hidden_atlas_player_devices": [
            "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time",
            "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time"
        ],
        "model.dbt_sipher.dim_twitter_profile": [
            "model.dbt_sipher.stg_twitter_profile_stats",
            "model.dbt_sipher.stg_twitter_profile_stats"
        ],
        "source.dbt_sipher.crypto_ethereum.token_transfers": [],
        "source.dbt_sipher.raw_max_mediation.raw_ad_revenue": [],
        "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue": [],
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito": [],
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user": [],
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet": [],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox": [],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox": [],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship": [],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts": [],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint": [],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned": [],
        "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update": [],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox": [],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship": [],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts": [],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture": [],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu": [],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko": [],
        "source.dbt_sipher.raw_social.discord_user_info": [],
        "source.dbt_sipher.raw_social.discord_profile_stats": [],
        "source.dbt_sipher.raw_social.tiktok_profile_stats": [],
        "source.dbt_sipher.raw_social.tiktok_user_info": [],
        "source.dbt_sipher.raw_social.tiktok_video_comment": [],
        "source.dbt_sipher.raw_social.twitter_profile_stats": [],
        "source.dbt_sipher.raw_social.twitter_timeline": [],
        "source.dbt_sipher.raw_social.twitter_user_info": [],
        "source.dbt_sipher.raw_social.facebook_sipher_page_feed": [],
        "source.dbt_sipher.raw_social.facebook_sipher_post_insights": [],
        "source.dbt_sipher.raw_social.facebook_sipher_post_comments": [],
        "source.dbt_sipher.raw_social.facebook_sipher_page_insights": [],
        "source.dbt_sipher.raw_social.facebook_sipher_page_overall": [],
        "source.dbt_sipher.raw_social.facebook_sipher_page_impression_gender_locate": [],
        "source.dbt_sipher.raw_social.youtube_overview": [],
        "source.dbt_sipher.raw_social.youtube_traffic_sources": [],
        "source.dbt_sipher.raw_social.youtube_contents": [],
        "source.dbt_sipher.raw_social.youtube_demographics": [],
        "source.dbt_sipher.raw_social.youtube_geographic_areas": [],
        "source.dbt_sipher.raw_firebase_sipher_odyssey.events": [],
        "source.dbt_sipher.raw_firebase_hidden_atlas.events": [],
        "source.dbt_sipher.raw_firebase_artventure.events": [],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain": [],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1": [],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace": [],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production": [],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse": [],
        "source.dbt_sipher.raw_coinmarketcap.main_token_quotes": [],
        "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday": [],
        "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance": [],
        "source.dbt_sipher.raw_meta_equipment.blueprint": [],
        "source.dbt_sipher.raw_meta_equipment.capsule": [],
        "source.dbt_sipher.raw_meta_equipment.character": [],
        "source.dbt_sipher.raw_meta_equipment.currency": [],
        "source.dbt_sipher.raw_meta_equipment.equipment": [],
        "source.dbt_sipher.raw_meta_equipment.equipment_part": [],
        "source.dbt_sipher.raw_meta_equipment.sipher_game_reward": [],
        "source.dbt_sipher.raw_meta_equipment.weapon": []
    },
    "child_map": {
        "model.dbt_sipher.rpt_social_profile_stats": [],
        "model.dbt_sipher.rpt_twitter_post_stats": [],
        "model.dbt_sipher.rpt_finance_wallet_account_balance": [],
        "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d": [
            "model.dbt_sipher.fct_atherlabs_users_asset",
            "model.dbt_sipher.fct_staking_pool_transaction"
        ],
        "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today": [
            "model.dbt_sipher.fct_atherlabs_users_asset",
            "model.dbt_sipher.fct_staking_pool_transaction"
        ],
        "model.dbt_sipher.stg_max__user_ad_revenue": [],
        "model.dbt_sipher.stg_max__ad_revenue": [],
        "model.dbt_sipher.stg_aws__ather_id__raw_cognito": [
            "model.dbt_sipher.dim_ather_user__all",
            "model.dbt_sipher.int_sipher_odyssey_player_day0_version"
        ],
        "model.dbt_sipher.stg_aws__ather_id__raw_wallet": [
            "model.dbt_sipher.dim_ather_user__all",
            "model.dbt_sipher.dim_ather_user__wallet"
        ],
        "model.dbt_sipher.stg_aws__ather_id__raw_user": [
            "model.dbt_sipher.dim_ather_user__all",
            "model.dbt_sipher.dim_ather_user__wallet",
            "model.dbt_sipher.gcs_external_raw_ather_id_user"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_spaceship": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_pending_mint": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_open_lootbox": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_scrap_spaceship_parts": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_log_claim_lootbox": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_aws__loyalty__raw_burned": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update": [
            "model.dbt_sipher.int_user_current_inventory_balance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance",
            "model.dbt_sipher.int_user_inventory_balance_new_update_by_day"
        ],
        "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update_today": [
            "model.dbt_sipher.int_user_current_inventory_balance"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_inu": [],
        "model.dbt_sipher.stg_opensearch_onchain__raw_sculpture": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_lootbox": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_neko": [],
        "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship_parts": [
            "model.dbt_sipher.fct_sipher_other_token_owners"
        ],
        "model.dbt_sipher.stg_facebook_post_comments": [
            "model.dbt_sipher.fct_facebook_post_insights"
        ],
        "model.dbt_sipher.stg_youtube_contents": [
            "model.dbt_sipher.dim_youtube_contents",
            "model.dbt_sipher.fct_youtube_contents"
        ],
        "model.dbt_sipher.stg_youtube_geographic_areas": [],
        "model.dbt_sipher.stg_facebook_page_feed": [
            "model.dbt_sipher.dim_facebook_post",
            "model.dbt_sipher.fct_facebook_post_insights"
        ],
        "model.dbt_sipher.stg_youtube_demographics": [],
        "model.dbt_sipher.stg_tiktok_user_info": [
            "model.dbt_sipher.dim_tiktok_user_info"
        ],
        "model.dbt_sipher.stg_facebook_page_impression_gender_locate": [],
        "model.dbt_sipher.stg_youtube_traffic_sources": [],
        "model.dbt_sipher.stg_youtube_overview": [
            "model.dbt_sipher.fct_youtube_channel"
        ],
        "model.dbt_sipher.stg_discord_profile_stats_snapshot": [
            "model.dbt_sipher.dim_discord_profile",
            "model.dbt_sipher.dim_discord_profile",
            "model.dbt_sipher.fct_discord_profile_stats_snapshot_daily"
        ],
        "model.dbt_sipher.stg_twitter_profile_stats": [
            "model.dbt_sipher.dim_twitter_profile",
            "model.dbt_sipher.dim_twitter_profile",
            "model.dbt_sipher.fct_twitter_profile_stats_snapshot_daily"
        ],
        "model.dbt_sipher.stg_twitter_user_info_latest_snapshot": [
            "model.dbt_sipher.dim_twitter_user_info"
        ],
        "model.dbt_sipher.stg_facebook_page_overall": [
            "model.dbt_sipher.fct_facebook_page"
        ],
        "model.dbt_sipher.stg_discord_user_info_latest_snapshot": [
            "model.dbt_sipher.dim_discord_user_info"
        ],
        "model.dbt_sipher.stg_tiktok_profile_stats": [
            "model.dbt_sipher.fct_tiktok_profile_stats_snapshot_daily"
        ],
        "model.dbt_sipher.stg_facebook_page_insights": [
            "model.dbt_sipher.fct_facebook_page"
        ],
        "model.dbt_sipher.stg_twitter_timeline": [
            "model.dbt_sipher.rpt_twitter_post_stats"
        ],
        "model.dbt_sipher.stg_facebook_post_insights": [
            "model.dbt_sipher.fct_facebook_post_insights"
        ],
        "model.dbt_sipher.stg_tiktok_video_comment": [
            "model.dbt_sipher.dim_tiktok_video",
            "model.dbt_sipher.dim_tiktok_video",
            "model.dbt_sipher.dim_tiktok_video_comment",
            "model.dbt_sipher.fct_tiktok_video_stats_snapshot_daily"
        ],
        "model.dbt_sipher.stg_firebase__hidden_atlas_events_14d": [],
        "model.dbt_sipher.stg_firebase__artventure_events_14d": [],
        "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time": [
            "model.dbt_sipher.int_hidden_atlas_player_devices",
            "model.dbt_sipher.int_hidden_atlas_player_devices"
        ],
        "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time": [
            "model.dbt_sipher.fct_salvage",
            "model.dbt_sipher.int_sipher_odyssey_player_country",
            "model.dbt_sipher.int_sipher_odyssey_player_day0_version",
            "model.dbt_sipher.int_sipher_odyssey_player_day0_version",
            "model.dbt_sipher.int_sipher_odyssey_player_day0_version",
            "model.dbt_sipher.int_sipher_odyssey_player_devices",
            "model.dbt_sipher.int_sipher_odyssey_player_devices"
        ],
        "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d": [
            "model.dbt_sipher.fct_level_design_gameplay",
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "model.dbt_sipher.stg_firebase__artventure_events_all_time": [
            "model.dbt_sipher.fct_artventure_task_events",
            "model.dbt_sipher.fct_artventure_user_events",
            "model.dbt_sipher.int_artventure_user_devices",
            "model.dbt_sipher.int_artventure_user_devices"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_metaverse": [],
        "model.dbt_sipher.stg_aws__billing__raw_g1": [
            "model.dbt_sipher.fct_aws_billing_all"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_marketplace": [
            "model.dbt_sipher.fct_aws_billing_all"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_blockchain": [
            "model.dbt_sipher.fct_aws_billing_all"
        ],
        "model.dbt_sipher.stg_aws__billing__raw_game_production": [
            "model.dbt_sipher.fct_aws_billing_all"
        ],
        "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday": [
            "model.dbt_sipher.mart_important_wallet_accounts_balance",
            "model.dbt_sipher.rpt_finance_wallet_account_balance"
        ],
        "model.dbt_sipher.stg_coinmarketcap__main_token_quotes": [
            "model.dbt_sipher.mart_important_wallet_accounts_balance",
            "model.dbt_sipher.rpt_finance_wallet_account_balance"
        ],
        "model.dbt_sipher.stg_etherscan_polygon__important_wallet_accounts_balance": [
            "model.dbt_sipher.rpt_finance_wallet_account_balance"
        ],
        "model.dbt_sipher.spaceship_claimable_lootbox": [
            "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_lootbox_type__Akagi__Alice__Flik_Flak__Ahab__Zed__Baron__Tunku__Mystery.2e9e808efe",
            "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_tokenId__0__1__2__3__4__5__6___1.fa05a8b96b",
            "test.dbt_sipher.not_null_spaceship_claimable_lootbox_lootbox_type.cb32e86218",
            "test.dbt_sipher.not_null_spaceship_claimable_lootbox_tokenId.2603bfe82b"
        ],
        "model.dbt_sipher.quest_retention_weekly_hd": [
            "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__period.9e811c2560",
            "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__quest_userId.d2bce102d0"
        ],
        "model.dbt_sipher.quest_4retention_daily_hd": [
            "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_churn_driver___0.b6ae81b862",
            "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0.4c2c3b0ca4",
            "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_retention___0.dcee3a1078",
            "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_returns___0.667192cea6",
            "test.dbt_sipher.not_null_quest_4retention_daily_hd_ending.974c52bb7e",
            "test.dbt_sipher.not_null_quest_4retention_daily_hd_o_time.c488df1162",
            "test.dbt_sipher.unique_quest_4retention_daily_hd_o_time.80a27a00cb"
        ],
        "model.dbt_sipher.gcs_external_raw_ather_id_user": [],
        "model.dbt_sipher.SIPHER_user_activeness_by_hour": [
            "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_event_count__INT64.7429bda734",
            "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_hour__INT64.a1cfbd9a09",
            "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_user_count__INT64.2ecc15ea27",
            "test.dbt_sipher.dbt_utils_accepted_range_SIPHER_user_activeness_by_hour_hour__23__0.baae8606a5",
            "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_event_count.e2d2d6113b",
            "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_hour.473c2ab225",
            "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_user_count.3e4602b6f6"
        ],
        "model.dbt_sipher.SIPHER_overall": [
            "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date.2084568351"
        ],
        "model.dbt_sipher.quest_retention_daily_hd": [
            "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_daily_hd_0_8__period.cce60c36d4",
            "test.dbt_sipher.unique_quest_retention_daily_hd_period.49283d57a7"
        ],
        "model.dbt_sipher.atherlabs_dashboard_MAU": [
            "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_act_month__12__1.9ab6672425",
            "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0.c16260ae79",
            "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_pseudo_id_cnt__0.bb797bbfb1",
            "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_act_month.9a29470684",
            "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_id_cnt.0c4db60863",
            "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt.c6408f9f0d"
        ],
        "model.dbt_sipher.quest_dashboard_hd": [
            "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_quest_dashboard_hd_wallet_address__44__42__wallet_address_is_not_null__True.2ef46375c6",
            "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_point_userid__string.ddccce3c50",
            "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_quest_userId__string.ed72e33032",
            "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_user_id__string.a704be848c",
            "test.dbt_sipher.not_null_quest_dashboard_hd_country.46bd95dfd6",
            "test.dbt_sipher.not_null_quest_dashboard_hd_event_time.77cd6559d4",
            "test.dbt_sipher.not_null_quest_dashboard_hd_user_pseudo_id.bebef8a49b"
        ],
        "model.dbt_sipher.SIPHER_top_sipherians": [
            "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_top_sipherians_0_8__act_date.4c1e44aa4d"
        ],
        "model.dbt_sipher.SIPHER_token_holders_overview": [
            "test.dbt_sipher.not_null_SIPHER_token_holders_overview_user_address.a982aeb387"
        ],
        "model.dbt_sipher.pc_game_retention": [],
        "model.dbt_sipher.atherlabs_dashboard_DAU": [
            "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_DAU_act_month__12__1.2108c00134",
            "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_date.24daeffd16",
            "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_month.77ff189eab",
            "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_id_cnt.cf331d33f3",
            "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt.8c3a55d3e2"
        ],
        "model.dbt_sipher.staking_rewards_total_claimed": [
            "test.dbt_sipher.accepted_values_staking_rewards_total_claimed_platform__lp_uniswap__single_side__lp_kyberswap.2e9c8221a4",
            "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_staking_rewards_total_claimed_wallet_address__43__41__wallet_address_is_not_null__True.90c93fd954",
            "test.dbt_sipher.not_null_staking_rewards_total_claimed_first_date_of_month.c9084e1172",
            "test.dbt_sipher.not_null_staking_rewards_total_claimed_platform.9283355619",
            "test.dbt_sipher.not_null_staking_rewards_total_claimed_total_claimed.b760b08821",
            "test.dbt_sipher.not_null_staking_rewards_total_claimed_wallet_address.113065f0a7"
        ],
        "model.dbt_sipher.raw_loyalty_hd": [
            "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_raw_loyalty_hd_wallet_address__43__41__wallet_address_is_not_null__True.bcb332171a",
            "test.dbt_sipher.dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id.937e86775c"
        ],
        "model.dbt_sipher.game_dashboard_hd": [
            "test.dbt_sipher.dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date.1be5792482"
        ],
        "model.dbt_sipher.atherlabs_users": [
            "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_atherlabs_users_wallet_address__42__42__wallet_address_is_not_null__False.550cc7da90",
            "test.dbt_sipher.not_null_atherlabs_users_act_date.3b096bb929"
        ],
        "model.dbt_sipher.fct_salvage": [],
        "model.dbt_sipher.dim_ather_user__wallet": [],
        "model.dbt_sipher.dim_ather_user__all": [
            "model.dbt_sipher.atherlabs_users",
            "model.dbt_sipher.fct_atherlabs_users_asset"
        ],
        "model.dbt_sipher.fct_artventure_user_events": [
            "model.dbt_sipher.mart_artventure_recipe__feedback",
            "model.dbt_sipher.mart_artventure_recipe__usage",
            "test.dbt_sipher.not_null_fct_artventure_user_events_user_id.0dd9905f86"
        ],
        "model.dbt_sipher.dim_artventure_user": [
            "test.dbt_sipher.not_null_dim_artventure_user_user_email.f79283804d",
            "test.dbt_sipher.not_null_dim_artventure_user_user_id.184c7e792d"
        ],
        "model.dbt_sipher.mart_artventure_task": [],
        "model.dbt_sipher.mart_artventure_recipe__usage": [],
        "model.dbt_sipher.fct_artventure_task_events": [
            "model.dbt_sipher.mart_artventure_task",
            "test.dbt_sipher.not_null_fct_artventure_task_events_date.9312343eaf",
            "test.dbt_sipher.not_null_fct_artventure_task_events_status.6df6c766bb",
            "test.dbt_sipher.not_null_fct_artventure_task_events_task_id.2742389359"
        ],
        "model.dbt_sipher.mart_artventure_recipe__feedback": [],
        "model.dbt_sipher.int_artventure_user_devices": [
            "model.dbt_sipher.dim_artventure_user"
        ],
        "model.dbt_sipher.fct_sipher_other_token_owners": [
            "model.dbt_sipher.atherlabs_users",
            "model.dbt_sipher.fct_atherlabs_users_asset"
        ],
        "model.dbt_sipher.fct_atherlabs_users_asset": [],
        "model.dbt_sipher.dim_hidden_atlas_player": [],
        "model.dbt_sipher.fct_aws_billing_all": [],
        "model.dbt_sipher.fct_tiktok_profile_stats_snapshot_daily": [
            "model.dbt_sipher.rpt_social_profile_stats"
        ],
        "model.dbt_sipher.fct_youtube_contents": [],
        "model.dbt_sipher.dim_discord_profile": [
            "model.dbt_sipher.rpt_social_profile_stats"
        ],
        "model.dbt_sipher.fct_tiktok_video_stats_snapshot_daily": [],
        "model.dbt_sipher.fct_discord_profile_stats_snapshot_daily": [
            "model.dbt_sipher.rpt_social_profile_stats"
        ],
        "model.dbt_sipher.dim_twitter_user_info": [],
        "model.dbt_sipher.dim_tiktok_video": [],
        "model.dbt_sipher.fct_twitter_profile_stats_snapshot_daily": [
            "model.dbt_sipher.rpt_social_profile_stats"
        ],
        "model.dbt_sipher.fct_facebook_post_insights": [],
        "model.dbt_sipher.dim_facebook_post": [
            "model.dbt_sipher.fct_facebook_post_insights"
        ],
        "model.dbt_sipher.dim_discord_user_info": [],
        "model.dbt_sipher.dim_tiktok_user_info": [],
        "model.dbt_sipher.dim_tiktok_video_comment": [],
        "model.dbt_sipher.dim_youtube_contents": [],
        "model.dbt_sipher.fct_facebook_page": [],
        "model.dbt_sipher.fct_youtube_channel": [],
        "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance": [],
        "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance": [],
        "model.dbt_sipher.int_user_current_inventory_balance": [
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_current_inventory_balance"
        ],
        "model.dbt_sipher.int_user_inventory_balance_new_update_by_day": [],
        "model.dbt_sipher.int_user_inventory_balance_latest_update_by_instance": [
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance",
            "model.dbt_sipher.fct_sipher_odyssey_user_latest_inventory_balance"
        ],
        "model.dbt_sipher.mart_level_design_dungeon": [],
        "model.dbt_sipher.fct_level_design_lvl": [
            "model.dbt_sipher.mart_level_design_gameplay",
            "model.dbt_sipher.mart_level_design_lvl",
            "test.dbt_sipher.check_columns_for_nulls_fct_level_design_lvl_level_start_event_date__level_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__level_start_level_count__1_1.9b972f0b8e",
            "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_.dd9bd89d6c",
            "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_LENGTH_session_id_5.5e4384ec11",
            "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_level_start_level_count_12.c72a34b500",
            "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_lvl_user_id__session_id__level_start_level_count.393b317bfe",
            "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_lvl_down__hp_loss.36a26a0ff8",
            "test.dbt_sipher.missing_level_fct_level_design_lvl_.13908e0c6b"
        ],
        "model.dbt_sipher.mart_level_design_lvl": [
            "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_.dd9bd89d6c",
            "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_lvl_.1d3aac7e9a"
        ],
        "model.dbt_sipher.fct_level_design_gameplay": [
            "model.dbt_sipher.mart_level_design_gameplay",
            "test.dbt_sipher.check_columns_for_nulls_fct_level_design_gameplay_gameplay_start_event_date__gameplay_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__1_1.b66ff154c6",
            "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_.6115b9087d",
            "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_gameplay_LENGTH_session_id_5.b5b88c7bc8",
            "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_gameplay_user_id__session_id.d836af69b9",
            "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_gameplay_gameplay_down__gameplay_hp_loss.76e7482eb7"
        ],
        "model.dbt_sipher.mart_level_design_gameplay": [
            "model.dbt_sipher.mart_level_design_dungeon",
            "model.dbt_sipher.mart_level_design_dungeon",
            "model.dbt_sipher.mart_level_design_lvl",
            "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_.6115b9087d",
            "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_gameplay_.e1ef903c28",
            "test.dbt_sipher.missing_dungeon_mart_level_design_gameplay_.6c251e9f3f"
        ],
        "model.dbt_sipher.dim_sipher_odyssey_player": [],
        "model.dbt_sipher.int_sipher_odyssey_player_day0_version": [
            "model.dbt_sipher.fct_level_design_gameplay",
            "model.dbt_sipher.fct_level_design_lvl"
        ],
        "model.dbt_sipher.int_sipher_odyssey_player_country": [],
        "model.dbt_sipher.int_sipher_odyssey_player_devices": [
            "model.dbt_sipher.dim_hidden_atlas_player",
            "model.dbt_sipher.dim_sipher_odyssey_player"
        ],
        "model.dbt_sipher.fct_sipher_staking_claimed_rewards": [],
        "model.dbt_sipher.agg_staking_pool_transaction": [],
        "model.dbt_sipher.fct_staking_pool_transaction": [
            "model.dbt_sipher.agg_staking_pool_transaction"
        ],
        "model.dbt_sipher.fct_sipher_staking_distributed": [],
        "model.dbt_sipher.mart_important_wallet_accounts_balance": [],
        "model.dbt_sipher.fct_important_wallets_token_transfers": [
            "model.dbt_sipher.mart_important_wallet_accounts_balance"
        ],
        "model.dbt_sipher.fct_important_wallets_transactions": [],
        "operation.dbt_sipher.dbt_sipher-on-run-end-0": [],
        "test.dbt_sipher.not_null_quest_dashboard_hd_event_time.77cd6559d4": [],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_user_id__string.a704be848c": [],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_quest_userId__string.ed72e33032": [],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_quest_dashboard_hd_point_userid__string.ddccce3c50": [],
        "test.dbt_sipher.not_null_quest_dashboard_hd_user_pseudo_id.bebef8a49b": [],
        "test.dbt_sipher.not_null_quest_dashboard_hd_country.46bd95dfd6": [],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_quest_dashboard_hd_wallet_address__44__42__wallet_address_is_not_null__True.2ef46375c6": [],
        "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_top_sipherians_0_8__act_date.4c1e44aa4d": [],
        "test.dbt_sipher.not_null_atherlabs_users_act_date.3b096bb929": [],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_atherlabs_users_wallet_address__42__42__wallet_address_is_not_null__False.550cc7da90": [],
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__period.9e811c2560": [],
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_weekly_hd_0_15__quest_userId.d2bce102d0": [],
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_act_month.9a29470684": [],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_act_month__12__1.9ab6672425": [],
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_id_cnt.0c4db60863": [],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_id_cnt__0.c16260ae79": [],
        "test.dbt_sipher.not_null_atherlabs_dashboard_MAU_user_pseudo_id_cnt.c6408f9f0d": [],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_MAU_user_pseudo_id_cnt__0.bb797bbfb1": [],
        "test.dbt_sipher.dbt_utils_not_null_proportion_SIPHER_overall_0_8__act_date.2084568351": [],
        "test.dbt_sipher.unique_quest_4retention_daily_hd_o_time.80a27a00cb": [],
        "test.dbt_sipher.not_null_quest_4retention_daily_hd_o_time.c488df1162": [],
        "test.dbt_sipher.not_null_quest_4retention_daily_hd_ending.974c52bb7e": [],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_returns___0.667192cea6": [],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_news___0.4c2c3b0ca4": [],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_retention___0.dcee3a1078": [],
        "test.dbt_sipher.dbt_utils_expression_is_true_quest_4retention_daily_hd_churn_driver___0.b6ae81b862": [],
        "test.dbt_sipher.dbt_utils_not_null_proportion_game_dashboard_hd_0_8__event_date.1be5792482": [],
        "test.dbt_sipher.not_null_spaceship_claimable_lootbox_tokenId.2603bfe82b": [],
        "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_tokenId__0__1__2__3__4__5__6___1.fa05a8b96b": [],
        "test.dbt_sipher.not_null_spaceship_claimable_lootbox_lootbox_type.cb32e86218": [],
        "test.dbt_sipher.accepted_values_spaceship_claimable_lootbox_lootbox_type__Akagi__Alice__Flik_Flak__Ahab__Zed__Baron__Tunku__Mystery.2e9e808efe": [],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_platform.9283355619": [],
        "test.dbt_sipher.accepted_values_staking_rewards_total_claimed_platform__lp_uniswap__single_side__lp_kyberswap.2e9c8221a4": [],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_first_date_of_month.c9084e1172": [],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_wallet_address.113065f0a7": [],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_staking_rewards_total_claimed_wallet_address__43__41__wallet_address_is_not_null__True.90c93fd954": [],
        "test.dbt_sipher.not_null_staking_rewards_total_claimed_total_claimed.b760b08821": [],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_date.24daeffd16": [],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_act_month.77ff189eab": [],
        "test.dbt_sipher.dbt_utils_accepted_range_atherlabs_dashboard_DAU_act_month__12__1.2108c00134": [],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_id_cnt.cf331d33f3": [],
        "test.dbt_sipher.not_null_atherlabs_dashboard_DAU_user_pseudo_id_cnt.8c3a55d3e2": [],
        "test.dbt_sipher.dbt_utils_not_null_proportion_raw_loyalty_hd_0_15__user_id.937e86775c": [],
        "test.dbt_sipher.dbt_expectations_expect_column_value_lengths_to_be_between_raw_loyalty_hd_wallet_address__43__41__wallet_address_is_not_null__True.bcb332171a": [],
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_hour.473c2ab225": [],
        "test.dbt_sipher.dbt_utils_accepted_range_SIPHER_user_activeness_by_hour_hour__23__0.baae8606a5": [],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_hour__INT64.a1cfbd9a09": [],
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_user_count.3e4602b6f6": [],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_user_count__INT64.2ecc15ea27": [],
        "test.dbt_sipher.not_null_SIPHER_user_activeness_by_hour_event_count.e2d2d6113b": [],
        "test.dbt_sipher.dbt_expectations_expect_column_values_to_be_of_type_SIPHER_user_activeness_by_hour_event_count__INT64.7429bda734": [],
        "test.dbt_sipher.not_null_SIPHER_token_holders_overview_user_address.a982aeb387": [],
        "test.dbt_sipher.dbt_utils_not_null_proportion_quest_retention_daily_hd_0_8__period.cce60c36d4": [],
        "test.dbt_sipher.unique_quest_retention_daily_hd_period.49283d57a7": [],
        "test.dbt_sipher.not_null_dim_artventure_user_user_id.184c7e792d": [],
        "test.dbt_sipher.not_null_dim_artventure_user_user_email.f79283804d": [],
        "test.dbt_sipher.not_null_fct_artventure_task_events_date.9312343eaf": [],
        "test.dbt_sipher.not_null_fct_artventure_task_events_task_id.2742389359": [],
        "test.dbt_sipher.not_null_fct_artventure_task_events_status.6df6c766bb": [],
        "test.dbt_sipher.not_null_fct_artventure_user_events_user_id.0dd9905f86": [],
        "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_lvl_.1d3aac7e9a": [],
        "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_lvl_ref_fct_level_design_lvl_.dd9bd89d6c": [],
        "test.dbt_sipher.decode_dungeon_id_difficulty_mart_level_design_gameplay_.e1ef903c28": [],
        "test.dbt_sipher.missing_dungeon_mart_level_design_gameplay_.6c251e9f3f": [],
        "test.dbt_sipher.dbt_utils_equal_rowcount_mart_level_design_gameplay_ref_fct_level_design_gameplay_.6115b9087d": [],
        "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_gameplay_gameplay_down__gameplay_hp_loss.76e7482eb7": [],
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_gameplay_LENGTH_session_id_5.b5b88c7bc8": [],
        "test.dbt_sipher.check_columns_for_nulls_fct_level_design_gameplay_gameplay_start_event_date__gameplay_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__1_1.b66ff154c6": [],
        "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_gameplay_user_id__session_id.d836af69b9": [],
        "test.dbt_sipher.missing_level_fct_level_design_lvl_.13908e0c6b": [],
        "test.dbt_sipher.hploss_non_zero_when_down_nonzero_fct_level_design_lvl_down__hp_loss.36a26a0ff8": [],
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_LENGTH_session_id_5.5e4384ec11": [],
        "test.dbt_sipher.dbt_utils_expression_is_true_fct_level_design_lvl_level_start_level_count_12.c72a34b500": [],
        "test.dbt_sipher.check_columns_for_nulls_fct_level_design_lvl_level_start_event_date__level_start_event_timestamp__build_number__app_version__email__user_name__user_pseudo_id__user_id__day0_date_tzutc__session_id__dungeon_id__mode__difficulty__sub_race__character_level__character_PS__armor__armor_PS__head__head_PS__shoes__shoes_PS__legs__legs_PS__gloves__gloves_PS__weapon1__weapon1_PS__weapon2__weapon2_PS__level_start_level_count__1_1.9b972f0b8e": [],
        "test.dbt_sipher.dbt_utils_unique_combination_of_columns_fct_level_design_lvl_user_id__session_id__level_start_level_count.393b317bfe": [],
        "test.dbt_sipher.source_not_null_crypto_ethereum_token_transfers_block_timestamp.0cffd0c4e0": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_crypto_ethereum_token_transfers_block_timestamp.88bbc039e1": [],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_application.10deb2e88d": [],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_store_id.999adf312c": [],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts.c505161943": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_ad_revenue___collected_ts.485e3ab4a3": [],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_Ad_Unit_ID.b0bc07a54c": [],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID.848cce4cd3": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue_Revenue.4178b24384": [],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id.5f800a3a7d": [],
        "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue___collected_ts.6b030d5fdc": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue___collected_ts.f5406ae664": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.0dbd09035d": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.4a288a89e5": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.7aad339abc": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.c1a5750768": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.974a6427d2": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.7ab3ee357a": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email.5886ff2069": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_email.f564c401ae": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_cognito_dt__date.fc1a9a77cf": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id.564085b848": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_id.32f14dbae7": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.34f8a3aee8": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.ea37a30365": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_email.b0e1c50fad": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_user_dt__date.dc048870ed": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_address.4ce31050de": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_createdAt.b30ece57b5": [],
        "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.7316a110af": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.2e135f84d9": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_wallet_dt__date.1c3dffe6cf": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_id.b8bea69f04": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_createdAt.e29ffce993": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt.46f0543726": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt__date.486da51096": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_id.7d2e7ccc95": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_createdAt.06c741ea1c": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt.3a85d7108c": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt__date.ffc3a85b34": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_id.daee3e4f42": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_createdAt.7bbf3a81f2": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt.e90280d0d1": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt__date.f9c1586232": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_id.6e9edfb7c4": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_createdAt.c3f3507d42": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt.6c94d5df71": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt__date.23c2f77d6b": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_id.dab68187c7": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint__to_.203d911a78": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_signature.b756c08864": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_createdAt.c8748990d3": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt.336038e037": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt__date.7083c1c801": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_id.84e0b6c926": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned__to_.649ebfda5d": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_createdAt.015bd59457": [],
        "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt.5bf3088879": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt__date.8260a401cc": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_owner.1cbc082ace": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.4cc562561a": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.32bc4c3c59": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_owner.c7f2a42a76": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.bce426254a": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.f73a0b8619": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_owner.527c46a7a0": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.95e2485465": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.dbc29f555f": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_owner.4ccb8609f2": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.aafc18a412": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.01b5de2945": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_owner.7760aeeb20": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.4564aa20a8": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.b3e5fe734e": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_owner.ecc398def2": [],
        "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.8e8f578326": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.a455cc6015": [],
        "test.dbt_sipher.source_not_null_raw_social_discord_user_info_created_at.eb561c0cb5": [],
        "test.dbt_sipher.source_not_null_raw_social_discord_user_info_id.8b125c4225": [],
        "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_created_at.c1fb05bd4c": [],
        "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_id.15d97e5337": [],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_profile_stats_date.3fd76ba76a": [],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_user_info_id.a07df7d3b8": [],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment_post_id.bf8ddd01fb": [],
        "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment__desc_.0305ba5b69": [],
        "test.dbt_sipher.source_not_null_raw_social_twitter_profile_stats_id.10f1805edf": [],
        "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_created_at.94d84e4041": [],
        "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_id.73c50f8658": [],
        "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_created_at.3163bfddcb": [],
        "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_id.6094ac3138": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_id.b55f898f15": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed___collected_ts.f5fc502572": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_page_id.ad2948bb7a": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_name.f0eb1ad46e": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_id.0b96b4a409": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights___collected_ts.a478ebf264": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments_post_id.70ee486a35": [],
        "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments___collected_ts.2b680a92e4": [],
        "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_timestamp.b42e524759": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_timestamp.2554e09518": [],
        "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_name.762d8ac1fb": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_params.d6f864d1b8": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_user_properties.f09b4dd1a1": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_ecommerce.62d3f0249e": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_items.dc6acdf0a4": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_collected_traffic_source.740db06810": [],
        "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_timestamp.f225450ba4": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_timestamp.a032dca918": [],
        "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_name.e1d7be3511": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_params.424ad741b4": [],
        "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_timestamp.b1c9baab46": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_timestamp.336cb29b91": [],
        "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_name.3d7db8fa8d": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_params.d811f5cb62": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.b3dfb1a43a": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.7a6ed5f9c0": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_ProductCode.b682639c61": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_UnblendedCost.3a5430697c": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_BlendedCost.d6dcc7ad94": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_LineItemDescription.9c0b052bd1": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt.990ac578cf": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_blockchain_dt__date.208f58e107": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.3cee6eefbb": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.88c03ad13c": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_ProductCode.1ea0f6c89d": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_UnblendedCost.d1a99f177e": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_BlendedCost.78e58de029": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_lineItem_LineItemDescription.ace5932803": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_g1_dt__date.7e67c3bf92": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.9301958534": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.058f341f55": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_ProductCode.694387d42e": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_UnblendedCost.6a47fae0b2": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_BlendedCost.45b3432709": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_LineItemDescription.8b6ac9f5b0": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt.06b082bea7": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_marketplace_dt__date.5d596bb64e": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.7bde2004ca": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.fb580d52b2": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_ProductCode.a4a645fc7e": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_UnblendedCost.3d9a5e17d1": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_BlendedCost.0ede38da9b": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_lineItem_LineItemDescription.b5b1c31618": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_dt.78713742f0": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_game_production_dt__date.082cf5f767": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.f9038febbd": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.6e5cddcc3d": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_ProductCode.fd1699b097": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_UnblendedCost.d6d155d47a": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_BlendedCost.251f1d81be": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_LineItemDescription.f8e8b976f5": [],
        "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt.f42190344c": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_metaverse_dt__date.ff1180caa1": [],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_name.d3dd1ed862": [],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_timestamp.873137cb3b": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_timestamp.25c4cb59c8": [],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_timestamp.e358fedf2f": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_intraday_timestamp.7fb340058b": [],
        "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_token_symbol.a8d79ff1a2": [],
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_wallet_address.fa1d03bcdc": [],
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_token_symbol.399f726266": [],
        "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.7f047ffc17": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.8a17b876b7": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__blueprint": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__capsule": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__character": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__currency": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__equipment": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__equipment_part": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__weapon": [],
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_type__Gear.c8aa9cfe3a": [],
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_weaponType__None.3705c6993f": [],
        "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_race__None.7cdeedb364": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_blueprint_tier__int64.0bcf46c350": [],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_capsule_id.c1ae4762b2": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_capsule_tier__int64.3dcfc0113b": [],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_character_id.79fdb4a15a": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_character_tier__int64.f1bc17dd99": [],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_currency_id.04b38be9d4": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_currency_tier__int64.e7949fffcc": [],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_equipment_id.ed8ed28acb": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_tier__int64.3d37d2b642": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_part_tier__int64.7b68996a52": [],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_sipher_game_reward_id.aa3a5ba67a": [],
        "test.dbt_sipher.source_not_null_raw_meta_equipment_weapon_id.3430d0c231": [],
        "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_weapon_tier__int64.c8ae55ef69": [],
        "model.dbt_sipher.stg_sipher_meta_equipment__sipher_game_reward": [],
        "model.dbt_sipher.dim_sipher_odyssey_characters": [],
        "model.dbt_sipher.int_hidden_atlas_player_devices": [],
        "model.dbt_sipher.dim_twitter_profile": [
            "model.dbt_sipher.rpt_social_profile_stats",
            "model.dbt_sipher.rpt_twitter_post_stats"
        ],
        "source.dbt_sipher.crypto_ethereum.token_transfers": [
            "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_last_15d",
            "model.dbt_sipher.stg_bq_public_ethereum__token_transfer_today",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_crypto_ethereum_token_transfers_block_timestamp.88bbc039e1",
            "test.dbt_sipher.source_not_null_crypto_ethereum_token_transfers_block_timestamp.0cffd0c4e0"
        ],
        "source.dbt_sipher.raw_max_mediation.raw_ad_revenue": [
            "model.dbt_sipher.stg_max__ad_revenue",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_ad_revenue___collected_ts.485e3ab4a3",
            "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue___collected_ts.c505161943",
            "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_application.10deb2e88d",
            "test.dbt_sipher.source_not_null_raw_max_mediation_raw_ad_revenue_store_id.999adf312c"
        ],
        "source.dbt_sipher.raw_max_mediation.raw_user_ad_revenue": [
            "model.dbt_sipher.stg_max__user_ad_revenue",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue_Revenue.4178b24384",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_max_mediation_raw_user_ad_revenue___collected_ts.f5406ae664",
            "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_Ad_Unit_ID.b0bc07a54c",
            "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_User_ID.848cce4cd3",
            "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue___collected_ts.6b030d5fdc",
            "test.dbt_sipher.source_not_null_raw_max_mediation_raw_user_ad_revenue_app_id.5f800a3a7d"
        ],
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_cognito": [
            "model.dbt_sipher.stg_aws__ather_id__raw_cognito",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.c1a5750768",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.4a288a89e5",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_email.f564c401ae",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.7ab3ee357a",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_cognito_dt__date.fc1a9a77cf",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_UserCreateDate.7aad339abc",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_Username.0dbd09035d",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_email.5886ff2069",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_cognito_user_id.974a6427d2"
        ],
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_user": [
            "model.dbt_sipher.stg_aws__ather_id__raw_user",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.ea37a30365",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_email.b0e1c50fad",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_user_id.32f14dbae7",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_user_dt__date.dc048870ed",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_createdAt.34f8a3aee8",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_user_id.564085b848"
        ],
        "source.dbt_sipher.raw_atherid_gcs.aws__raw_ather_id_wallet": [
            "model.dbt_sipher.stg_aws__ather_id__raw_wallet",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.2e135f84d9",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_atherid_gcs_aws__raw_ather_id_wallet_dt__date.1c3dffe6cf",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_address.4ce31050de",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_createdAt.b30ece57b5",
            "test.dbt_sipher.source_not_null_raw_atherid_gcs_aws__raw_ather_id_wallet_userId.7316a110af"
        ],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_claim_lootbox": [
            "model.dbt_sipher.stg_aws__loyalty__raw_log_claim_lootbox",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt__date.486da51096",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_createdAt.e29ffce993",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_dt.46f0543726",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_claim_lootbox_id.b8bea69f04"
        ],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_open_lootbox": [
            "model.dbt_sipher.stg_aws__loyalty__raw_log_open_lootbox",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt__date.ffc3a85b34",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_createdAt.06c741ea1c",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_dt.3a85d7108c",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_open_lootbox_id.7d2e7ccc95"
        ],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_spaceship": [
            "model.dbt_sipher.stg_aws__loyalty__raw_log_spaceship",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt__date.f9c1586232",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_createdAt.7bbf3a81f2",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_dt.e90280d0d1",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_spaceship_id.daee3e4f42"
        ],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_log_scrap_spaceship_parts": [
            "model.dbt_sipher.stg_aws__loyalty__raw_log_scrap_spaceship_parts",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt__date.23c2f77d6b",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_createdAt.c3f3507d42",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_dt.6c94d5df71",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_log_scrap_spaceship_parts_id.6e9edfb7c4"
        ],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_pending_mint": [
            "model.dbt_sipher.stg_aws__loyalty__raw_pending_mint",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt__date.7083c1c801",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint__to_.203d911a78",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_createdAt.c8748990d3",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_dt.336038e037",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_id.dab68187c7",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_pending_mint_signature.b756c08864"
        ],
        "source.dbt_sipher.raw_loyalty_dashboard_gcs.loyalty__raw_burned": [
            "model.dbt_sipher.stg_aws__loyalty__raw_burned",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt__date.8260a401cc",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned__to_.649ebfda5d",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_createdAt.015bd59457",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_dt.5bf3088879",
            "test.dbt_sipher.source_not_null_raw_loyalty_dashboard_gcs_loyalty__raw_burned_id.84e0b6c926"
        ],
        "source.dbt_sipher.raw_game_meta.raw_inventory_balancing_update": [
            "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update",
            "model.dbt_sipher.stg_sipher_server__raw_inventory_balancing_update_today"
        ],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_lootbox": [
            "model.dbt_sipher.stg_opensearch_onchain__raw_lootbox",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.32bc4c3c59",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_dt.4cc562561a",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_lootbox_owner.1cbc082ace"
        ],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship": [
            "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.f73a0b8619",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_dt.bce426254a",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_owner.c7f2a42a76"
        ],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_spaceship_parts": [
            "model.dbt_sipher.stg_opensearch_onchain__raw_spaceship_parts",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.dbc29f555f",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_dt.95e2485465",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_spaceship_parts_owner.527c46a7a0"
        ],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_sculpture": [
            "model.dbt_sipher.stg_opensearch_onchain__raw_sculpture",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.01b5de2945",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_dt.aafc18a412",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_sculpture_owner.4ccb8609f2"
        ],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_inu": [
            "model.dbt_sipher.stg_opensearch_onchain__raw_inu",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.b3e5fe734e",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_dt.4564aa20a8",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_inu_owner.7760aeeb20"
        ],
        "source.dbt_sipher.raw_aws_opensearch_onchain_nft.opensearch_onchain__raw_neko": [
            "model.dbt_sipher.stg_opensearch_onchain__raw_neko",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.a455cc6015",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_dt.8e8f578326",
            "test.dbt_sipher.source_not_null_raw_aws_opensearch_onchain_nft_opensearch_onchain__raw_neko_owner.ecc398def2"
        ],
        "source.dbt_sipher.raw_social.discord_user_info": [
            "model.dbt_sipher.stg_discord_user_info_latest_snapshot",
            "model.dbt_sipher.stg_discord_user_info_latest_snapshot",
            "test.dbt_sipher.source_not_null_raw_social_discord_user_info_created_at.eb561c0cb5",
            "test.dbt_sipher.source_not_null_raw_social_discord_user_info_id.8b125c4225"
        ],
        "source.dbt_sipher.raw_social.discord_profile_stats": [
            "model.dbt_sipher.stg_discord_profile_stats_snapshot",
            "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_created_at.c1fb05bd4c",
            "test.dbt_sipher.source_not_null_raw_social_discord_profile_stats_id.15d97e5337"
        ],
        "source.dbt_sipher.raw_social.tiktok_profile_stats": [
            "model.dbt_sipher.stg_tiktok_profile_stats",
            "test.dbt_sipher.source_not_null_raw_social_tiktok_profile_stats_date.3fd76ba76a"
        ],
        "source.dbt_sipher.raw_social.tiktok_user_info": [
            "model.dbt_sipher.stg_tiktok_user_info",
            "test.dbt_sipher.source_not_null_raw_social_tiktok_user_info_id.a07df7d3b8"
        ],
        "source.dbt_sipher.raw_social.tiktok_video_comment": [
            "model.dbt_sipher.stg_tiktok_video_comment",
            "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment__desc_.0305ba5b69",
            "test.dbt_sipher.source_not_null_raw_social_tiktok_video_comment_post_id.bf8ddd01fb"
        ],
        "source.dbt_sipher.raw_social.twitter_profile_stats": [
            "model.dbt_sipher.stg_twitter_profile_stats",
            "test.dbt_sipher.source_not_null_raw_social_twitter_profile_stats_id.10f1805edf"
        ],
        "source.dbt_sipher.raw_social.twitter_timeline": [
            "model.dbt_sipher.stg_twitter_timeline",
            "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_created_at.94d84e4041",
            "test.dbt_sipher.source_not_null_raw_social_twitter_timeline_id.73c50f8658"
        ],
        "source.dbt_sipher.raw_social.twitter_user_info": [
            "model.dbt_sipher.stg_twitter_user_info_latest_snapshot",
            "model.dbt_sipher.stg_twitter_user_info_latest_snapshot",
            "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_created_at.3163bfddcb",
            "test.dbt_sipher.source_not_null_raw_social_twitter_user_info_id.6094ac3138"
        ],
        "source.dbt_sipher.raw_social.facebook_sipher_page_feed": [
            "model.dbt_sipher.stg_facebook_page_feed",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed___collected_ts.f5fc502572",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_id.b55f898f15",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_page_feed_page_id.ad2948bb7a"
        ],
        "source.dbt_sipher.raw_social.facebook_sipher_post_insights": [
            "model.dbt_sipher.stg_facebook_post_insights",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights___collected_ts.a478ebf264",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_id.0b96b4a409",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_insights_name.f0eb1ad46e"
        ],
        "source.dbt_sipher.raw_social.facebook_sipher_post_comments": [
            "model.dbt_sipher.stg_facebook_post_comments",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments___collected_ts.2b680a92e4",
            "test.dbt_sipher.source_not_null_raw_social_facebook_sipher_post_comments_post_id.70ee486a35"
        ],
        "source.dbt_sipher.raw_social.facebook_sipher_page_insights": [
            "model.dbt_sipher.stg_facebook_page_insights"
        ],
        "source.dbt_sipher.raw_social.facebook_sipher_page_overall": [
            "model.dbt_sipher.stg_facebook_page_overall"
        ],
        "source.dbt_sipher.raw_social.facebook_sipher_page_impression_gender_locate": [
            "model.dbt_sipher.stg_facebook_page_impression_gender_locate"
        ],
        "source.dbt_sipher.raw_social.youtube_overview": [
            "model.dbt_sipher.stg_youtube_overview"
        ],
        "source.dbt_sipher.raw_social.youtube_traffic_sources": [
            "model.dbt_sipher.stg_youtube_traffic_sources"
        ],
        "source.dbt_sipher.raw_social.youtube_contents": [
            "model.dbt_sipher.stg_youtube_contents"
        ],
        "source.dbt_sipher.raw_social.youtube_demographics": [
            "model.dbt_sipher.stg_youtube_demographics"
        ],
        "source.dbt_sipher.raw_social.youtube_geographic_areas": [
            "model.dbt_sipher.stg_youtube_geographic_areas"
        ],
        "source.dbt_sipher.raw_firebase_sipher_odyssey.events": [
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_14d",
            "model.dbt_sipher.stg_firebase__sipher_odyssey_events_all_time",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_collected_traffic_source.740db06810",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_ecommerce.62d3f0249e",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_params.d6f864d1b8",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_event_timestamp.2554e09518",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_items.dc6acdf0a4",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_sipher_odyssey_events_user_properties.f09b4dd1a1",
            "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_name.762d8ac1fb",
            "test.dbt_sipher.source_not_null_raw_firebase_sipher_odyssey_events_event_timestamp.b42e524759"
        ],
        "source.dbt_sipher.raw_firebase_hidden_atlas.events": [
            "model.dbt_sipher.stg_firebase__hidden_atlas_events_14d",
            "model.dbt_sipher.stg_firebase__hidden_atlas_events_all_time",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_params.424ad741b4",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_hidden_atlas_events_event_timestamp.a032dca918",
            "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_name.e1d7be3511",
            "test.dbt_sipher.source_not_null_raw_firebase_hidden_atlas_events_event_timestamp.f225450ba4"
        ],
        "source.dbt_sipher.raw_firebase_artventure.events": [
            "model.dbt_sipher.stg_firebase__artventure_events_14d",
            "model.dbt_sipher.stg_firebase__artventure_events_all_time",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_params.d811f5cb62",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_firebase_artventure_events_event_timestamp.336cb29b91",
            "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_name.3d7db8fa8d",
            "test.dbt_sipher.source_not_null_raw_firebase_artventure_events_event_timestamp.b1c9baab46"
        ],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_blockchain": [
            "model.dbt_sipher.stg_aws__billing__raw_blockchain",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.7a6ed5f9c0",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_LineItemDescription.9c0b052bd1",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_blockchain_dt__date.208f58e107",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_dt.990ac578cf",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_identity_LineItemId.b3dfb1a43a",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_BlendedCost.d6dcc7ad94",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_ProductCode.b682639c61",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_blockchain_lineItem_UnblendedCost.3a5430697c"
        ],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_g1": [
            "model.dbt_sipher.stg_aws__billing__raw_g1",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.88c03ad13c",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_g1_lineItem_LineItemDescription.ace5932803",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_g1_dt__date.7e67c3bf92",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_identity_LineItemId.3cee6eefbb",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_BlendedCost.78e58de029",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_ProductCode.1ea0f6c89d",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_g1_lineItem_UnblendedCost.d1a99f177e"
        ],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_marketplace": [
            "model.dbt_sipher.stg_aws__billing__raw_marketplace",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.058f341f55",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_LineItemDescription.8b6ac9f5b0",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_marketplace_dt__date.5d596bb64e",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_dt.06b082bea7",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_identity_LineItemId.9301958534",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_BlendedCost.45b3432709",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_ProductCode.694387d42e",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_marketplace_lineItem_UnblendedCost.6a47fae0b2"
        ],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_game_production": [
            "model.dbt_sipher.stg_aws__billing__raw_game_production",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.fb580d52b2",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_game_production_lineItem_LineItemDescription.b5b1c31618",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_game_production_dt__date.082cf5f767",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_dt.78713742f0",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_identity_LineItemId.7bde2004ca",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_BlendedCost.0ede38da9b",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_ProductCode.a4a645fc7e",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_game_production_lineItem_UnblendedCost.3d9a5e17d1"
        ],
        "source.dbt_sipher.raw_aws_billing_gcs.billing__raw_metaverse": [
            "model.dbt_sipher.stg_aws__billing__raw_metaverse",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.6e5cddcc3d",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_LineItemDescription.f8e8b976f5",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_aws_billing_gcs_billing__raw_metaverse_dt__date.ff1180caa1",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_dt.f42190344c",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_identity_LineItemId.f9038febbd",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_BlendedCost.251f1d81be",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_ProductCode.fd1699b097",
            "test.dbt_sipher.source_not_null_raw_aws_billing_gcs_billing__raw_metaverse_lineItem_UnblendedCost.d6d155d47a"
        ],
        "source.dbt_sipher.raw_coinmarketcap.main_token_quotes": [
            "model.dbt_sipher.stg_coinmarketcap__main_token_quotes",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_timestamp.25c4cb59c8",
            "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_name.d3dd1ed862",
            "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_timestamp.873137cb3b"
        ],
        "source.dbt_sipher.raw_coinmarketcap.main_token_quotes_intraday": [
            "model.dbt_sipher.stg_coinmarketcap__main_token_quotes_intraday",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_coinmarketcap_main_token_quotes_intraday_timestamp.7fb340058b",
            "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_timestamp.e358fedf2f",
            "test.dbt_sipher.source_not_null_raw_coinmarketcap_main_token_quotes_intraday_token_symbol.a8d79ff1a2"
        ],
        "source.dbt_sipher.raw_etherscan.etherscan_polygon_important_wallet_accounts_balance": [
            "model.dbt_sipher.stg_etherscan_polygon__important_wallet_accounts_balance",
            "test.dbt_sipher.dbt_expectations_source_expect_column_to_exist_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.8a17b876b7",
            "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_timestamp.7f047ffc17",
            "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_token_symbol.399f726266",
            "test.dbt_sipher.source_not_null_raw_etherscan_etherscan_polygon_important_wallet_accounts_balance_wallet_address.fa1d03bcdc"
        ],
        "source.dbt_sipher.raw_meta_equipment.blueprint": [
            "model.dbt_sipher.stg_sipher_meta_equipment__blueprint",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_blueprint_tier__int64.0bcf46c350",
            "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_race__None.7cdeedb364",
            "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_type__Gear.c8aa9cfe3a",
            "test.dbt_sipher.source_accepted_values_raw_meta_equipment_blueprint_weaponType__None.3705c6993f"
        ],
        "source.dbt_sipher.raw_meta_equipment.capsule": [
            "model.dbt_sipher.stg_sipher_meta_equipment__capsule",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_capsule_tier__int64.3dcfc0113b",
            "test.dbt_sipher.source_not_null_raw_meta_equipment_capsule_id.c1ae4762b2"
        ],
        "source.dbt_sipher.raw_meta_equipment.character": [
            "model.dbt_sipher.stg_sipher_meta_equipment__character",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_character_tier__int64.f1bc17dd99",
            "test.dbt_sipher.source_not_null_raw_meta_equipment_character_id.79fdb4a15a"
        ],
        "source.dbt_sipher.raw_meta_equipment.currency": [
            "model.dbt_sipher.stg_sipher_meta_equipment__currency",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_currency_tier__int64.e7949fffcc",
            "test.dbt_sipher.source_not_null_raw_meta_equipment_currency_id.04b38be9d4"
        ],
        "source.dbt_sipher.raw_meta_equipment.equipment": [
            "model.dbt_sipher.stg_sipher_meta_equipment__equipment",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_tier__int64.3d37d2b642",
            "test.dbt_sipher.source_not_null_raw_meta_equipment_equipment_id.ed8ed28acb"
        ],
        "source.dbt_sipher.raw_meta_equipment.equipment_part": [
            "model.dbt_sipher.stg_sipher_meta_equipment__equipment_part",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_equipment_part_tier__int64.7b68996a52"
        ],
        "source.dbt_sipher.raw_meta_equipment.sipher_game_reward": [
            "model.dbt_sipher.stg_sipher_meta_equipment__sipher_game_reward",
            "test.dbt_sipher.source_not_null_raw_meta_equipment_sipher_game_reward_id.aa3a5ba67a"
        ],
        "source.dbt_sipher.raw_meta_equipment.weapon": [
            "model.dbt_sipher.stg_sipher_meta_equipment__weapon",
            "test.dbt_sipher.dbt_expectations_source_expect_column_values_to_be_of_type_raw_meta_equipment_weapon_tier__int64.c8ae55ef69",
            "test.dbt_sipher.source_not_null_raw_meta_equipment_weapon_id.3430d0c231"
        ]
    }
}